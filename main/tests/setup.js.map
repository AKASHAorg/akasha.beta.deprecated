{"version":3,"file":"setup.js","sourceRoot":"","sources":["setup.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../typings/main.d.ts\" />\nimport { GethConnector, gethHelper } from '@akashaproject/geth-connector';\nimport { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport contracts  from '@akashaproject/contracts.js';\nimport { join as pathJoin } from 'path';\nimport { Application } from 'spectron';\nimport { expect } from 'chai';\nimport * as rimraf from 'rimraf';\nimport TestRPC = require('ethereumjs-testrpc');\n\nconst binPath = pathJoin(__dirname, 'downloads');\nconst ethData = pathJoin(__dirname, 'eth-chain');\nconst ipfsData = pathJoin(__dirname, 'ipfs-dir');\n\nconst logger = {\n    info: console.info,\n    error: console.error,\n    warn: console.warn\n};\n\nexport default class TestsHelper {\n\n    static getElectronPath() {\n        let electronPath = pathJoin(__dirname, '..', '..', 'node_modules', '.bin', 'electron');\n        if (process.platform === 'win32') electronPath += '.cmd';\n        return electronPath;\n    }\n\n    static setupTimeout(test: any) {\n        if (process.env.CI) {\n            test.timeout(60000);\n        } else {\n            test.timeout(30000);\n        }\n    }\n\n    static startApplication(options: any) {\n        options.path = TestsHelper.getElectronPath();\n        if (process.env.CI) options.startTimeout = 30000;\n        const app = new Application(options);\n        return app.start().then(() => {\n            rimraf.sync(binPath);\n            rimraf.sync(ethData);\n            rimraf.sync(ipfsData);\n            expect(app.isRunning()).to.be.true;\n\n            GethConnector.getInstance().setLogger(logger);\n            GethConnector.getInstance().setBinPath(binPath);\n            GethConnector.getInstance().setOptions({ datadir: ethData });\n            GethConnector.getInstance().web3.setProvider(TestRPC.provider());\n            GethConnector.getInstance().serviceStatus = { process: false, api: true };\n\n            IpfsConnector.getInstance().setLogger(logger);\n            IpfsConnector.getInstance().setBinPath(binPath);\n            IpfsConnector.getInstance().setIpfsFolder(ipfsData);\n            gethHelper.syncing = false;\n            return app;\n        });\n    }\n\n    static stopApplication(app: any) {\n        rimraf.sync(binPath);\n        rimraf.sync(ethData);\n        rimraf.sync(ipfsData);\n        if (!app || !app.isRunning()) return;\n\n        return app.stop().then(function () {\n            expect(app.isRunning()).to.be.false;\n        });\n    }\n\n    static deployContracts() {\n        if (!GethConnector.getInstance().web3.currentProvider) {\n            throw new Error('web3 needs an api provider');\n        }\n        const cc = new contracts.Class(GethConnector.getInstance().web3);\n\n        return GethConnector.getInstance().web3.eth.getAccountsAsync().then(\n            (accList: any[]) => {\n                cc.classes.AkashaRegistry.new(\n                    {from: accList[0], gas: 3000000, data: ''},\n                    (err: any, data: any) => {\n                    if (data.address) {\n                        //console.log(data);\n                    }\n                });\n            }\n        );\n    }\n}\n"]}