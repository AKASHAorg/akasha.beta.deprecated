{"version":3,"file":"setup.js","sourceRoot":"","sources":["setup.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../typings/main.d.ts\" />\nimport { GethConnector, gethHelper, CONSTANTS } from '@akashaproject/geth-connector';\nimport { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport contracts from '@akashaproject/contracts.js';\nimport { join as pathJoin } from 'path';\nimport { Application } from 'spectron';\nimport { expect } from 'chai';\nimport * as rimraf from 'rimraf';\nimport channels from '../lib/channels';\nimport TestRPC = require('ethereumjs-testrpc');\n\nconst binPath = pathJoin(__dirname, 'downloads');\nconst ethData = pathJoin(__dirname, 'eth-chain');\nconst ipfsData = pathJoin(__dirname, 'ipfs-dir');\n\nconst logger = {\n    info: () => {},\n    error: console.error,\n    warn: console.warn\n};\n\nexport default class TestsHelper {\n\n    static getElectronPath() {\n        let electronPath = pathJoin(__dirname, '..', '..', 'node_modules', '.bin', 'electron');\n        if (process.platform === 'win32') electronPath += '.cmd';\n        return electronPath;\n    }\n\n    static setupTimeout(test: any) {\n        if (process.env.CI) {\n            test.timeout(60000);\n        } else {\n            test.timeout(30000);\n        }\n    }\n\n    static get channels() {\n        return channels;\n    }\n\n    static startApplication(options: any) {\n        options.path = TestsHelper.getElectronPath();\n        if (process.env.CI) options.startTimeout = 30000;\n        const app = new Application(options);\n        return app.start().then(() => {\n            rimraf.sync(binPath);\n            rimraf.sync(ethData);\n            rimraf.sync(ipfsData);\n            expect(app.isRunning()).to.be.true;\n            TestsHelper.initTestingEnv();\n            return app;\n        });\n    }\n\n    static initTestingEnv() {\n        GethConnector.getInstance().setLogger(logger);\n        GethConnector.getInstance().setBinPath(binPath);\n        GethConnector.getInstance().setOptions({ datadir: ethData });\n        GethConnector.getInstance().web3.setProvider(TestRPC.provider());\n        GethConnector.getInstance().serviceStatus = { process: false, api: true };\n\n        IpfsConnector.getInstance().setLogger(logger);\n        IpfsConnector.getInstance().setBinPath(binPath);\n        IpfsConnector.getInstance().setIpfsFolder(ipfsData);\n        gethHelper.syncing = false;\n    }\n\n    static stopApplication(app: any) {\n        rimraf.sync(binPath);\n        rimraf.sync(ethData);\n        rimraf.sync(ipfsData);\n        if (!app || !app.isRunning()) return;\n\n        return app.stop().then(function () {\n            expect(app.isRunning()).to.be.false;\n        });\n    }\n\n    static deployContracts(cb: any) {\n        if (!GethConnector.getInstance().web3.currentProvider) {\n            throw new Error('web3 needs an api provider');\n        }\n        console.info('==== INITIATING CONTRACTS ====');\n        const cc = new contracts.Class(GethConnector.getInstance().web3);\n        return GethConnector.getInstance().web3.eth.getAccountsAsync().then(\n            (accList: any[]) => {\n                cc.classes.AkashaRegistry.new(\n                    { from: accList[0], gas: 3000000, data: '' },\n                    (err: any, data: any) => {\n                        if (data.address) {\n                            console.info(`AkashaRegistry deployed at ${data.address}`);\n                            return TestsHelper.deployTags(\n                                cc.classes,\n                                accList[0],\n                                { AkashaRegistry: data },\n                                cb\n                            );\n                        }\n                    });\n            }\n        );\n    }\n\n    static deployTags(contracts: any, account: string, resolved: any, cb: any) {\n        if (!resolved.AkashaRegistry) {\n            throw new Error('AkashaRegistry address is required');\n        }\n        contracts.AkashaTags.new(\n            { from: account, gas: 3000000, data: '' },\n            (err: any, data: any) => {\n                if (data.address) {\n                    console.info(`AkashaTags deployed at ${data.address}`);\n                    return TestsHelper.deployIndexedTags(\n                        contracts,\n                        account,\n                        Object.assign(resolved, { AkashaTags: data }),\n                        cb\n                    );\n                }\n            }\n        );\n    }\n\n    static deployIndexedTags(contracts: any, account: string, resolved: any, cb: any) {\n        if (!resolved.AkashaTags || !resolved.AkashaRegistry) {\n            throw new Error('AkashaTags and AkashaRegistry are required');\n        }\n        contracts.IndexedTags.new(\n            resolved.AkashaTags.address,\n            resolved.AkashaRegistry.address,\n            { from: account, gas: 3000000, data: '' },\n            (err: any, data: any) => {\n                if (data.address) {\n                    console.info(`IndexedTags deployed at ${data.address}`);\n                    return TestsHelper.deployFunds(\n                        contracts,\n                        account,\n                        Object.assign(resolved, { IndexedTags: data }),\n                        cb\n                    );\n                }\n            }\n        );\n    }\n\n    static deployFunds(contracts: any, account: string, resolved: any, cb: any) {\n        contracts.AkashaFunds.new(\n            { from: account, gas: 3000000, data: '' },\n            (err: any, data: any) => {\n                if (data.address) {\n                    console.info(`AkashaFunds deployed at ${data.address}`);\n                    return TestsHelper.deployFaucet(\n                        contracts,\n                        account,\n                        Object.assign(resolved, { AkashaFunds: data }),\n                        cb\n                    );\n                }\n            }\n        );\n    }\n\n    static deployFaucet(contracts: any, account: string, resolved: any, cb: any) {\n        contracts.AkashaFaucet.new(\n            { from: account, gas: 3000000, data: '' },\n            (err: any, data: any) => {\n                if (data.address) {\n                    console.info(`AkashaFaucet deployed at ${data.address}`);\n                    return TestsHelper.deployMain(\n                        contracts,\n                        account,\n                        Object.assign(resolved, { AkashaFaucet: data }),\n                        cb\n                    );\n                }\n            }\n        );\n    }\n\n    static deployMain(contracts: any, account: string, resolved: any, cb: any) {\n        contracts.AkashaMain.new(\n            resolved.AkashaRegistry.address,\n            resolved.IndexedTags.address,\n            resolved.AkashaFaucet.address,\n            resolved.AkashaFunds.address,\n            { from: account, gas: 4500000, data: '' },\n            (err: any, data: any) => {\n                if (data.address) {\n                    console.info(`AkashaMain deployed at ${data.address}`);\n                    resolved.IndexedTags.setMain(\n                        data.address, { from: account, gas: 1500000, data: '' },\n                        (err: Error, final: any) => {\n                            console.log(`waiting for tx: ${final}`);\n                            GethConnector.getInstance().on(CONSTANTS.TX_MINED, (tx: string) => {\n                                if (tx === final) {\n                                    console.log('==== CONTRACTS DEPLOYED AND READY ====');\n                                    GethConnector.getInstance().removeAllListeners(CONSTANTS.TX_MINED);\n                                    cb(Object.assign(resolved, { AkashaMain: data }));\n                                }\n                            });\n                            gethHelper.addTxToWatch(final);\n                        });\n                }\n            }\n        );\n    }\n}\n"]}