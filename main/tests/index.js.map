{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AACA,wBAAwB,SAAS,CAAC,CAAA;AAClC,iCAA0C,+BAA+B,CAAC,CAAA;AAC1E,uBAAwB,MAAM,CAAC,CAAA;AAC/B,uBAAuB,MAAM,CAAC,CAAA;AAE9B,QAAQ,CAAC,iBAAiB,EAAE;IACxB,eAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,IAAI,GAAG,cAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5C,IAAI,GAAQ,CAAC;IACb,MAAM,CAAC;QACH,MAAM,CAAC,eAAW,CAAC,gBAAgB,CAAC;YAChC,IAAI,EAAE,CAAC,IAAI,CAAC;YACZ,GAAG,EAAE;gBACD,GAAG,EAAE,CAAC;aACT;SACJ,CAAC,CAAC,IAAI,CAAC,CAAC,OAAY;YACjB,GAAG,GAAG,OAAO,CAAC;YACd,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YACvC,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,UAAS,IAAI;QAC5C,aAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;QAC9B,eAAW,CAAC,eAAe,CAAC,CAAC,IAAS;YAClC,aAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;YACjC,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,UAAS,IAAI;QACjC,8BAAa,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QACpC,8BAAa,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,2BAAU,CAAC,eAAe,EAAE;YACvD,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAIH,EAAE,CAAC,uCAAuC,EAAE;QACxC,MAAM,CAAC,GAAG,CAAC,MAAM;aACZ,qBAAqB,CAAC,IAAI,CAAC;aAC3B,YAAY,CAAC,CAAC,IAAS;YACpB,MAAM,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC;YACpD,WAAW,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAW;gBAC3D,IAAI,CAAC,MAAM,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YACH,WAAW,CAAC,IAAI,CACZ,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAClC,EAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,EAAE,IAAI,EAAC,CACjE,CAAC;QACV,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,GAAQ;YACX,aAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;QACpC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC;QACH,MAAM,CAAC,eAAW,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/// <reference path=\"../typings/main.d.ts\" />\nimport TestsHelper from './setup';\nimport { IpfsConnector, ipfsEvents } from '@akashaproject/ipfs-connector';\nimport { resolve } from 'path';\nimport { expect } from 'chai';\n\ndescribe('Auth IPC module', function(){\n    TestsHelper.setupTimeout(this);\n    const main = resolve(__dirname, '..', '..');\n    let app: any;\n    before(function () {\n        return TestsHelper.startApplication({\n            args: [main],\n            env: {\n                HOT: 1\n            }\n        }).then((dataObj: any) => {\n            app = dataObj;\n            app.client.timeoutsImplicitWait(15000);\n            app.client.timeoutsAsyncScript(15000);\n            return dataObj;\n        });\n    });\n\n    it('should deploy all contracts', function(done) {\n       expect(app).to.be.an('object');\n        TestsHelper.deployContracts((data: any) => {\n            expect(data).not.to.be.undefined;\n            done();\n        });\n    });\n\n    it('should start ipfs', function(done) {\n        IpfsConnector.getInstance().start();\n        IpfsConnector.getInstance().on(ipfsEvents.SERVICE_STARTED, () => {\n            done();\n        });\n    });\n\n    // cant test ipc inside spectron https://github.com/electron/spectron/issues/98\n    // must use dirty client.executeAsync >_>\n    it('should listen for auth.generateEthKey', function() {\n        return app.client\n            .waitUntilWindowLoaded(1000)\n            .executeAsync((done: any) => {\n                const ipcRenderer = require('electron').ipcRenderer;\n                ipcRenderer.on(window.Channel.client.auth.manager, (status: any) => {\n                    done(status);\n                });\n                ipcRenderer.send(\n                    window.Channel.server.auth.manager,\n                    {channel: window.Channel.server.auth.generateEthKey, listen: true}\n                    );\n            })\n            .then((ret: any) => {\n                expect(ret).not.to.be.undefined;\n            });\n    });\n\n    after(function() {\n       return TestsHelper.stopApplication(app);\n    });\n});\n"]}