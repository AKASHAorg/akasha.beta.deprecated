{"version":3,"file":"ipcPreloader.js","sourceRoot":"","sources":["ipcPreloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { ipcRenderer } from 'electron';\nimport IpcRendererEventListener = Electron.IpcRendererEventListener;\n\nclass GenericApi {\n    public channel: string;\n    public channelName: string;\n\n    constructor(channel: string, channelName?: string) {\n        this.channel = channel;\n        this.channelName = channelName;\n    }\n\n}\nexport class ApiRequest extends GenericApi {\n    public manager: string;\n    public idRequest = 0;\n    public CHUNK_SIZE = 64 * 1024; // 32kb\n    public MAX_RECURSION = 5;\n\n    constructor(channel: string, manager: string, channelName?: string) {\n        super(channel, channelName);\n        this.manager = manager;\n    }\n\n    public send(data: {}, hasMedia = false) {\n        if (!hasMedia) {\n            return ipcRenderer.send(this.channel, data);\n        }\n        this.idRequest++;\n        this._sendInChunks(data, this.idRequest, 1);\n    }\n\n    private _sendInChunks(data: any, idRequest, recursionLevel) {\n        if (recursionLevel > this.MAX_RECURSION) {\n            return;\n        }\n        Object.keys(data).forEach((element) => {\n            if (data[element] instanceof Uint8Array) {\n                this._push(data[element], element, recursionLevel, idRequest);\n            } else if (typeof data[element] === 'object') {\n                this._sendInChunks(data[element], idRequest, recursionLevel++);\n            }\n        });\n    }\n\n    public _push(uint8Instance: Uint8Array, key: string, recursionLevel: number, idRequest) {\n        const chunks = Math.ceil(uint8Instance.length / this.CHUNK_SIZE);\n        for (let i = 0; i < chunks; i++) {\n            const start = i * this.CHUNK_SIZE;\n            const slice = start + this.CHUNK_SIZE;\n            const stop = (slice > uint8Instance.length) ? uint8Instance.length : slice;\n            ipcRenderer.send(\n                this.channel,\n                {\n                    key,\n                    value: uint8Instance.subarray(start, stop),\n                    slices: chunks,\n                    currentSlice: i,\n                    recursionLevel,\n                    idRequest\n                }\n            )\n        }\n    }\n\n    public enable() {\n        ipcRenderer.send(this.manager, { channel: this.channel, listen: true })\n    }\n\n    public disable() {\n        ipcRenderer.send(this.manager, { channel: this.channel, listen: false })\n    }\n}\n\nexport class ApiListener extends GenericApi {\n\n    public on(listener: IpcRendererEventListener) {\n        ipcRenderer.on(this.channel, listener);\n    }\n\n    public once(listener: IpcRendererEventListener) {\n        ipcRenderer.once(this.channel, listener);\n    }\n\n    public removeListener(listener: IpcRendererEventListener) {\n        ipcRenderer.removeListener(this.channel, listener);\n    }\n\n    public removeAllListeners() {\n        ipcRenderer.removeAllListeners(this.channel);\n    }\n\n    get listenerCount() {\n        return ipcRenderer.listenerCount(this.channel);\n    }\n}\n"]}