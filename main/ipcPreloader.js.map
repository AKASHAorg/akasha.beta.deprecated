{"version":3,"file":"ipcPreloader.js","sourceRoot":"","sources":["ipcPreloader.ts"],"names":[],"mappings":";AAAA,2BAA4B,UAAU,CAAC,CAAA;AAGvC;IAII,YAAY,OAAe,EAAE,WAAoB;QAC7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;AAEL,CAAC;AACD,yBAAgC,UAAU;IAItC,YAAY,OAAe,EAAE,OAAe,EAAE,WAAoB;QAC9D,MAAM,OAAO,EAAE,WAAW,CAAC,CAAC;QAHzB,cAAS,GAAG,CAAC,CAAC;QAIjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAEM,IAAI,CAAC,IAAQ,EAAE,QAAQ,GAAG,KAAK;QAClC,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAA,CAAC;YACV,MAAM,CAAC,sBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAC,CAAC,CAAC;QACxE,IAAI,CAAC,SAAS,EAAE,CAAC;IAErB,CAAC;IAEO,WAAW,CAAC,IAAS;IAE7B,CAAC;IAEM,MAAM;QACT,sBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAA;IAC3E,CAAC;IAEM,OAAO;QACV,sBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAA;IAC5E,CAAC;AACL,CAAC;AA7BY,kBAAU,aA6BtB,CAAA;AAED,0BAAiC,UAAU;IAEhC,EAAE,CAAC,QAAkC;QACxC,sBAAW,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAEM,IAAI,CAAC,QAAkC;QAC1C,sBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAEM,cAAc,CAAC,QAAkC;QACpD,sBAAW,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAEM,kBAAkB;QACrB,sBAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,aAAa;QACb,MAAM,CAAC,sBAAW,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;AACL,CAAC;AArBY,mBAAW,cAqBvB,CAAA","sourcesContent":["import { ipcRenderer } from 'electron';\nimport IpcRendererEventListener = Electron.IpcRendererEventListener;\n\nclass GenericApi {\n    public channel: string;\n    public channelName: string;\n\n    constructor(channel: string, channelName?: string) {\n        this.channel = channel;\n        this.channelName = channelName;\n    }\n\n}\nexport class ApiRequest extends GenericApi {\n    public manager: string;\n    public idRequest = 0;\n\n    constructor(channel: string, manager: string, channelName?: string) {\n        super(channel, channelName);\n        this.manager = manager;\n    }\n\n    public send(data: {}, hasUint8 = false) {\n        if(!hasUint8){\n            return ipcRenderer.send(this.channel, data);\n        }\n        const registeredData = Object.assign(data, {requestId: this.idRequest});\n        this.idRequest++;\n        //return this._sendChunks(registeredData);\n    }\n\n    private _sendChunks(data: any) {\n        //return ipcRenderer;\n    }\n\n    public enable() {\n        ipcRenderer.send(this.manager, { channel: this.channel, listen: true })\n    }\n\n    public disable() {\n        ipcRenderer.send(this.manager, { channel: this.channel, listen: false })\n    }\n}\n\nexport class ApiListener extends GenericApi {\n\n    public on(listener: IpcRendererEventListener) {\n        ipcRenderer.on(this.channel, listener);\n    }\n\n    public once(listener: IpcRendererEventListener) {\n        ipcRenderer.once(this.channel, listener);\n    }\n\n    public removeListener(listener: IpcRendererEventListener) {\n        ipcRenderer.removeListener(this.channel, listener);\n    }\n\n    public removeAllListeners() {\n        ipcRenderer.removeAllListeners(this.channel);\n    }\n\n    get listenerCount() {\n        return ipcRenderer.listenerCount(this.channel);\n    }\n}\n"]}