{"version":3,"file":"genesis.js","sourceRoot":"","sources":["genesis.ts"],"names":[],"mappings":";AAAA,2BAAoB,UAAU,CAAC,CAAA;AAC/B,qBAAoC,IAAI,CAAC,CAAA;AACzC,uBAAqB,MAAM,CAAC,CAAA;AAC5B,MAAM,gBAAgB,GAAG;IACrB,MAAM,OAAO,GAAG;QACZ,OAAO,EAAE,EAAE;QACX,QAAQ,EAAE;YACN,gBAAgB,EAAE,EAAE;SACvB;QACD,UAAU,EAAE,4CAA4C;QACxD,YAAY,EAAE,SAAS;QACvB,WAAW,EAAE,EAAE;QACf,UAAU,EAAE,UAAU;QACtB,OAAO,EAAE,oBAAoB;QAC7B,SAAS,EAAE,oEAAoE;QAC/E,YAAY,EAAE,oEAAoE;QAClF,WAAW,EAAE,MAAM;KACtB,CAAC;IACF,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3D,kBAAa,CAAC,cAAc,EAAE,EAAE,aAAa,CAAC,CAAC;AACnD,CAAC,CAAC;AAEF;IACI,MAAM,CAAC,WAAI,CAAC,cAAG,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,cAAc,CAAC,CAAA;AACxD,CAAC;AAFe,sBAAc,iBAE7B,CAAA;AAED,yBAAgC,EAAE;IAC9B,SAAI,CAAC,cAAc,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE;QAChC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACxB,gBAAgB,EAAE,CAAC;YACvB,CAAC;YACD,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC;QACD,MAAM,CAAC,EAAE,EAAE,CAAC;IAChB,CAAC,CAAC,CAAC;AACP,CAAC;AAVe,uBAAe,kBAU9B,CAAA","sourcesContent":["import { app } from 'electron';\nimport { writeFileSync, open } from 'fs';\nimport { join } from 'path';\nconst writeGenesisFile = () => {\n    const genesis = {\n        \"alloc\": {},\n        \"config\": {\n            \"homesteadBlock\": 10\n        },\n        \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n        \"difficulty\": \"0x20000\",\n        \"extraData\": \"\",\n        \"gasLimit\": \"0x493e00\",\n        \"nonce\": \"0x0000000193221442\",\n        \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"timestamp\": \"0x00\"\n    };\n    const genesisBuffer = Buffer.from(JSON.stringify(genesis));\n    writeFileSync(getGenesisPath(), genesisBuffer);\n};\n\nexport function getGenesisPath() {\n    return join(app.getPath('userData'), 'genesis.json')\n}\n\nexport function checkForGenesis(cb) {\n    open(getGenesisPath(), 'r', (err, fd) => {\n        if (err) {\n            if (err.code === \"ENOENT\") {\n                writeGenesisFile();\n            }\n            return cb(err);\n        }\n        return cb();\n    });\n}\n"]}