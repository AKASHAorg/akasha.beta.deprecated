{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA,0BAAoB,WAAW,CAAC,CAAA;AAChC,0BAAoB,WAAW,CAAC,CAAA;AAChC,0BAAoB,WAAW,CAAC,CAAA;AAChC,yBAAmB,UAAU,CAAC,CAAA;AAC9B,wBAAkB,SAAS,CAAC,CAAA;AAC5B,8BAAwB,eAAe,CAAC,CAAA;AACxC,6BAAuB,cAAc,CAAC,CAAA;AACtC,0BAAoB,WAAW,CAAC,CAAA;AAChC,2BAAqB,YAAY,CAAC,CAAA;AAClC,8BAAwB,eAAe,CAAC,CAAA;AACxC,8BAAwB,eAAe,CAAC,CAAA;AAGxC;IACI,MAAM,MAAM,GAAG,gBAAM,CAAC,WAAW,EAAE,CAAC;IACpC,MAAM,WAAW,GAAU;QACvB,IAAI,iBAAO,EAAE;QACb,IAAI,iBAAO,EAAE;QACb,IAAI,iBAAO,EAAE;QACb,IAAI,eAAK,EAAE;QACX,IAAI,qBAAW,EAAE;QACjB,IAAI,oBAAU,EAAE;QAChB,IAAI,iBAAO,EAAE;QACb,IAAI,kBAAQ,EAAE;QACd,IAAI,qBAAW,EAAE;QACjB,IAAI,qBAAW,EAAE;KACpB,CAAC;IACF,MAAM,CAAC;QACH,aAAa,EAAE,CAAC,WAAwB;YACpC,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;YACxD,WAAW,CAAC,OAAO,CAAC,CAAC,GAAQ;gBACzB,GAAG,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;QACP,CAAC;QACD,MAAM;QACN,QAAQ,EAAE;YACN,WAAW,CAAC,OAAO,CAAC,CAAC,GAAQ;gBACzB,GAAG,CAAC,iBAAiB,EAAE,CAAC;YAC5B,CAAC,CAAC,CAAC;QACP,CAAC;KACJ,CAAC;AACN,CAAC;AA5Be,mBAAW,cA4B1B,CAAA","sourcesContent":["import GethIPC from './GethIPC';\nimport IpfsIPC from './IpfsIPC';\nimport AuthIPC from './AuthIPC';\nimport Logger from './Logger';\nimport TxIPC from './TxIPC';\nimport RegistryIPC from './RegistryIPC';\nimport ProfileIPC from './ProfileIPC';\nimport TagsIPC from './TagsIPC';\nimport EntryIPC from './EntryIPC';\nimport CommentsIPC from './CommentsIPC';\nimport LicensesIPC from './LicensesIPC';\nimport WebContents = Electron.WebContents;\n\nexport function initModules() {\n    const logger = Logger.getInstance();\n    const ipcChannels: any[] = [\n        new GethIPC(),\n        new IpfsIPC(),\n        new AuthIPC(),\n        new TxIPC(),\n        new RegistryIPC(),\n        new ProfileIPC(),\n        new TagsIPC(),\n        new EntryIPC(),\n        new CommentsIPC(),\n        new LicensesIPC()\n    ];\n    return {\n        initListeners: (webContents: WebContents) => {\n            logger.registerLogger('akasha', { maxsize: 50 * 1024 });\n            ipcChannels.forEach((obj: any) => {\n                obj.initListeners(webContents);\n            });\n        },\n        logger,\n        flushAll: () => {\n            ipcChannels.forEach((obj: any) => {\n                obj.purgeAllListeners();\n            });\n        }\n    };\n}\n\n"]}