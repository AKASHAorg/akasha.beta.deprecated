{"version":3,"file":"IpfsIPC.js","sourceRoot":"","sources":["IpfsIPC.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\nimport IpfsEmitter from './event/IpfsEmitter';\nimport { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport AppLogger from './Logger';\nimport channels from '../channels';\nimport { ipfsResponse } from './event/responses';\nimport { generalSettings, BASE_URL } from './config/settings';\nimport WebContents = Electron.WebContents;\nimport IpcMainEvent = Electron.IpcMainEvent;\n\nclass IpfsIPC extends IpfsEmitter {\n    public logger = 'ipfs';\n    private DEFAULT_MANAGED: string[] = ['startService', 'stopService', 'status', 'resolve'];\n\n    constructor() {\n        super();\n        this.attachEmitters();\n    }\n\n    public initListeners(webContents: WebContents) {\n        IpfsConnector.getInstance().setLogger(\n            AppLogger.getInstance().registerLogger(this.logger)\n        );\n        this.webContents = webContents;\n        this._start()\n            ._stop()\n            ._status()\n            ._resolve()\n            ._getConfig()\n            ._setPorts()\n            ._getPorts()\n            ._manager();\n    }\n\n    /**\n     *\n     * @returns {IpfsIPC}\n     * @private\n     */\n    private _start() {\n        this.registerListener(\n            channels.server.ipfs.startService,\n            (event: IpcMainEvent, data: IpfsStartRequest) => {\n                if (data.storagePath) {\n                    IpfsConnector.getInstance().setIpfsFolder(data.storagePath);\n                }\n                IpfsConnector.getInstance().start();\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {IpfsIPC}\n     * @private\n     */\n    private _stop() {\n        this.registerListener(\n            channels.server.ipfs.stopService,\n            (event: IpcMainEvent, data: IpfsStopRequest) => {\n                const signal = (data)? data.signal: 'SIGINT';\n                IpfsConnector.getInstance().stop(signal);\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @private\n     */\n    private _manager() {\n        this.registerListener(\n            channels.server.ipfs.manager,\n            /**\n             * @param event\n             * @param data\n             * @returns {any}\n             */\n            (event: any, data: IPCmanager) => {\n                // listen on new channel\n                if (data.listen) {\n                    // check if already listening on channel\n                    if (this.getListenersCount(data.channel) >= 1) {\n                        // emit error\n                        return this.fireEvent(\n                            channels.client.ipfs.manager,\n                            ipfsResponse({}, { message: `already listening on ${data.channel}` }),\n                            event\n                        );\n                    }\n                    // start listening for events on channel\n                    this.listenEvents(data.channel);\n                    // emit ok response\n                    return this.fireEvent(channels.client.ipfs.manager, ipfsResponse(data), event);\n                }\n                // remove listener on `channel`\n                return this.purgeListener(data.channel);\n            }\n        );\n        // start listening immediately on `manager` channel\n        this.listenEvents(channels.server.ipfs.manager);\n        this.DEFAULT_MANAGED.forEach(\n            (action: string) =>\n                this.listenEvents(channels.server.ipfs[action])\n        );\n    }\n\n    /**\n     * ipfs service status\n     * @private\n     */\n    private _status() {\n        this.registerListener(\n            channels.server.ipfs.status,\n            (event: any) => {\n                this.fireEvent(\n                    channels.client.ipfs.status,\n                    ipfsResponse({}),\n                    event\n                );\n            }\n        );\n        return this;\n    }\n\n    /**\n     * Fetch data from ipfs hashes or links\n     * ex: QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG or\n     * QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/someField\n     * @private\n     */\n    private _resolve() {\n        this.registerListener(\n            channels.server.ipfs.resolve,\n            (event: any, data: IpfsResolveRequest) => {\n                let response: IpfsResolveResponse;\n                IpfsConnector.getInstance()\n                    .api\n                    .resolve(data.hash)\n                    .then((source: any) => {\n                        response = ipfsResponse({ content: source, hash: data.hash });\n                    })\n                    .catch((error: Error) => {\n                        console.log(error);\n                        response = ipfsResponse({ hash: data.hash }, { message: error.message });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client.ipfs.resolve,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getConfig() {\n        this.registerListener(\n            channels.server.ipfs.getConfig,\n            (event: any) => {\n                let response: IpfsgetConfigResponse;\n                response = ipfsResponse({\n                    apiPort: IpfsConnector.getInstance().options.apiAddress.split('/').pop(),\n                    storagePath: IpfsConnector.getInstance().options.extra.env.IPFS_PATH\n                });\n                this.fireEvent(\n                    channels.client.ipfs.getConfig,\n                    response,\n                    event\n                );\n            }\n        );\n        return this;\n    }\n\n    private _setPorts() {\n        this.registerListener(\n            channels.server.ipfs.setPorts,\n            (event: any, data: IpfsSetConfigRequest) => {\n                let response: IpfsSetConfigResponse;\n                IpfsConnector.getInstance()\n                    .setPorts(data.ports, data.restart)\n                    .then(() => {\n                        response = ipfsResponse({ set: true });\n                    })\n                    .catch((err: Error) => {\n                        response = ipfsResponse({}, {\n                            message: err.message,\n                            from: { ports: data.ports }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client.ipfs.setPorts,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getPorts() {\n        this.registerListener(\n            channels.server.ipfs.getPorts,\n            (event: any) => {\n                let response: IpfsGetPortsResponse;\n                IpfsConnector.getInstance()\n                    .getPorts()\n                    .then((ports) => {\n                        generalSettings.set(BASE_URL, `http://127.0.0.1:${ports.gateway}/ipfs`);\n                        response = ipfsResponse({\n                            apiPort: ports.api,\n                            gatewayPort: ports.gateway,\n                            swarmPort: ports.swarm\n                        });\n                    })\n                    .catch((err: Error) => {\n                        response = ipfsResponse({}, { message: err.message });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client.ipfs.getPorts,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n}\n\nexport default IpfsIPC;\n"]}