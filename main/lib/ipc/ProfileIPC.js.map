{"version":3,"file":"ProfileIPC.js","sourceRoot":"","sources":["ProfileIPC.ts"],"names":[],"mappings":";AAAA,iCAA8B,+BAA+B,CAAC,CAAA;AAC9D,wBAAqC,sBAAsB,CAAC,CAAA;AAC5D,wBAAwC,yBAAyB,CAAC,CAAA;AAClE,gCAA0B,uBAAuB,CAAC,CAAA;AAClD,wBAAyC,mBAAmB,CAAC,CAAA;AAC7D,2BAAqB,aAAa,CAAC,CAAA;AACnC,4BAA6B,mBAAmB,CAAC,CAAA;AAGjD,yBAAyB,uBAAa;IAElC;QACI,OAAO,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,CAAC,gBAAgB,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IACzE,CAAC;IAEM,aAAa,CAAC,WAAwB;QACzC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,aAAa,EAAE;aACf,eAAe,EAAE;aACjB,QAAQ,EAAE;aACV,WAAW,EAAE;aACb,OAAO,EAAE;aACT,aAAa,EAAE;aACf,kBAAkB,EAAE;aACpB,aAAa,EAAE;aACf,kBAAkB,EAAE;aACpB,QAAQ,EAAE,CAAC;IACpB,CAAC;IAEO,eAAe;QACnB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,cAAc,EAChD,CAAC,KAAU,EAAE,IAAwB;YACjC,IAAI,QAA6B,CAAC;YAClC,mBAAS;iBACJ,QAAQ;iBACR,OAAO;iBACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;iBACrB,IAAI,CAAC,CAAC,IAAY;gBACf,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACZ,MAAM,CAAC,cAAa,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBACtD,CAAC;gBACD,MAAM,CAAC,cAAa,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACvD,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,IAA8B;gBACjC,QAAQ,GAAG,wBAAY,CAAC,IAAI,CAAC,CAAC;YAClC,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAU;gBACd,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACD,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,cAAc,EAChD,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,aAAa;QACjB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,YAAY,EAC9C,CAAC,KAAU,EAAE,IAAsB;YAC/B,IAAI,QAA2B,CAAC;YAChC,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,8BAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;YAC1G,MAAM,CAAC,8BAAa,CAAC,WAAW,EAAE;iBAC7B,IAAI;iBACJ,GAAG;iBACH,eAAe,CAAC,SAAS,CAAC;iBAC1B,IAAI,CAAC,CAAC,SAAiB;gBACpB,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;gBAC/C,MAAM,KAAK,GAAG,8BAAa,CAAC,WAAW,EAAE;qBACpC,IAAI;qBACJ,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACb,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;gBACrD,CAAC;gBACD,QAAQ,GAAG,wBAAY,CAAC,KAAK,CAAC,CAAC;YACnC,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAU;gBACd,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACD,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,YAAY,EAC9C,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,QAAQ;QACZ,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EACzC,CAAC,KAAU,EAAE,IAAqB;YAC9B,IAAI,QAA0B,CAAC;YAC/B,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,cAAa,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAC3E,cAAa,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,KAAK,CAAC,IAAI,CAAC,CAAC,QAAa;gBACrB,QAAQ,GAAG,wBAAY,CAAC,QAAQ,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;gBAChB,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACG,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EACzC,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CACL;QACL,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,WAAW;QACf,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,EAC5C,CAAC,KAAU,EAAE,IAA8B;YACvC,IAAI,QAAa,CAAC;YAClB,mBAAS;iBACJ,QAAQ;iBACR,OAAO;iBACP,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC;iBAC/B,IAAI,CAAC,CAAC,MAAM;gBACT,MAAM,CAAC,cAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACxD,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,EAAU;gBACb,QAAQ,GAAG,wBAAY,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YACpC,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAU;gBACd,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACD,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,EAC5C,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,OAAO;QACX,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,EACxC,CAAC,KAAU,EAAE,IAA0B;YACnC,IAAI,QAA+B,CAAC;YACpC,mBAAS,CAAC,QAAQ;iBACb,IAAI;iBACJ,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;iBAC3B,IAAI,CAAC,CAAC,MAAM;gBACT,MAAM,CAAC,cAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACxD,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,EAAU;gBACb,QAAQ,GAAG,wBAAY,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YACpC,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAU;gBACd,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACD,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,EACxC,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,kBAAkB;QACtB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,iBAAiB,EACnD,CAAC,KAAU,EAAE,IAA6B;YACtC,IAAI,QAAQ,CAAC;YACb,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC;iBACzD,IAAI,CAAC,CAAC,KAAU;gBACjB,QAAQ,GAAG,wBAAY,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;gBAChB,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACG,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,iBAAiB,EACnD,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CACL;QACL,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,kBAAkB;QACtB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,iBAAiB,EACnD,CAAC,KAAU,EAAE,IAA6B;YACtC,IAAI,QAAQ,CAAC;YACb,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC;iBACzD,IAAI,CAAC,CAAC,KAAU;gBACb,QAAQ,GAAG,wBAAY,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;gBACpB,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACG,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,iBAAiB,EACnD,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CACL;QACL,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,aAAa;QACjB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,YAAY,EAC9C,CAAC,KAAU,EAAE,IAA6B;YACtC,IAAI,QAAQ,CAAC;YACb,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC;iBACzD,IAAI,CAAC,CAAC,KAAU;gBACb,QAAQ,GAAG,wBAAY,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;gBACpB,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACG,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,YAAY,EAC9C,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CACL;QACL,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,aAAa;QACjB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,YAAY,EAC9C,CAAC,KAAU,EAAE,IAA6B;YACtC,IAAI,QAAQ,CAAC;YACb,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC;iBACzD,IAAI,CAAC,CAAC,KAAU;gBACb,QAAQ,GAAG,wBAAY,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU;gBACpB,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC;iBACG,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,YAAY,EAC9C,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CACL;QACL,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AAED;kBAAe,UAAU,CAAC","sourcesContent":["import { GethConnector } from '@akashaproject/geth-connector';\nimport { module as userModule } from './modules/auth/index';\nimport { module as profileModule } from './modules/profile/index';\nimport ModuleEmitter from './event/ModuleEmitter';\nimport { constructed as contracts } from './contracts/index';\nimport channels from '../channels';\nimport { mainResponse } from './event/responses';\nimport WebContents = Electron.WebContents;\n\nclass ProfileIPC extends ModuleEmitter {\n\n    constructor() {\n        super();\n        this.MODULE_NAME = 'profile';\n        this.DEFAULT_MANAGED = ['getProfileData', 'getMyBalance', 'getIpfs'];\n    }\n\n    public initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n        this._getMyBalance()\n            ._getProfileData()\n            ._getIpfs()\n            ._unregister()\n            ._follow()\n            ._getFollowers()\n            ._getFollowersCount()\n            ._getFollowing()\n            ._getFollowingCount()\n            ._manager();\n    }\n\n    private _getProfileData() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getProfileData,\n            (event: any, data: ProfileDataRequest) => {\n                let response: ProfileDataResponse;\n                contracts\n                    .instance\n                    .profile\n                    .getIpfs(data.profile)\n                    .then((resp: string) => {\n                        if (data.full) {\n                            return profileModule.helpers.resolveProfile(resp);\n                        }\n                        return profileModule.helpers.getShortProfile(resp);\n                    })\n                    .then((resp: IpfsProfileCreateRequest) => {\n                        response = mainResponse(resp);\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({ error: { message: err.message } });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getProfileData,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getMyBalance() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getMyBalance,\n            (event: any, data: MyBalanceRequest) => {\n                let response: MyBalanceResponse;\n                const etherBase = (data.etherBase) ? data.etherBase : GethConnector.getInstance().web3.eth.defaultAccount;\n                return GethConnector.getInstance()\n                    .web3\n                    .eth\n                    .getBalanceAsync(etherBase)\n                    .then((weiAmount: string) => {\n                        const unit = (data.unit) ? data.unit : 'ether';\n                        const value = GethConnector.getInstance()\n                            .web3\n                            .fromWei(weiAmount, unit);\n                        if (!etherBase) {\n                            throw new Error('No ethereum address specified');\n                        }\n                        response = mainResponse(value);\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({ error: { message: err.message } });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getMyBalance,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getIpfs() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getIpfs,\n            (event: any, data: IpfsDataRequest) => {\n                let response: IpfsDataResponse;\n                const chain = (data.full) ? profileModule.helpers.resolveProfile(data.ipfsHash) :\n                    profileModule.helpers.getShortProfile(data.ipfsHash);\n                chain.then((resolved: any) => {\n                    response = mainResponse(resolved);\n                }).catch((err: Error) => {\n                    response = mainResponse({ error: { message: err.message } });\n                })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getIpfs,\n                            response,\n                            event\n                        );\n                    })\n                ;\n            }\n        );\n        return this;\n    }\n\n    private _unregister() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].unregister,\n            (event: any, data: ProfileUnregisterRequest) => {\n                let response: any;\n                contracts\n                    .instance\n                    .profile\n                    .unregister(data.profileAddress)\n                    .then((txData) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({ error: { message: err.message } });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].unregister,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _follow() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].follow,\n            (event: any, data: ProfileFollowRequest) => {\n                let response: ProfileFollowResponse;\n                contracts.instance\n                    .main\n                    .follow(data.profileAddress)\n                    .then((txData) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({ error: { message: err.message } });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].follow,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getFollowersCount() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getFollowersCount,\n            (event: any, data: GetFollowerCountRequest) => {\n                let response;\n                contracts.instance.main.getFollowersCount(data.profileAddress)\n                    .then((count: any) => {\n                    response = mainResponse({count});\n                }).catch((err: Error) => {\n                    response = mainResponse({ error: { message: err.message } });\n                })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getFollowersCount,\n                            response,\n                            event\n                        );\n                    })\n                ;\n            }\n        );\n        return this;\n    }\n\n    private _getFollowingCount() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getFollowingCount,\n            (event: any, data: GetFollowerCountRequest) => {\n                let response;\n                contracts.instance.main.getFollowingCount(data.profileAddress)\n                    .then((count: any) => {\n                        response = mainResponse({count});\n                    }).catch((err: Error) => {\n                    response = mainResponse({ error: { message: err.message } });\n                })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getFollowingCount,\n                            response,\n                            event\n                        );\n                    })\n                ;\n            }\n        );\n        return this;\n    }\n\n    private _getFollowers() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getFollowers,\n            (event: any, data: GetFollowerCountRequest) => {\n                let response;\n                contracts.instance.main.getFollowersCount(data.profileAddress)\n                    .then((count: any) => {\n                        response = mainResponse({count});\n                    }).catch((err: Error) => {\n                    response = mainResponse({ error: { message: err.message } });\n                })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getFollowers,\n                            response,\n                            event\n                        );\n                    })\n                ;\n            }\n        );\n        return this;\n    }\n\n    private _getFollowing() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getFollowers,\n            (event: any, data: GetFollowerCountRequest) => {\n                let response;\n                contracts.instance.main.getFollowingCount(data.profileAddress)\n                    .then((count: any) => {\n                        response = mainResponse({count});\n                    }).catch((err: Error) => {\n                    response = mainResponse({ error: { message: err.message } });\n                })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getFollowing,\n                            response,\n                            event\n                        );\n                    })\n                ;\n            }\n        );\n        return this;\n    }\n}\n\nexport default ProfileIPC;\n"]}