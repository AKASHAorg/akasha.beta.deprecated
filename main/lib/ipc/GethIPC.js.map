{"version":3,"file":"GethIPC.js","sourceRoot":"","sources":["GethIPC.ts"],"names":[],"mappings":";AAAA,iCAA8B,+BAA+B,CAAC,CAAA;AAC9D,kCAAgC,yBAAyB,CAAC,CAAA;AAE1D,2BAAqB,aAAa,CAAC,CAAA;AAGnC,sBAAsB,iCAAe;IACjC,aAAa;QAET,IAAI,CAAC,MAAM,EAAE;aACR,QAAQ,EAAE;aACV,KAAK,EAAE,CAAC;IACjB,CAAC;IAED,cAAc;IAEd,CAAC;IAEO,MAAM;QACV,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EACjC,CAAC,KAAmB,EAAE,IAAe;YACjC,8BAAa,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,QAAQ;QACZ,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EACnC,CAAC,KAAmB,EAAE,IAAiB;YACnC,8BAAa,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,KAAK;QACT,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAChC,CAAC,KAAmB,EAAE,IAAc;YAChC,8BAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AACD;kBAAe,OAAO,CAAC","sourcesContent":["import { GethConnector } from '@akashaproject/geth-connector';\nimport { AbstractEmitter } from './event/AbstractEmitter';\nimport { GethStart, GethRestart, GethStop } from '../dataTypes';\nimport channels from '../channels';\nimport IpcMainEvent = Electron.IpcMainEvent;\n\nclass GethIPC extends AbstractEmitter {\n    initListeners() {\n        // register listeners\n        this._start()\n            ._restart()\n            ._stop();\n    }\n    // @Todo:\n    attachEmitters() {\n\n    }\n\n    private _start() {\n        this.registerListener(\n            channels.server.geth.startService,\n            (event: IpcMainEvent, data: GethStart) => {\n                GethConnector.getInstance().start(data);\n            }\n        );\n        return this;\n    }\n\n    private _restart() {\n        this.registerListener(\n            channels.server.geth.restartService,\n            (event: IpcMainEvent, data: GethRestart) => {\n                GethConnector.getInstance().restart(data.timer);\n            }\n        );\n        return this;\n    }\n\n    private _stop() {\n        this.registerListener(\n            channels.server.geth.stopService,\n            (event: IpcMainEvent, data: GethStop) => {\n                GethConnector.getInstance().stop(data.signal);\n            }\n        );\n        return this;\n    }\n}\nexport default GethIPC;\n"]}