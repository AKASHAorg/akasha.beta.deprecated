{"version":3,"file":"GethIPC.js","sourceRoot":"","sources":["GethIPC.ts"],"names":[],"mappings":";AACA,iCAA0C,+BAA+B,CAAC,CAAA;AAC1E,8BAAwB,qBAAqB,CAAC,CAAA;AAC9C,2BAAqB,aAAa,CAAC,CAAA;AACnC,yBAAmB,UAAU,CAAC,CAAA;AAC9B,4BAA6B,mBAAmB,CAAC,CAAA;AACjD,uBAAqB,MAAM,CAAC,CAAA;AAC5B,2BAAoB,UAAU,CAAC,CAAA;AAI/B,sBAAsB,qBAAW;IAM7B;QACI,OAAO,CAAC;QANL,WAAM,GAAG,MAAM,CAAC;QACf,aAAQ,GAAG,4EAA4E;YAC3F,oFAAoF,CAAC;QACjF,oBAAe,GAAa,CAAC,cAAc,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QAI1E,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAEM,aAAa,CAAC,WAAwB;QACzC,8BAAa,CAAC,WAAW,EAAE,CAAC,SAAS,CACjC,gBAAM,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CACnD,CAAC;QACF,8BAAa,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,cAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,MAAM,OAAO,GAAG,8BAAa,CAAC,iBAAiB,EAAE,CAAC;QAClD,8BAAa,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC;YACnC,SAAS,EAAE,IAAI,CAAC,QAAQ;YACxB,OAAO,EAAE,WAAI,CAAC,OAAO,EAAE,QAAQ,CAAC;YAChC,OAAO,EAAE,WAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC;YAC5C,SAAS,EAAE,MAAM;SACpB,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,EAAE;aACR,QAAQ,EAAE;aACV,KAAK,EAAE;aACP,WAAW,EAAE;aACb,KAAK,EAAE;aACP,OAAO,EAAE;aACT,QAAQ,EAAE;aACV,QAAQ,EAAE,CAAC;IACpB,CAAC;IAMO,QAAQ;QACZ,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAM5B,CAAC,KAAU,EAAE,IAAgB;YAEzB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAEd,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAE5C,MAAM,CAAC,IAAI,CAAC,SAAS,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAC5B,wBAAY,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,wBAAwB,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,EACrE,KAAK,CACR,CAAC;gBACN,CAAC;gBAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEhC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,wBAAY,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;YACnF,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC,CACJ,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChD,IAAI,CAAC,eAAe,CAAC,OAAO,CACxB,CAAC,MAAc,KACX,IAAI,CAAC,YAAY,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CACtD,CAAC;IACN,CAAC;IAOO,MAAM;QACV,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EACjC,CAAC,KAAmB,EAAE,IAAsB;YACxC,8BAAa,CAAC,WAAW,EAAE,CAAC,YAAY,CACpC,WAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,cAAc,CAAC,EACzC,CAAC,GAAU,EAAE,MAAW;gBACpB,8BAAa,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACX,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAOO,QAAQ;QACZ,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EACnC,CAAC,KAAmB,EAAE,IAAwB;YAC1C,8BAAa,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAOO,KAAK;QACT,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAChC,CAAC,KAAmB,EAAE,IAAqB;YACvC,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC/C,8BAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAOO,WAAW;QACf,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAC/B,CAAC,KAAU;YACP,MAAM,CAAC,2BAAU;iBACZ,MAAM,EAAE;iBACR,IAAI,CAAC,CAAC,KAAY;gBACX,IAAI,QAAwB,CAAC;gBAC7B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;oBAChB,QAAQ,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;gBAChC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,QAAQ,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;oBAClD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBACrB,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtC,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAC/B,wBAAY,CAAC,QAAQ,CAAC,EACtB,KAAK,CACR,CAAC;YACN,CAAC,CACJ;iBACA,KAAK,CAAC,GAAG;gBACN,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAC/B,wBAAY,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,EAC1C,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAOO,KAAK;QACT,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EACzB,CAAC,KAAU;YACP,8BAAa,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,KAAK,CACpC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EACtC,CAAC,GAAU,EAAE,IAAS;gBAClB,IAAI,QAAsB,CAAC;gBAC3B,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,QAAQ,GAAG,wBAAY,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC1D,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,QAAQ,GAAG,wBAAY,CAAC,IAAI,CAAC,CAAC;gBAClC,CAAC;gBACD,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EACzB,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CACJ,CAAC;QACN,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAMO,OAAO;QACX,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAC3B,CAAC,KAAU;YACP,EAAE,CAAC,CAAC,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAC3B,wBAAY,CAAC,EAAE,CAAC,EAChB,KAAK,CACR,CAAC;gBACF,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YACD,IAAI,QAAQ,CAAC;YACb,8BAAa,CAAC,WAAW,EAAE;iBACtB,IAAI;iBACJ,GAAG;iBACH,mBAAmB,EAAE;iBACrB,IAAI,CAAC,CAAC,OAAO;gBACV,QAAQ,GAAG,wBAAY,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG;gBACP,QAAQ,GAAG,wBAAY,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;YACzD,CAAC,CAAC;iBACD,OAAO,CAAC;gBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAC3B,QAAQ,EACR,KAAK,CACR,CAAC;YACN,CAAC,CAAC,CAAA;QACV,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAOO,QAAQ;QACZ,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAC5B,CAAC,KAAU,EAAE,IAAS;YAClB,MAAM,OAAO,GAAG,8BAAa,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACjC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAClB,CAAC;YACD,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAC5B,wBAAY,CAAC,MAAM,CAAC,EACpB,KAAK,CACR,CAAC;QACN,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AACD;kBAAe,OAAO,CAAC","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\nimport { GethConnector, gethHelper } from '@akashaproject/geth-connector';\nimport GethEmitter from './event/GethEmitter';\nimport channels from '../channels';\nimport Logger from './Logger';\nimport { gethResponse } from './event/responses';\nimport { join } from 'path';\nimport { app } from 'electron';\nimport IpcMainEvent = Electron.IpcMainEvent;\nimport WebContents = Electron.WebContents;\n\nclass GethIPC extends GethEmitter {\n    public logger = 'geth';\n    private BOOTNODE = 'enode://a7b111165e63cb608814f0ba55c0e7f779841473320ac6dbe6089d952241fb5a5a' +\n        '9bcc9406215e366ab5438d6ab11129c3247ed8354dc6e00ed9ce9305493667@138.68.78.152:30301';\n    private DEFAULT_MANAGED: string[] = ['startService', 'stopService', 'status'];\n\n    constructor() {\n        super();\n        this.attachEmitters();\n    }\n\n    public initListeners(webContents: WebContents) {\n        GethConnector.getInstance().setLogger(\n            Logger.getInstance().registerLogger(this.logger)\n        );\n        GethConnector.getInstance().setBinPath(app.getPath('userData'));\n        this.webContents = webContents;\n        const datadir = GethConnector.getDefaultDatadir();\n        GethConnector.getInstance().setOptions({\n            bootnodes: this.BOOTNODE,\n            datadir: join(datadir, 'akasha'),\n            ipcpath: join(datadir, 'akasha', 'geth.ipc'),\n            networkid: 512180\n        });\n        // register listeners\n        this._start()\n            ._restart()\n            ._stop()\n            ._syncStatus()\n            ._logs()\n            ._status()\n            ._options()\n            ._manager();\n    }\n\n    /**\n     * Module ipc channel manager\n     * @private\n     */\n    private _manager() {\n        this.registerListener(\n            channels.server.geth.manager,\n            /**\n             * @param event\n             * @param data\n             * @returns {any}\n             */\n            (event: any, data: IPCmanager) => {\n                // listen on new channel\n                if (data.listen) {\n                    // check if already listening on channel\n                    if (this.getListenersCount(data.channel) >= 1) {\n                        // emit error\n                        return this.fireEvent(\n                            channels.client.geth.manager,\n                            gethResponse({}, { message: `already listening on ${data.channel}` }),\n                            event\n                        );\n                    }\n                    // start listening for events on channel\n                    this.listenEvents(data.channel);\n                    // emit ok response\n                    return this.fireEvent(channels.client.geth.manager, gethResponse(data), event);\n                }\n                // remove listener on `channel`\n                return this.purgeListener(data.channel);\n            }\n        );\n        // start listening immediately on `manager` channel\n        this.listenEvents(channels.server.geth.manager);\n        this.DEFAULT_MANAGED.forEach(\n            (action: string) =>\n                this.listenEvents(channels.server.geth[action])\n        );\n    }\n\n    /**\n     *\n     * @returns {GethIPC}\n     * @private\n     */\n    private _start() {\n        this.registerListener(\n            channels.server.geth.startService,\n            (event: IpcMainEvent, data: GethStartRequest) => {\n                GethConnector.getInstance().writeGenesis(\n                    join(__dirname, 'config', 'genesis.json'),\n                    (err: Error, stdout: any) => {\n                        GethConnector.getInstance().start(data);\n                    });\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {GethIPC}\n     * @private\n     */\n    private _restart() {\n        this.registerListener(\n            channels.server.geth.restartService,\n            (event: IpcMainEvent, data: GethRestartRequest) => {\n                GethConnector.getInstance().restart(data.timer);\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {GethIPC}\n     * @private\n     */\n    private _stop() {\n        this.registerListener(\n            channels.server.geth.stopService,\n            (event: IpcMainEvent, data: GethStopRequest) => {\n                const signal = (data) ? data.signal : 'SIGINT';\n                GethConnector.getInstance().stop(signal);\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {GethIPC}\n     * @private\n     */\n    private _syncStatus() {\n        this.registerListener(\n            channels.server.geth.syncStatus,\n            (event: any) => {\n                return gethHelper\n                    .inSync()\n                    .then((state: any[]) => {\n                            let response: GethSyncStatus;\n                            if (!state.length) {\n                                response = { synced: true };\n                            } else {\n                                response = { synced: false, peerCount: state[0] };\n                                if (state.length === 2) {\n                                    Object.assign(response, state[1]);\n                                }\n                            }\n                            this.fireEvent(\n                                channels.client.geth.syncStatus,\n                                gethResponse(response),\n                                event\n                            );\n                        }\n                    )\n                    .catch(err => {\n                        this.fireEvent(\n                            channels.client.geth.syncStatus,\n                            gethResponse({}, { message: err.message }),\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {GethIPC}\n     * @private\n     */\n    private _logs() {\n        this.registerListener(\n            channels.server.geth.logs,\n            (event: any) => {\n                GethConnector.getInstance().logger.query(\n                    { start: 0, limit: 20, order: 'desc' },\n                    (err: Error, info: any) => {\n                        let response: MainResponse;\n                        if (err) {\n                            response = gethResponse({}, { message: err.message });\n                        } else {\n                            response = gethResponse(info);\n                        }\n                        this.fireEvent(\n                            channels.client.geth.logs,\n                            response,\n                            event\n                        );\n                    }\n                );\n            });\n        return this;\n    }\n\n    /**\n     * geth service status\n     * @private\n     */\n    private _status() {\n        this.registerListener(\n            channels.server.geth.status,\n            (event: any) => {\n                if (!GethConnector.getInstance().serviceStatus.api) {\n                    this.fireEvent(\n                        channels.client.geth.status,\n                        gethResponse({}),\n                        event\n                    );\n                    return null;\n                }\n                let response;\n                GethConnector.getInstance()\n                    .web3\n                    .eth\n                    .getBlockNumberAsync()\n                    .then((blockNr) => {\n                        response = gethResponse({ blockNr });\n                    })\n                    .catch((err) => {\n                        response = gethResponse({}, { message: err.message })\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client.geth.status,\n                            response,\n                            event\n                        );\n                    })\n            }\n        );\n        return this;\n    }\n\n    /**\n     * Get or set geth spawn options\n     * @returns {GethIPC}\n     * @private\n     */\n    private _options() {\n        this.registerListener(\n            channels.server.geth.options,\n            (event: any, data: any) => {\n                const options = GethConnector.getInstance().setOptions(data);\n                let mapObj = Object.create(null);\n                for (let [k, v] of options) {\n                    mapObj[k] = v;\n                }\n                this.fireEvent(\n                    channels.client.geth.options,\n                    gethResponse(mapObj),\n                    event\n                );\n            }\n        );\n        return this;\n    }\n}\nexport default GethIPC;\n"]}