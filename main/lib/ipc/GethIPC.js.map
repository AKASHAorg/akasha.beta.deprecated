{"version":3,"file":"GethIPC.js","sourceRoot":"","sources":["GethIPC.ts"],"names":[],"mappings":";AACA,iCAAyC,+BAA+B,CAAC,CAAA;AACzE,8BAAwB,qBAAqB,CAAC,CAAA;AAC9C,2BAAqB,aAAa,CAAC,CAAA;AACnC,yBAAmB,UAAU,CAAC,CAAA;AAK9B,sBAAsB,qBAAW;IAG7B;QACI,OAAO,CAAC;QAHL,WAAM,GAAG,SAAS,CAAC;QAItB,8BAAa,CAAC,WAAW,EAAE,CAAC,SAAS,CACjC,gBAAM,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CACnD,CAAC;QACF,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAC5B,CAAC,KAAU,EAAE,IAAgB;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACd,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAChC,IAAI,CAAC,SAAS,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,EAAE,KAAK,CAAE,CAAC;YACvE,CAAC;YACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,CACJ,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,aAAa;QAET,IAAI,CAAC,MAAM,EAAE;aACR,QAAQ,EAAE;aACV,KAAK,EAAE,CAAC;IACjB,CAAC;IAOO,MAAM;QACV,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EACjC,CAAC,KAAmB,EAAE,IAAe;YACjC,8BAAa,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAOO,QAAQ;QACZ,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EACnC,CAAC,KAAmB,EAAE,IAAiB;YACnC,8BAAa,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAOO,KAAK;QACT,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAChC,CAAC,KAAmB,EAAE,IAAc;YAChC,8BAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC,CACJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AAEL,CAAC;AACD;kBAAe,OAAO,CAAC","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\nimport { GethConnector, CONSTANTS } from '@akashaproject/geth-connector';\nimport GethEmitter from './event/GethEmitter';\nimport channels from '../channels';\nimport Logger from './Logger';\nimport IpcMainEvent = Electron.IpcMainEvent;\nimport IpcRenderer = Electron.IpcRenderer;\nimport IpcRendererEvent = Electron.IpcRendererEvent;\n\nclass GethIPC extends GethEmitter {\n    public logger = 'gethLog';\n\n    constructor() {\n        super();\n        GethConnector.getInstance().setLogger(\n            Logger.getInstance().registerLogger(this.logger)\n        );\n        this.attachEmitters();\n        this.registerListener(\n            channels.server.geth.manager,\n            (event: any, data: IPCmanager) => {\n                if (data.listen) {\n                    this.listenEvents(data.channel);\n                    this.fireEvent(channels.client.geth.manager, {data: data}, event );\n                }\n                this.purgeListener(data.channel);\n            }\n        );\n        this.listenEvents(channels.server.geth.manager);\n    }\n\n    initListeners() {\n        // register listeners\n        this._start()\n            ._restart()\n            ._stop();\n    }\n\n    /**\n     *\n     * @returns {GethIPC}\n     * @private\n     */\n    private _start() {\n        this.registerListener(\n            channels.server.geth.startService,\n            (event: IpcMainEvent, data: GethStart) => {\n                GethConnector.getInstance().start(data);\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {GethIPC}\n     * @private\n     */\n    private _restart() {\n        this.registerListener(\n            channels.server.geth.restartService,\n            (event: IpcMainEvent, data: GethRestart) => {\n                GethConnector.getInstance().restart(data.timer);\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {GethIPC}\n     * @private\n     */\n    private _stop() {\n        this.registerListener(\n            channels.server.geth.stopService,\n            (event: IpcMainEvent, data: GethStop) => {\n                GethConnector.getInstance().stop(data.signal);\n            }\n        );\n        return this;\n    }\n\n}\nexport default GethIPC;\n"]}