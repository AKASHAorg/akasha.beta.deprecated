{"version":3,"file":"Registry.js","sourceRoot":"","sources":["Registry.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\nimport { unpad } from 'ethereumjs-util';\n\nexport default class Registry extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = Promise.promisifyAll(instance);\n        this.contract.addressOf.callAsync = Promise.promisify(this.contract.addressOf.call);\n        this.contract.addressOfKey.callAsync = Promise.promisify(this.contract.addressOfKey.call);\n        this.contract.isRegistered.callAsync = Promise.promisify(this.contract.isRegistered.call);\n        this.contract.check_format.callAsync = Promise.promisify(this.contract.check_format.call);\n    }\n\n    /**\n     *\n     * @param id\n     * @returns {any}\n     */\n    public profileExists(id: string) {\n        return this.contract\n            .addressOf\n            .callAsync(id)\n            .then((exists) => {\n                return !!unpad(exists);\n            });\n    }\n\n    /**\n     * Find a profile by eth address\n     * @param address\n     * @returns {any}\n     */\n    public getByAddress(address: string) {\n        return this.contract\n            .addressOfKey\n            .callAsync(address)\n            .then((profileAddress) => {\n                if (!!unpad(profileAddress)) {\n                    return profileAddress;\n                }\n                return '';\n            });\n    }\n\n    public checkFormat(id: string) {\n        return this.contract\n            .check_format\n            .callAsync(id)\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    public getLocalProfiles() {\n        let keyList: string[];\n        const profileList: {key: string, profile: string}[] = [];\n        return this.gethInstance\n            .web3\n            .eth\n            .getAccountsAsync()\n            .then((list: string[]) => {\n                list.sort();\n                const checkForProfile = list.map((val: string) => {\n                    return this.getByAddress(val);\n                });\n                keyList = list;\n                return Promise.all(checkForProfile);\n            })\n            .then((addrList: string[]) => {\n                addrList.forEach((val: string, index: number) => {\n                    if (val) {\n                        profileList.push({ key: keyList[index], profile: val });\n                    }\n                });\n                keyList = null;\n                return profileList;\n            });\n    }\n\n    /**\n     *\n     * @param id\n     * @param ipfsHash\n     * @param gas\n     * @returns {PromiseLike<TResult>|Promise<TResult>|Thenable<U>|Bluebird<U>}\n     */\n    public register(id: string, ipfsHash: string, gas: number = 2000000) {\n        const idTr = this.gethInstance.web3.fromUtf8(id);\n        const ipfsHashTr = this.splitIpfs(ipfsHash);\n        return this.profileExists(idTr)\n            .then((address: string) => {\n                const exists = unpad(address);\n                if (exists) {\n                    throw new Error(`${id} already taken`);\n                }\n\n                if (ipfsHashTr.length !== 2) {\n                    throw new Error('Expected exactly 2 ipfs slices');\n                }\n                return this.contract\n                    .check_format\n                    .callAsync(id);\n            }).then((isOK) => {\n                if (!isOK) {\n                    throw new Error(`${id} has illegal characters`);\n                }\n\n                return this.evaluateData('register', gas, idTr, ipfsHashTr);\n            })\n    }\n\n    /**\n     *\n     * @param id\n     * @param gas\n     * @returns {Bluebird<U>}\n     */\n    public unregister(id: string, gas: number = 2000000) {\n        const idTr = this.gethInstance.web3.fromUtf8(id);\n        return this.evaluateData('unregister', gas, idTr);\n    }\n\n    /**\n     *\n     * @param filter\n     * @returns {Bluebird<T>|any}\n     */\n    public getRegistered(filter: {index: {}, fromBlock: string, toBlock?: string, address?: string}) {\n        const { fromBlock, toBlock, address } = filter;\n        const Registered = this.contract.Register(filter.index, { fromBlock, toBlock, address });\n        Registered.getAsync = Promise.promisify(Registered.get);\n        return Registered.getAsync();\n    }\n\n}\n"]}