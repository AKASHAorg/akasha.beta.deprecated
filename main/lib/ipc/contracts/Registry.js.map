{"version":3,"file":"Registry.js","sourceRoot":"","sources":["Registry.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,+BAAyB,gBAAgB,CAAC,CAAA;AAE1C,uBAAsC,sBAAY;IAK9C,YAAY,QAAa;QACrB,OAAO,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChF,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACxF,CAAC;IAOD,aAAa,CAAC,QAAgB;QAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,OAAO;aACP,SAAS,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IAOD,YAAY,CAAC,OAAe;QACxB,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,SAAS;aACT,SAAS,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAMD,YAAY;QACR,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,iBAAiB,EAAE,CAAC;IAC7B,CAAC;IASD,QAAQ,CAAC,QAAgB,EAAE,QAAkB,EAAE,GAAY;QACvD,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC7D,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;aAChC,IAAI,CAAC,CAAC,OAAe;YAClB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,MAAM,IAAI,KAAK,CAAC,GAAG,QAAQ,gBAAgB,CAAC,CAAC;YACjD,CAAC;YAED,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACtD,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,QAAQ;iBACf,aAAa,CAAC,UAAU,EAAE,UAAU,EAAE,EAAC,KAAA,GAAG,EAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACX,CAAC;AAEL,CAAC;AAxED;0BAwEC,CAAA","sourcesContent":["import * as Promise from 'bluebird';\nimport BaseContract from './BaseContract';\n\nexport default class Registry extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = Promise.promisifyAll(instance);\n        this.contract.getById.callAsync = Promise.promisify(this.contract.getById.call);\n        this.contract.getByAddr.callAsync = Promise.promisify(this.contract.getByAddr.call);\n    }\n\n    /**\n     *\n     * @param username\n     * @returns {any}\n     */\n    profileExists(username: string) {\n        const transformed = this.gethInstance.web3.fromUtf8(username);\n        return this.contract\n            .getById\n            .callAsync(transformed);\n    }\n\n    /**\n     * Find a profile by contract address\n     * @param address\n     * @returns {any}\n     */\n    getByAddress(address: string) {\n        return this.contract\n            .getByAddr\n            .callAsync(address);\n    }\n\n    /**\n     * Get curre\n     * @returns {any}\n     */\n    getMyProfile() {\n        return this.contract\n            .getMyProfileAsync();\n    }\n\n    /**\n     * Register a new profile\n     * @param username\n     * @param ipfsHash\n     * @param gas\n     * @returns {PromiseLike<TResult>|Bluebird<U>|Promise<TResult>|Thenable<U>}\n     */\n    register(username: string, ipfsHash: string[], gas?: number) {\n        const usernameTr = this.gethInstance.web3.fromUtf8(username);\n        const ipfsHashTr = ipfsHash.map((v) => {\n            return this.gethInstance.web3.fromUtf8(v);\n        });\n        return this.profileExists(usernameTr)\n            .then((address: string) => {\n                const exists = this.gethInstance.web3.toUtf8(address);\n\n                if (exists) {\n                    throw new Error(`${username} already taken`);\n                }\n\n                if (ipfsHashTr.length !== 2) {\n                    throw new Error('Expected exactly 2 ipfs slices');\n                }\n                return this.contract\n                    .registerAsync(usernameTr, ipfsHashTr, {gas});\n            });\n    }\n\n}\n"]}