{"version":3,"file":"Registry.js","sourceRoot":"","sources":["Registry.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { unpad } from 'ethereumjs-util';\nimport BaseContract from './BaseContract';\n\nexport default class Registry extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = Promise.promisifyAll(instance);\n        this.contract.getById.callAsync = Promise.promisify(this.contract.getById.call);\n        this.contract.getByAddr.callAsync = Promise.promisify(this.contract.getByAddr.call);\n    }\n\n    /**\n     *\n     * @param username\n     * @returns {any}\n     */\n    profileExists(username: string) {\n        return this.contract\n            .getById\n            .callAsync(username);\n    }\n\n    /**\n     * Find a profile by eth address\n     * @param address\n     * @returns {any}\n     */\n    getByAddress(address: string) {\n        return this.contract\n            .getByAddr\n            .callAsync(address);\n    }\n\n    /**\n     * Get curre\n     * @returns {any}\n     */\n    getMyProfile() {\n        return this.contract\n            .getMyProfileAsync();\n    }\n\n    /**\n     *\n     * @returns {PromiseLike<{key: string, profile: string}[]>|Thenable<{key: string, profile: string}[]>|Bluebird<{key: string, profile: string}[]>}\n     */\n    getLocalProfiles() {\n        let keyList: string[];\n        const profileList: {key: string, profile: string}[] = [];\n        return this.gethInstance\n            .web3\n            .eth\n            .getAccountsAsync()\n            .then((list: string[]) => {\n                list.sort();\n               const checkForProfile = list.map((val: string) => {\n                  return this.getByAddress(val);\n               });\n                keyList = list;\n                return Promise.all(checkForProfile);\n            })\n            .then((addrList: string[]) => {\n                addrList.forEach((val: string, index: number) => {\n                    const valTr = unpad(val);\n                    if (valTr) {\n                        profileList.push({key: keyList[index], profile: val});\n                    }\n                });\n                keyList = null;\n                return profileList;\n            });\n    }\n\n    /**\n     *\n     * @param username\n     * @param ipfsHash\n     * @param gas\n     * @returns {PromiseLike<TResult>|Promise<TResult>|Thenable<U>|Bluebird<U>}\n     */\n    register(username: string, ipfsHash: string, gas: number = 90000) {\n        const usernameTr = this.gethInstance.web3.fromUtf8(username);\n        const ipfsHashTr = [ipfsHash.slice(0, 23), ipfsHash.slice(23)].map((v) => {\n            return this.gethInstance.web3.fromUtf8(v);\n        });\n        return this.profileExists(usernameTr)\n            .then((address: string) => {\n                const exists = unpad(address);\n                if (exists) {\n                    throw new Error(`${username} already taken`);\n                }\n\n                if (ipfsHashTr.length !== 2) {\n                    throw new Error('Expected exactly 2 ipfs slices');\n                }\n\n                return this.estimateGas('register', usernameTr, ipfsHashTr)\n                    .then((estimatedGas) => {\n                        if (estimatedGas > gas) {\n                            throw new Error(`Gas required: ${estimatedGas}, Gas provided: ${gas}`);\n                        }\n                        return this.extractData('register', usernameTr, ipfsHashTr, {gas});\n                    });\n            });\n    }\n\n}\n"]}