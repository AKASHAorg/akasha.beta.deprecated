{"version":3,"file":"Entries.js","sourceRoot":"","sources":["Entries.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\n\nexport default class Entries extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = instance;\n        this.contract.getProfileEntriesCount.callAsync = Promise.promisify(this.contract.getProfileEntriesCount.call);\n        this.contract.getProfileEntryFirst.callAsync = Promise.promisify(this.contract.getProfileEntryFirst.call);\n        this.contract.getProfileEntryLast.callAsync = Promise.promisify(this.contract.getProfileEntryLast.call);\n        this.contract.getProfileEntryNext.callAsync = Promise.promisify(this.contract.getProfileEntryNext.call);\n        this.contract.getProfileEntryPrev.callAsync = Promise.promisify(this.contract.getProfileEntryPrev.call);\n        this.contract.getTagEntriesCount.callAsync = Promise.promisify(this.contract.getTagEntriesCount.call);\n        this.contract.getTagEntryFirst.callAsync = Promise.promisify(this.contract.getTagEntryFirst.call);\n        this.contract.getTagEntryLast.callAsync = Promise.promisify(this.contract.getTagEntryLast.call);\n        this.contract.getTagEntryNext.callAsync = Promise.promisify(this.contract.getTagEntryNext.call);\n        this.contract.getTagEntryPrev.callAsync = Promise.promisify(this.contract.getTagEntryPrev.call);\n        this.contract.isEditable.callAsync = Promise.promisify(this.contract.isEditable.call);\n        this.contract.getEntry.callAsync = Promise.promisify(this.contract.getEntry.call);\n        this.contract.getEntryFund.callAsync = Promise.promisify(this.contract.getEntryFund.call);\n        this.contract.entryExists.callAsync = Promise.promisify(this.contract.entryExists.call);\n    }\n\n    public publish(hash: string, tags: string[], gas: number = 3000000) {\n        const hashTr = this.splitIpfs(hash);\n        return this.evaluateData('publish', gas, hashTr, tags);\n    }\n\n    public updateEntryContent(hash: string, entryId: string|number, gas: number = 2000000) {\n        const hashTr = this.splitIpfs(hash);\n        return this.evaluateData('updateEntryContent', gas, hashTr, entryId);\n    }\n\n    public claimDeposit(entryId: string|number, gas: number = 2000000) {\n        return this.evaluateData('claimDeposit', gas, entryId);\n    }\n\n\n}\n"]}