{"version":3,"file":"Comments.js","sourceRoot":"","sources":["Comments.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\n\nexport default class Comments extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = instance;\n        this.contract.getCommentsCount.callAsync = Promise.promisify(this.contract.getCommentsCount.call);\n        this.contract.getComment.callAsync = Promise.promisify(this.contract.getComment.call);\n        this.contract.getFirstComment.callAsync = Promise.promisify(this.contract.getFirstComment.call);\n        this.contract.getLastComment.callAsync = Promise.promisify(this.contract.getLastComment.call);\n        this.contract.getNextComment.callAsync = Promise.promisify(this.contract.getNextComment.call);\n        this.contract.getPrevComment.callAsync = Promise.promisify(this.contract.getPrevComment.call);\n    }\n\n    /**\n     *\n     * @param entryId\n     * @param hash\n     * @param gas\n     * @param parent\n     * @returns {Bluebird<U>}\n     */\n    comment(entryId: string, hash: string, gas: number = 2000000, parent?: string) {\n        const hashTr = this.splitIpfs(hash);\n        return this.evaluateData('comment', gas, entryId, hashTr, parent);\n    }\n\n    /**\n     *\n     * @param entryId\n     * @param commentId\n     * @param gas\n     * @returns {Bluebird<U>}\n     */\n    removeComment(entryId: string, commentId: string, gas: number = 2000000) {\n        return this.evaluateData('removeComment', gas, entryId, commentId);\n    }\n\n    /**\n     *\n     * @param entryId\n     * @param commentId\n     * @returns {any}\n     */\n    getComment(entryId: string, commentId: string) {\n        return this.contract\n            .getComment\n            .callAsync(entryId, commentId)\n            .then((result) => {\n                return {\n                    profile: result[0],\n                    idComment: (result[1]).toString(),\n                    parent: (result[2]).toString(),\n                    ipfsHash: this.flattenIpfs(result[3]),\n                    active: !(result[4]),\n                    unixStamp: (result[5]).toNumber()\n                }\n            })\n    }\n\n    /**\n     *\n     * @param entryId\n     * @returns {any}\n     */\n    getCommentsCount(entryId: string) {\n        return this.contract\n            .getCommentsCount\n            .callAsync(entryId)\n            .then((result) => result.toNumber());\n    }\n\n    /**\n     *\n     * @param entryId\n     * @returns {any}\n     */\n    getFirstComment(entryId: string) {\n        return this.contract\n            .getFirstComment\n            .callAsync(entryId)\n            .then((result) => result.toString());\n    }\n\n    /**\n     *\n     * @param entryId\n     * @returns {any}\n     */\n    getLastComment(entryId: string) {\n        return this.contract\n            .getLastComment\n            .callAsync(entryId)\n            .then((result) => result.toString());\n    }\n\n    /**\n     *\n     * @param entryId\n     * @param commentId\n     * @returns {any}\n     */\n    getNextComment(entryId: string, commentId: string) {\n        return this.contract\n            .getNextComment\n            .callAsync(entryId, commentId)\n            .then((result) => result.toString());\n    }\n\n    /**\n     *\n     * @param entryId\n     * @param commentId\n     * @returns {any}\n     */\n    getPrevComment(entryId: string, commentId: string) {\n        return this.contract\n            .getPrevComment\n            .callAsync(entryId, commentId)\n            .then((result) => result.toString());\n    }\n}\n"]}