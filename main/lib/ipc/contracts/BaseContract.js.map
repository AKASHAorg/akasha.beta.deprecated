{"version":3,"file":"BaseContract.js","sourceRoot":"","sources":["BaseContract.ts"],"names":[],"mappings":";;AAAA,kEAA8D;AAC9D,oCAAoC;AAEpC;IAOI;QACI,IAAI,CAAC,YAAY,GAAG,8BAAa,CAAC,WAAW,EAAE,CAAC;IACpD,CAAC;IAOM,WAAW,CAAC,QAAkB;QACjC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC;IAEM,SAAS,CAAC,QAAgB;QAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC;YACH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAC1D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC1D,CAAC;IACN,CAAC;IAKM,WAAW;QACd,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAQM,WAAW,CAAC,MAAc,EAAE,GAAG,MAAa;QAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;QACzD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAQM,WAAW,CAAC,MAAc,EAAE,GAAG,MAAa;QAC/C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YAC/B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;iBAChB,WAAW,CAAC,GAAG,MAAM,EAAE,CAAC,GAAQ,EAAE,GAAW;gBAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,YAAY,CAAC,MAAc,EAAE,GAAW,EAAE,GAAG,MAAa;QAC7D,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY;YACzD,EAAE,CAAC,CAAC,YAAY,GAAG,GAAG,CAAC,CAAC,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,GAAG,MAAM,uBAAuB,YAAY,eAAe,GAAG,IAAI,CAAC,CAAC;YACxF,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YACvD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC;CAEJ;AA3ED,+BA2EC","sourcesContent":["import { GethConnector } from '@akashaproject/geth-connector';\nimport * as Promise from 'bluebird';\n\nexport default class BaseContract {\n    protected contract: any;\n    protected gethInstance: GethConnector;\n\n    /**\n     *\n     */\n    constructor() {\n        this.gethInstance = GethConnector.getInstance();\n    }\n\n    /**\n     * Join ipfs hash slices\n     * @param ipfsHash\n     * @returns {any}\n     */\n    public flattenIpfs(ipfsHash: string[]) {\n        return this.gethInstance.web3.toUtf8(ipfsHash[0]) +\n            this.gethInstance.web3.toUtf8(ipfsHash[1]);\n    }\n\n    public splitIpfs(ipfsHash: string) {\n        const offset = Math.floor(ipfsHash.length / 2);\n        return [\n            this.gethInstance.web3.fromUtf8(ipfsHash.slice(0, offset)),\n            this.gethInstance.web3.fromUtf8(ipfsHash.slice(offset))\n        ];\n    }\n\n    /**\n     * @returns {any}\n     */\n    public getContract() {\n        return this.contract;\n    }\n\n    /**\n     *\n     * @param method\n     * @param params\n     * @returns {any}\n     */\n    public extractData(method: string, ...params: any[]) {\n        const payload = this.contract[method].request(...params);\n        return payload.params[0];\n    }\n\n    /**\n     *\n     * @param method\n     * @param params\n     * @returns {\"~bluebird/bluebird\".Bluebird}\n     */\n    public estimateGas(method: string, ...params: any[]) {\n        return new Promise((resolve, reject) => {\n            this.contract[method]\n                .estimateGas(...params, (err: any, gas: number) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    return resolve(gas);\n                });\n        });\n    }\n\n    public evaluateData(method: string, gas: number, ...params: any[]) {\n        return this.estimateGas(method, ...params).then((estimatedGas) => {\n            if (estimatedGas > gas) {\n                throw new Error(`${method} GAS => { required: ${estimatedGas}, provided: ${gas} }`);\n            }\n            console.log('estimated gas for', method, estimatedGas);\n            return this.extractData(method, ...params, { gas });\n        });\n    }\n\n}\n"]}