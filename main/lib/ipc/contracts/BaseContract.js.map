{"version":3,"file":"BaseContract.js","sourceRoot":"","sources":["BaseContract.ts"],"names":[],"mappings":";AAAA,iCAA8B,+BAA+B,CAAC,CAAA;AAC9D,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AAEpC;IAOI;QACI,IAAI,CAAC,YAAY,GAAG,8BAAa,CAAC,WAAW,EAAE,CAAC;IACpD,CAAC;IAOD,WAAW,CAAC,QAAkB;QAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC;IAKD,WAAW;QACP,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAQD,WAAW,CAAC,MAAc,EAAE,GAAG,MAAa;QACxC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;QACzD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAED,WAAW,CAAC,MAAc,EAAE,GAAG,MAAa;QACxC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YAC/B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;iBAChB,WAAW,CAAC,GAAG,MAAM,EAAE,CAAC,GAAQ,EAAE,GAAW;gBAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;AAEL,CAAC;AAnDD;8BAmDC,CAAA","sourcesContent":["import { GethConnector } from '@akashaproject/geth-connector';\nimport * as Promise from 'bluebird';\n\nexport default class BaseContract {\n    protected contract: any;\n    protected gethInstance: GethConnector;\n\n    /**\n     *\n     */\n    constructor() {\n        this.gethInstance = GethConnector.getInstance();\n    }\n\n    /**\n     * Join ipfs hash slices\n     * @param ipfsHash\n     * @returns {any}\n     */\n    flattenIpfs(ipfsHash: string[]) {\n        return this.gethInstance.web3.toUtf8(ipfsHash[0]) +\n            this.gethInstance.web3.toUtf8(ipfsHash[1]);\n    }\n\n    /**\n     * @returns {any}\n     */\n    getContract() {\n        return this.contract;\n    }\n\n    /**\n     *\n     * @param method\n     * @param params\n     * @returns {any}\n     */\n    extractData(method: string, ...params: any[]) {\n        const payload = this.contract[method].request(...params);\n        return payload.params[0];\n    }\n\n    estimateGas(method: string, ...params: any[]) {\n        return new Promise((resolve, reject) => {\n            this.contract[method]\n                .estimateGas(...params, (err: any, gas: number) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    return resolve(gas);\n                });\n        });\n    }\n\n}\n"]}