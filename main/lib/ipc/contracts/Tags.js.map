{"version":3,"file":"Tags.js","sourceRoot":"","sources":["Tags.ts"],"names":[],"mappings":";AAAA,+BAAyB,gBAAgB,CAAC,CAAA;AAC1C,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AAEpC,mBAAkC,sBAAY;IAE1C,YAAY,QAAa;QACrB,OAAO,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9E,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAClF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACtF,CAAC;IAOM,MAAM,CAAC,GAAW;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,MAAM;aACN,SAAS,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAOM,QAAQ,CAAC,EAAU;QACtB,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,QAAQ;aACR,SAAS,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC;IAMM,QAAQ,CAAC,OAAe;QAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAQM,GAAG,CAAC,GAAW,EAAE,GAAY;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,MAAM;aACN,SAAS,CAAC,KAAK,CAAC;aAChB,IAAI,CAAC,CAAC,KAAc;YACjB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACR,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC1C,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACX,CAAC;AAEL,CAAC;AA7DD;sBA6DC,CAAA","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\n\nexport default class Tags extends BaseContract {\n\n    constructor(instance: any) {\n        super();\n        this.contract = Promise.promisifyAll(instance);\n        this.contract.exists.callAsync = Promise.promisify(this.contract.exists.call);\n        this.contract.getTagAt.callAsync = Promise.promisify(this.contract.getTagAt.call);\n        this.contract.getTagId.callAsync = Promise.promisify(this.contract.getTagId.call);\n    }\n\n    /**\n     *\n     * @param tag\n     * @returns {Bluebird<boolean>|any}\n     */\n    public exists(tag: string) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tag);\n        return this.contract\n            .exists\n            .callAsync(tagTr);\n    }\n\n    /**\n     *\n     * @param id\n     * @returns {Bluebird<T>|any}\n     */\n    public getTagAt(id: number) {\n        return this.contract\n            .getTagAt\n            .callAsync(id);\n    }\n\n    /**\n     *\n     * @param tagName\n     */\n    public getTagId(tagName: string) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tagName);\n        this.contract.getTagId.callAsync(tagTr);\n    }\n\n    /**\n     *\n     * @param tag\n     * @param gas\n     * @returns {Bluebird<U>}\n     */\n    public add(tag: string, gas?: number) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tag);\n        return this.contract\n            .exists\n            .callAsync(tagTr)\n            .then((found: boolean) => {\n                if (found) {\n                    throw new Error('Tag already exists');\n                }\n                return this.extractData('add', tag, { gas });\n            });\n    }\n\n}\n"]}