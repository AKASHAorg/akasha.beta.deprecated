{"version":3,"file":"Tags.js","sourceRoot":"","sources":["Tags.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\n\nexport default class Tags extends BaseContract {\n\n    constructor(instance: any) {\n        super();\n        this.contract = Promise.promisifyAll(instance);\n        this.contract.exists.callAsync = Promise.promisify(this.contract.exists.call);\n        this.contract.getTagName.callAsync = Promise.promisify(this.contract.getTagName.call);\n        this.contract.getTagId.callAsync = Promise.promisify(this.contract.getTagId.call);\n        this.contract.getTagCount.callAsync = Promise.promisify(this.contract.getTagCount.call);\n        this.contract.getFirstTag.callAsync = Promise.promisify(this.contract.getFirstTag.call);\n        this.contract.getLastTag.callAsync = Promise.promisify(this.contract.getLastTag.call);\n        this.contract.nextTag.callAsync = Promise.promisify(this.contract.nextTag.call);\n        this.contract.prevTag.callAsync = Promise.promisify(this.contract.prevTag.call);\n        this.contract.check_format.callAsync = Promise.promisify(this.contract.check_format.call);\n    }\n\n    /**\n     *\n     * @param tag\n     * @returns {Bluebird<boolean>|any}\n     */\n    public exists(tag: string) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tag);\n        return this.contract\n            .exists\n            .callAsync(tagTr);\n    }\n\n\n    /**\n     *\n     * @returns {any}\n     */\n    public getTagsCount() {\n        return this.contract\n            .getTagCount\n            .callAsync()\n            .then((nr) => nr.toNumber());\n    }\n\n    /**\n     *\n     * @param tagName\n     */\n    public getTagId(tagName: string) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tagName);\n        return this.contract.getTagId.callAsync(tagTr).then((nr) => nr.toString());\n    }\n\n\n    /**\n     *\n     * @param tagId\n     * @returns {any}\n     */\n    public getTagName(tagId: any) {\n        return this.contract\n            .getTagName\n            .callAsync(tagId)\n            .then((name) => this.gethInstance.web3.toUtf8(name));\n    }\n\n    /**\n     *\n     * @param tagName\n     * @returns {any}\n     */\n    public checkFormat(tagName: string) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tagName);\n        return this.contract\n            .check_format\n            .callAsync(tagTr)\n    }\n\n    public getFirstTag() {\n        return this.contract.getFirstTag.callAsync().then((id) => id.toString());\n    }\n\n    public getLastTag() {\n        return this.contract.getLastTag.callAsync().then((id) => id.toString());\n    }\n\n    public getNextTag(idTag: any) {\n        return this.contract.nextTag.callAsync(idTag).then((id) => id.toString());\n    }\n\n    public getPrevTag(idTag: any) {\n        return this.contract.prevTag.callAsync(idTag).then((id) => id.toString());\n    }\n\n    /**\n     *\n     * @param tag\n     * @param gas\n     * @returns {Bluebird<U>}\n     */\n    public add(tag: string, gas?: number) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tag);\n        return this.contract\n            .exists\n            .callAsync(tagTr)\n            .then((found: boolean) => {\n                if (found) {\n                    throw new Error('Tag already exists');\n                }\n                return this.contract\n                    .check_format\n                    .callAsync(tagTr);\n            })\n            .then((hasFormat) => {\n                if(!hasFormat){\n                    throw new Error('Provided Tag has illegal characters');\n                }\n                return this.extractData('add', tagTr, { gas });\n            });\n    }\n\n    /**\n     *\n     * @param filter\n     * @returns {Bluebird<T>|any}\n     */\n    public getTagsCreated(filter: {index: {}, fromBlock: string, toBlock?: string, address?: string}) {\n        const { fromBlock, toBlock, address } = filter;\n        const TagsCreated = this.contract.Create(filter.index, { fromBlock, toBlock, address });\n        TagsCreated.getAsync = Promise.promisify(TagsCreated.get);\n        return TagsCreated.getAsync();\n    }\n}\n"]}