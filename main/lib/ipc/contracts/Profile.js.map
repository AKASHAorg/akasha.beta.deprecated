{"version":3,"file":"Profile.js","sourceRoot":"","sources":["Profile.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\n\nexport default class Profile extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = instance;\n    }\n\n    /**\n     * Get ipfs hash for profile at address\n     * @param address\n     * @returns {\"~bluebird/bluebird\".Bluebird}\n     */\n    public getIpfs(address: string) {\n        return new Promise((resolve, reject) => {\n            this.contract\n                .at(address)\n                .getIpfs\n                .call(\n                    (err: Error, hash: string[]) => {\n                        if (err) {\n                            return reject(err);\n                        }\n                        return resolve(this.flattenIpfs(hash));\n                    }\n                );\n        });\n\n    }\n\n    /**\n     * Get tipping address for a specific profile\n     * @param address\n     * @returns {\"~bluebird/bluebird\".Bluebird}\n     */\n    public getTippingAddress(address: string) {\n        return new Promise((resolve, reject) => {\n            this.contract\n                .at(address)\n                .getCollector\n                .call((err: Error, data: string) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    return resolve(data);\n                });\n        });\n    }\n\n    /**\n     *\n     * @param hash\n     * @param address\n     * @param gas\n     * @returns {\"~bluebird/bluebird\".Bluebird}\n     */\n    public updateHash(hash: string[], address: string, gas?: number) {\n        const ipfsHashTr = hash.map((v) => {\n            return this.gethInstance.web3.fromUtf8(v);\n        });\n        return new Promise((resolve, reject) => {\n            if (hash.length !== 2) {\n                return reject(new Error('Expected exactly 2 ipfs slices'));\n            }\n            this.contract\n                .at(address)\n                .setHash(ipfsHashTr, { gas }, (err: Error, tx: string) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    return resolve(tx);\n                });\n        });\n    }\n\n    /**\n     *\n     * @param address\n     * @param tippingAddress\n     * @param gas\n     * @returns {\"~bluebird/bluebird\".Bluebird}\n     */\n    public setTippingAddress(address: string, tippingAddress: string, gas?: number) {\n        return new Promise((resolve, reject) => {\n           this.contract\n               .at(address)\n               .setEthAddress(tippingAddress, {gas}, (err: Error, tx: string) => {\n                   if (err) {\n                       return reject(err);\n                   }\n                   return resolve(tx);\n               });\n        });\n    }\n\n    /**\n     * Remove profile\n     * @param address\n     * @param gas\n     * @returns {\"~bluebird/bluebird\".Bluebird}\n     */\n    public unregister(address: string, gas?: number) {\n        return new Promise((resolve, reject) => {\n           this.contract\n               .at(address)\n               .destroy({gas}, (err: Error, tx: string) => {\n                   if (err) {\n                       return reject(err);\n                   }\n                   return resolve(tx);\n               });\n        });\n    }\n\n}\n"]}