{"version":3,"file":"Profile.js","sourceRoot":"","sources":["Profile.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\n\nexport default class Profile extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = instance;\n\n    }\n\n    /**\n     * Get ipfs hash for profile at address\n     * @param address\n     * @returns {\"bluebird\".Bluebird}\n     */\n    public getIpfs(address: string) {\n        const profile = this.contract.at(address);\n        const first = Promise.fromCallback(\n            (cb) => {\n                profile._hash.call(0, cb);\n            });\n\n        const second = Promise.fromCallback(\n            (cb) => {\n                profile._hash.call(1, cb);\n            });\n        return Promise.all([first, second]).then((parts) => this.flattenIpfs(parts));\n    }\n\n    /**\n     *\n     * @param address\n     * @returns {Bluebird<U>}\n     */\n    public getId(address: string) {\n        const profile = this.contract.at(address);\n        return Promise.fromCallback(\n            (cb) => {\n                profile._id.call(cb);\n            }\n        ).then((id) => this.gethInstance.web3.toUtf8(id))\n    }\n\n    /**\n     * Get tipping address for a specific profile\n     * @param address\n     * @returns {\"bluebird\".Bluebird}\n     */\n    public getTippingAddress(address: string) {\n        return new Promise((resolve, reject) => {\n            this.contract\n                .at(address)\n                .getCollector\n                .call((err: Error, data: string) => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    return resolve(data);\n                });\n        });\n    }\n\n    /**\n     *\n     * @param hash\n     * @param address\n     * @param gas\n     * @returns {any}\n     */\n    public updateHash(hash: string, address: string, gas?: number) {\n        const hashTr = this.splitIpfs(hash);\n        const extracted = this.contract.at(address).setHash.request(hashTr, { gas });\n        return Promise.resolve(extracted.params[0]);\n    }\n\n    /**\n     *\n     * @param address\n     * @param tippingAddress\n     * @param gas\n     * @returns {Bluebird<R>}\n     */\n    public setTippingAddress(address: string, tippingAddress: string, gas?: number) {\n        const extracted = this.contract\n            .at(address)\n            .setEthAddress\n            .request(tippingAddress, { gas });\n        return Promise.resolve(extracted.params[0]);\n    }\n\n    /**\n     *\n     * @param address\n     * @param gas\n     * @returns {Bluebird<R>}\n     */\n    public unregister(address: string, gas?: number) {\n        const extracted = this.contract\n            .at(address)\n            .destroy\n            .request({ gas });\n        return Promise.resolve(extracted.params[0]);\n    }\n\n}\n"]}