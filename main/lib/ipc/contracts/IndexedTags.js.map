{"version":3,"file":"IndexedTags.js","sourceRoot":"","sources":["IndexedTags.ts"],"names":[],"mappings":";AAAA,+BAAyB,gBAAgB,CAAC,CAAA;AAC1C,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AAEpC,0BAAyC,sBAAY;IAKjD,YAAY,QAAa;QACrB,OAAO,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAClG,CAAC;IAQM,YAAY,CAAC,UAAkB,EAAE,KAAsB;QAC1D,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,YAAY;aACZ,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAQM,cAAc,CAAC,UAAkB,EAAE,KAAsB;QAC5D,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,cAAc;aACd,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC;aAC5B,IAAI,CAAC,CAAC,UAAU,KAAK,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrD,CAAC;IAQM,SAAS,CAAC,GAAW,EAAE,GAAY;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IAC1E,CAAC;IASM,WAAW,CAAC,GAAW,EAAE,WAA4B,EAAE,GAAY;QACtE,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IACzF,CAAC;IAOM,aAAa,CAAC,MAAgH;QACjI,MAAM,EAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAC,GAAG,MAAM,CAAC;QAC7C,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,EAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;QACzF,UAAU,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;IAOM,gBAAgB,CAAC,MAA6D;QACrF,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC1C,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IACxB,CAAC;AACL,CAAC;AAlFD;6BAkFC,CAAA","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\n\nexport default class IndexedTags extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = Promise.promisifyAll(instance);\n        this.contract.isSubscribed.callAsync = Promise.promisify(this.contract.isSubscribed.call);\n        this.contract.getSubPosition.callAsync = Promise.promisify(this.contract.getSubPosition.call);\n    }\n\n    /**\n     * Check if a profile is subscribed to a specific tag\n     * @param subscriber\n     * @param tagId\n     * @returns {any}\n     */\n    public isSubscribed(subscriber: string, tagId: string | number) {\n        return this.contract\n            .isSubscribed\n            .callAsync(subscriber, tagId);\n    }\n\n    /**\n     * Get subPosition for unsubscribe\n     * @param subscriber\n     * @param tagId\n     * @returns {any}\n     */\n    public getSubPosition(subscriber: string, tagId: string | number) {\n        return this.contract\n            .getSubPosition\n            .callAsync(subscriber, tagId)\n            .then((positionBN) => positionBN.toString());\n    }\n\n    /**\n     * Subscribe to a tag\n     * @param tag\n     * @param gas\n     * @returns {any}\n     */\n    public subscribe(tag: string, gas?: number) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tag);\n        return Promise.resolve(this.extractData('subscribe', tagTr, { gas }));\n    }\n\n    /**\n     * Unsubscribe from a tag\n     * @param tag\n     * @param subPosition\n     * @param gas\n     * @returns {any}\n     */\n    public unsubscribe(tag: string, subPosition: string | number, gas?: number) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tag);\n        return Promise.resolve(this.extractData('unsubscribe', tagTr, subPosition, { gas }));\n    }\n\n    /**\n     *\n     * @param filter\n     * @returns {Bluebird<T>|any}\n     */\n    public getIndexedTag(filter: {index?: {tag?: string, tagId?: number | string}, fromBlock: string, toBlock?: string, address?: string}) {\n        const {fromBlock, toBlock, address} = filter;\n        const IndexedTag = this.contract.IndexedTag(filter.index, {fromBlock, toBlock, address});\n        IndexedTag.getAsync = Promise.promisify(IndexedTag.get);\n        return IndexedTag.getAsync();\n    }\n\n    /**\n     *\n     * @param filter\n     * @returns {Bluebird<T>|any}\n     */\n    public getIndexTagError(filter: {fromBlock: string, toBlock: string, address: string}) {\n    const Error = this.contract.Error(filter);\n    Error.getAsync = Promise.promisify(Error.get);\n    return Error.getAsync();\n    }\n}\n"]}