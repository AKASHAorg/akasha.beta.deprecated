{"version":3,"file":"IndexedTags.js","sourceRoot":"","sources":["IndexedTags.ts"],"names":[],"mappings":";AAAA,+BAAyB,gBAAgB,CAAC,CAAA;AAC1C,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AAEpC,0BAAyC,sBAAY;IAKjD,YAAY,QAAa;QACrB,OAAO,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAClG,CAAC;IAQM,YAAY,CAAC,UAAkB,EAAE,KAAa;QACjD,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1D,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,YAAY;aACZ,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAQM,cAAc,CAAC,UAAkB,EAAE,KAAa;QACnD,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1D,MAAM,CAAC,IAAI,CAAC,QAAQ;aACf,cAAc;aACd,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAOM,SAAS,CAAC,GAAW,EAAE,GAAY;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE,KAAA,GAAG,EAAE,CAAC,CAAC;IACzD,CAAC;IASM,WAAW,CAAC,GAAW,EAAE,WAAmB,EAAE,GAAY;QAC7D,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,KAAA,GAAG,EAAE,CAAC,CAAC;IAC1E,CAAC;AACL,CAAC;AA5DD;6BA4DC,CAAA","sourcesContent":["import BaseContract from './BaseContract';\nimport * as Promise from 'bluebird';\n\nexport default class IndexedTags extends BaseContract {\n    /**\n     *\n     * @param instance\n     */\n    constructor(instance: any) {\n        super();\n        this.contract = Promise.promisifyAll(instance);\n        this.contract.isSubscribed.callAsync = Promise.promisify(this.contract.isSubscribed.call);\n        this.contract.getSubPosition.callAsync = Promise.promisify(this.contract.getSubPosition.call);\n    }\n\n    /**\n     * Check if a profile is subscribed to a specific tag\n     * @param subscriber\n     * @param tagId\n     * @returns {any}\n     */\n    public isSubscribed(subscriber: string, tagId: number) {\n        const tagIdTr = this.gethInstance.web3.fromDecimal(tagId);\n        return this.contract\n            .isSubscribed\n            .callAsync(subscriber, tagIdTr);\n    }\n\n    /**\n     * Get subPosition for unsubscribe\n     * @param subscriber\n     * @param tagId\n     * @returns {any}\n     */\n    public getSubPosition(subscriber: string, tagId: number) {\n        const tagIdTr = this.gethInstance.web3.fromDecimal(tagId);\n        return this.contract\n            .getSubPosition\n            .callAsync(subscriber, tagIdTr);\n    }\n    /**\n     * Subscribe to a tag\n     * @param tag\n     * @param gas\n     * @returns {any}\n     */\n    public subscribe(tag: string, gas?: number) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tag);\n        return this.extractData('subscribe', tagTr, { gas });\n    }\n\n    /**\n     * Unsubscribe from a tag\n     * @param tag\n     * @param subPosition\n     * @param gas\n     * @returns {any}\n     */\n    public unsubscribe(tag: string, subPosition: number, gas?: number) {\n        const tagTr = this.gethInstance.web3.fromUtf8(tag);\n        const subPositionTr = this.gethInstance.web3.fromDecimal(subPosition);\n        return this.extractData('unsubscribe', tagTr, subPositionTr, { gas });\n    }\n}\n"]}