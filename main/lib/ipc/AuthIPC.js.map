{"version":3,"file":"AuthIPC.js","sourceRoot":"","sources":["AuthIPC.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\nimport ModuleEmitter from './event/ModuleEmitter';\nimport { GethConnector } from '@akashaproject/geth-connector';\nimport channels from '../channels';\nimport { mainResponse } from './event/responses';\nimport { module as userModule } from './modules/auth/index';\nimport { constructed } from './contracts/index';\nimport { post as POST } from 'request';\nimport notifs from './modules/notifications/feed';\nimport updater from '../../check-version';\nimport WebContents = Electron.WebContents;\n\nconst faucetToken = '8336abae5a97f017d2d0ef952a6a566d4bbed5cd22c7b524ae749673d5562b567af109371' +\n    '81b7bdea73edd25512fdb948b3b016034bb01c0d95f8f9beb68c914';\n\nclass AuthIPC extends ModuleEmitter {\n    constructor() {\n        super();\n        this.MODULE_NAME = 'auth';\n        this.DEFAULT_MANAGED = ['login', 'logout', 'requestEther'];\n    }\n\n    initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n        this._login()\n            ._logout()\n            ._generateEthKey()\n            ._getLocalIdentities()\n            ._requestEther()\n            ._manager();\n    }\n\n    private _login() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].login,\n            (event: any, data: AuthLoginRequest) => {\n                userModule\n                    .auth\n                    .login(data.account, data.password, data.rememberTime, data.registering)\n                    .then((response: any) => {\n                        const response1: AuthLoginResponse = mainResponse(response);\n                        return this.fireEvent(\n                            channels.client[this.MODULE_NAME].login,\n                            response1,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _logout() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].logout,\n            (event: any, data: AuthLogoutRequest) => {\n                notifs.execute({ stop: true });\n                userModule\n                    .auth\n                    .logout();\n                const response: AuthLogoutResponse = mainResponse({ done: true });\n                return this.fireEvent(\n                    channels.client[this.MODULE_NAME].logout,\n                    response,\n                    event\n                );\n            }\n        );\n        return this;\n    }\n\n    private _generateEthKey() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].generateEthKey,\n            (event: any, data: AuthKeygenRequest) => {\n                userModule\n                    .auth\n                    .generateKey(data.password)\n                    .then((address: string) => {\n                        const response: AuthKeygenResponse = mainResponse({ address });\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].generateEthKey,\n                            response,\n                            event\n                        );\n                    })\n                    .catch((error: Error) => {\n                        const response: AuthKeygenResponse = mainResponse({ error });\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].generateEthKey,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getLocalIdentities() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getLocalIdentities,\n            (event: any, data: any) => {\n                let response: LocalProfilesResponse;\n                constructed\n                    .instance\n                    .registry\n                    .getLocalProfiles()\n                    .then((list: { key: string, profile: string }[]) => {\n                        response = mainResponse(list);\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({ error: { message: err.message } });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getLocalIdentities,\n                            response,\n                            event\n                        );\n                        constructed\n                            .instance\n                            .feed\n                            .contract\n                            .getAppState((err, state) => {\n                                const version = GethConnector.getInstance().web3.toUtf8(state[0]);\n                                updater.checkVersion(version, state[1], state[2]);\n                            });\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _requestEther() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].requestEther,\n            (event: any, data: RequestEtherRequest) => {\n                POST({\n                        url: 'https://138.68.78.152:1337/get/faucet',\n                        json: { address: data.address, token: faucetToken },\n                        agentOptions: { rejectUnauthorized: false }\n                    },\n                    (error: Error, response: any, body: { tx: string }) => {\n                        const data = (error) ? { error } : body;\n                        const response1: RequestEtherResponse = mainResponse(data);\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].requestEther,\n                            response1,\n                            event\n                        );\n                    }\n                );\n            });\n        return this;\n    }\n}\n\nexport default AuthIPC;\n"]}