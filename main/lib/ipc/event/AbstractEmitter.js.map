{"version":3,"file":"AbstractEmitter.js","sourceRoot":"","sources":["AbstractEmitter.ts"],"names":[],"mappings":";AAEA,2BAA8B,UAAU,CAAC,CAAA;AACzC,mCAAiC,oBAAoB,CAAC,CAAA;AAEtD,8BAA8C,mCAAgB;IAG1D;QACI,OAAO,CAAC;QAER,IAAI,CAAC,WAAW,GAAG,wBAAa,CAAC,gBAAgB,EAAE,CAAC,WAAW,CAAC;QAChE,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAQD,SAAS,CAAC,OAAe,EAAE,IAAY,EAAE,KAAwB;QAC7D,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;AAGL,CAAC;AAxBqB,uBAAe,kBAwBpC,CAAA","sourcesContent":["import IpcRendererEvent = Electron.IpcRendererEvent;\nimport WebContents = Electron.WebContents;\nimport { BrowserWindow } from 'electron';\nimport { AbstractListener } from './AbstractListener';\n\nexport abstract class AbstractEmitter extends AbstractListener {\n    public webContents: WebContents;\n\n    constructor() {\n        super();\n        // there is only one window for entire app\n        this.webContents = BrowserWindow.getFocusedWindow().webContents;\n        this.initListeners();\n    }\n\n    /**\n     * Generic method to dispatch a channel event\n     * @param channel\n     * @param data\n     * @param event\n     */\n    fireEvent(channel: string, data: Object, event?: IpcRendererEvent) {\n        if (event) {\n            return event.sender.send(channel, data);\n        }\n        return this.webContents.send(channel, data);\n    }\n\n    abstract attachEmitters(): any;\n}\n"]}