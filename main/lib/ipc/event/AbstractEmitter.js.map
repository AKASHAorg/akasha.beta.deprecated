{"version":3,"file":"AbstractEmitter.js","sourceRoot":"","sources":["AbstractEmitter.ts"],"names":[],"mappings":";AAEA,yDAAsD;AAEtD,qBAAsC,SAAQ,mCAAgB;IASnD,SAAS,CAAC,OAAe,EAAE,IAAkB,EAAE,KAAwB;QAC1E,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACX,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;CAGJ;AApBD,0CAoBC","sourcesContent":["import IpcRendererEvent = Electron.IpcRendererEvent;\nimport WebContents = Electron.WebContents;\nimport { AbstractListener } from './AbstractListener';\n\nexport abstract class AbstractEmitter extends AbstractListener {\n    public webContents: WebContents;\n\n    /**\n     * Generic method to dispatch a channel event\n     * @param channel\n     * @param data\n     * @param event\n     */\n    public fireEvent(channel: string, data: MainResponse, event?: IpcRendererEvent) {\n        if (event) {\n            return event.sender.send(channel, data);\n        }\n        if (!this.webContents) {\n            return;\n        }\n        return this.webContents.send(channel, data);\n    }\n\n    public abstract attachEmitters(): any;\n}\n"]}