{"version":3,"file":"AbstractListener.js","sourceRoot":"","sources":["AbstractListener.ts"],"names":[],"mappings":";AAAA,2BAAwB,UAAU,CAAC,CAAA;AAInC;IAAA;QACW,cAAS,GAAsC,IAAI,GAAG,EAAE,CAAC;IAoEpE,CAAC;IA7DG,YAAY,CAAC,OAAe;QACxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,gCAAgC,OAAO,EAAE,CAAC,CAAC;QAC/D,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxC,kBAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;QACD,MAAM,CAAC,kBAAO,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IAC5D,CAAC;IAOD,gBAAgB,CAAC,OAAe,EAAE,EAAwB;QACtD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IACpC,CAAC;IAOD,aAAa,CAAC,OAAe;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAKD,iBAAiB;QACb,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,OAAO;YAC/B,MAAM,CAAC,kBAAO,CAAC,cAAc,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAOD,YAAY,CAAC,OAAe;QACxB,MAAM,CAAC,kBAAO,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACxE,CAAC;IAOD,iBAAiB,CAAC,OAAe;QAC7B,MAAM,CAAC,kBAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;AAGL,CAAC;AArEqB,wBAAgB,mBAqErC,CAAA","sourcesContent":["import { ipcMain } from 'electron';\nimport IpcMainEventListener = Electron.IpcMainEventListener;\nimport WebContents = Electron.WebContents;\n\nexport abstract class AbstractListener {\n    public listeners: Map<string, IpcMainEventListener> = new Map();\n\n    /**\n     * Start listening for a registered channel\n     * @param channel\n     * @returns {Electron.IpcMain}\n     */\n    listenEvents(channel: string) {\n        if (!this.listeners.get(channel)) {\n            throw new Error(`Must register a listener for ${channel}`);\n        }\n        if (this.getListenersCount(channel) !== 0) {\n            ipcMain.removeAllListeners(channel);\n        }\n        return ipcMain.on(channel, this.listeners.get(channel));\n    }\n\n    /**\n     * Register a channel event handler\n     * @param channel\n     * @param cb\n     */\n    registerListener(channel: string, cb: IpcMainEventListener): void {\n        this.listeners.set(channel, cb);\n    }\n\n    /**\n     *\n     * @param channel\n     * @returns {boolean}\n     */\n    purgeListener(channel: string) {\n        if (!this.listeners.get(channel)) {\n            return false;\n        }\n        this.stopListener(channel);\n        return this.listeners.delete(channel);\n    }\n\n    /**\n     *\n     */\n    purgeAllListeners() {\n        this.listeners.forEach((cb, channel) => {\n            return ipcMain.removeListener(channel, cb);\n        });\n        this.listeners.clear();\n    }\n\n    /**\n     * stop listening on channel\n     * @param channel\n     * @returns {Electron.IpcMain}\n     */\n    stopListener(channel: string) {\n        return ipcMain.removeListener(channel, this.listeners.get(channel));\n    }\n\n    /**\n     *\n     * @param channel\n     * @returns {number}\n     */\n    getListenersCount(channel: string) {\n        return ipcMain.listenerCount(channel);\n    }\n\n    abstract initListeners(webContents: WebContents): any;\n}\n"]}