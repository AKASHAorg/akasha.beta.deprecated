{"version":3,"file":"ModuleEmitter.js","sourceRoot":"","sources":["ModuleEmitter.ts"],"names":[],"mappings":";AAAA,kCAAgC,mBAAmB,CAAC,CAAA;AACpD,2BAAqB,gBAAgB,CAAC,CAAA;AACtC,4BAA6B,aAAa,CAAC,CAAA;AAE3C,4BAAqC,iCAAe;IAQtC,QAAQ;QACd,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EACzC,CAAC,KAAU,EAAE,IAAgB;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACd,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC5C,MAAM,CAAC,IAAI,CAAC,SAAS,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EACzC,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,wBAAwB,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,EAC5E,KAAK,CACR,CAAC;gBACN,CAAC;gBACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,wBAAY,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAChG,CAAC,CACJ,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC;QAC7D,IAAI,CAAC,eAAe,CAAC,OAAO,CACxB,CAAC,MAAc,KACX,IAAI,CAAC,YAAY,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,CACnE,CAAC;IACN,CAAC;IAKM,cAAc;QACjB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAES,YAAY,CAAC,OAAO;QAC1B,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM;YACnB,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAC9C,CAAC,KAAU,EAAE,IAAS;gBAClB,IAAI,QAAa,CAAC;gBAClB,MAAM;qBACD,OAAO,CAAC,IAAI,CAAC;qBACb,IAAI,CAAC,CAAC,MAAW;oBACd,QAAQ,GAAG,wBAAY,CAAC,MAAM,CAAC,CAAC;gBACpC,CAAC,CAAC;qBACD,KAAK,CAAC,CAAC,GAAU;oBACd,QAAQ,GAAG,wBAAY,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC7E,CAAC,CAAC;qBACD,OAAO,CAAC;oBACL,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAC9C,QAAQ,EACR,KAAK,CACR,CAAC;oBACF,QAAQ,GAAG,IAAI,CAAC;gBACpB,CAAC,CAAC,CAAC;YACX,CAAC,CACJ,CAAA;QACL,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AACD;kBAAe,aAAa,CAAC","sourcesContent":["import { AbstractEmitter } from './AbstractEmitter';\nimport channels from '../../channels';\nimport { mainResponse } from './responses';\n\nabstract class ModuleEmitter extends AbstractEmitter {\n    protected MODULE_NAME: string;\n    protected DEFAULT_MANAGED: string[];\n\n    /**\n     *\n     * @private\n     */\n    protected _manager() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].manager,\n            (event: any, data: IPCmanager) => {\n                if (data.listen) {\n                    if (this.getListenersCount(data.channel) >= 1) {\n                        return this.fireEvent(\n                            channels.client[this.MODULE_NAME].manager,\n                            mainResponse({ error: { message: `already listening on ${data.channel}` } }),\n                            event\n                        );\n                    }\n                    this.listenEvents(data.channel);\n                } else {\n                    this.purgeListener(data.channel);\n                }\n                return this.fireEvent(channels.client[this.MODULE_NAME].manager, mainResponse(data), event);\n            }\n        );\n        this.listenEvents(channels.server[this.MODULE_NAME].manager);\n        this.DEFAULT_MANAGED.forEach(\n            (action: string) =>\n                this.listenEvents(channels.server[this.MODULE_NAME][action])\n        );\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    public attachEmitters() {\n        return true;\n    }\n\n    protected _initMethods(methods) {\n        methods.forEach((method) => {\n            console.log([this.MODULE_NAME], [method.name]);\n            this.registerListener(\n                channels.server[this.MODULE_NAME][method.name],\n                (event: any, data: any) => {\n                    let response: any;\n                    method\n                        .execute(data)\n                        .then((result: any) => {\n                            response = mainResponse(result);\n                        })\n                        .catch((err: Error) => {\n                            response = mainResponse({ error: { message: err.message }, from: data });\n                        })\n                        .finally(() => {\n                            this.fireEvent(\n                                channels.client[this.MODULE_NAME][method.name],\n                                response,\n                                event\n                            );\n                            response = null;\n                        });\n                }\n            )\n        });\n    }\n}\nexport default ModuleEmitter;\n"]}