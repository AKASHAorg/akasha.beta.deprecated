{"version":3,"file":"ModuleEmitter.js","sourceRoot":"","sources":["ModuleEmitter.ts"],"names":[],"mappings":";AAAA,kCAAgC,mBAAmB,CAAC,CAAA;AACpD,2BAAqB,gBAAgB,CAAC,CAAA;AACtC,4BAA6B,aAAa,CAAC,CAAA;AAE3C,4BAAqC,iCAAe;IAQtC,QAAQ;QACV,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EACzC,CAAC,KAAU,EAAE,IAAgB;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACd,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC3C,MAAM,CAAC,IAAI,CAAC,SAAS,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EACzC,wBAAY,CAAC,EAAC,KAAK,EAAE,EAAE,OAAO,EAAE,wBAAwB,IAAI,CAAC,OAAO,EAAE,EAAE,EAAC,CAAC,EAC1E,KAAK,CACR,CAAC;gBACN,CAAC;gBACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAChC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,wBAAY,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;YAChG,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC,CACJ,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC;QAC7D,IAAI,CAAC,eAAe,CAAC,OAAO,CACxB,CAAC,MAAc,KACX,IAAI,CAAC,YAAY,CAAC,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,CACnE,CAAC;IACV,CAAC;IAKD,cAAc;QACV,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AACD;kBAAe,aAAa,CAAC","sourcesContent":["import { AbstractEmitter } from './AbstractEmitter';\nimport channels from '../../channels';\nimport { mainResponse } from './responses';\n\nabstract class ModuleEmitter extends AbstractEmitter {\n    protected MODULE_NAME: string;\n    protected DEFAULT_MANAGED: string[];\n\n    /**\n     *\n     * @private\n     */\n    protected _manager() {\n            this.registerListener(\n                channels.server[this.MODULE_NAME].manager,\n                (event: any, data: IPCmanager) => {\n                    if (data.listen) {\n                        if (this.getListenersCount(data.channel) > 1) {\n                            return this.fireEvent(\n                                channels.client[this.MODULE_NAME].manager,\n                                mainResponse({error: { message: `already listening on ${data.channel}` }}),\n                                event\n                            );\n                        }\n                        this.listenEvents(data.channel);\n                        return this.fireEvent(channels.client[this.MODULE_NAME].manager, mainResponse(data), event);\n                    }\n                    return this.purgeListener(data.channel);\n                }\n            );\n            this.listenEvents(channels.server[this.MODULE_NAME].manager);\n            this.DEFAULT_MANAGED.forEach(\n                (action: string) =>\n                    this.listenEvents(channels.server[this.MODULE_NAME][action])\n            );\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    attachEmitters() {\n        return true;\n    }\n}\nexport default ModuleEmitter;\n"]}