{"version":3,"file":"GethEmitter.js","sourceRoot":"","sources":["GethEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { GethConnector, CONSTANTS } from '@akashaproject/geth-connector';\nimport { AbstractEmitter } from './AbstractEmitter';\nimport channels from '../../channels';\nimport { gethResponse } from './responses';\nimport { constructed } from '../contracts/index';\nimport { initModules } from '../modules/index';\nconst peers  = require('../config/peers.json');\n\nabstract class GethEmitter extends AbstractEmitter {\n    public attachEmitters() {\n        this._download()\n            ._error()\n            ._fatal()\n            ._starting()\n            ._started()\n            ._stopped();\n    }\n\n    private _download() {\n        GethConnector.getInstance().on(\n            CONSTANTS.DOWNLOADING_BINARY, () => {\n                this.fireEvent(channels.client.geth.startService, gethResponse({ downloading: true }));\n            }\n        );\n        return this;\n    }\n\n    /**\n     * Forward @event GethConnector#STARTING\n     * @returns {GethEmitter}\n     * @private\n     */\n    private _starting() {\n        GethConnector.getInstance().on(\n            CONSTANTS.STARTING, () => {\n                this.fireEvent(channels.client.geth.startService, gethResponse({ starting: true }));\n            }\n        );\n        return this;\n    }\n\n    /**\n     * Forward @event GethConnector#STARTED\n     * @returns {GethEmitter}\n     * @private\n     */\n    private _started() {\n        GethConnector.getInstance().on(\n            CONSTANTS.STARTED, () => {\n                this.fireEvent(channels.client.geth.startService, gethResponse({ started: true }));\n            }\n        );\n\n        GethConnector.getInstance().once(\n            CONSTANTS.IPC_CONNECTED, () => {\n                this.fireEvent(channels.client.geth.startService, gethResponse({}));\n                // inject web3 instance\n                constructed.init(GethConnector.getInstance().web3);\n                // wait for ipc connection\n                initModules();\n                // add static peers\n                peers.list.forEach((peer: string) => {\n                    GethConnector.getInstance().web3.admin.addPeerAsync(peer);\n                });\n            }\n        );\n        return this;\n    }\n\n    /**\n     * Forward @event GethConnector#STOPPED\n     * @returns {GethEmitter}\n     * @private\n     */\n    private _stopped() {\n        GethConnector.getInstance().on(\n            CONSTANTS.STOPPED, () => {\n                this.fireEvent(channels.client.geth.stopService, gethResponse({ stopped: true }));\n            }\n        );\n        return this;\n    }\n\n    /**\n     * Forward @event GethConnector#FATAL\n     * @returns {GethEmitter}\n     * @private\n     */\n    private _fatal() {\n        GethConnector.getInstance().on(\n            CONSTANTS.FATAL, (message: string) => {\n                this.fireEvent(channels.client.geth.startService,\n                    gethResponse({}, { message, fatal: true })\n                );\n            }\n        );\n        return this;\n    }\n\n    /**\n     * Forward @event GethConnector#ERROR\n     * @returns {GethEmitter}\n     * @private\n     */\n    private _error() {\n        GethConnector.getInstance().on(\n            CONSTANTS.ERROR, (message: string) => {\n                this.fireEvent(channels.client.geth.startService,\n                    gethResponse({}, { message })\n                );\n            }\n        );\n        return this;\n    }\n}\nexport default GethEmitter;\n"]}