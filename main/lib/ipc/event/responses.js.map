{"version":3,"file":"responses.js","sourceRoot":"","sources":["responses.ts"],"names":[],"mappings":";;AAAA,kEAA8D;AAC9D,kEAA8D;AASjD,QAAA,YAAY,GAAG,CAAC,IAAY,EAAE,OAAY,EAAE,KAA4C;IACjG,MAAM,GAAG,GAAG,8BAAa,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC;IACtD,MAAM,MAAM,GAAe,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;IACvF,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;AAC5C,CAAC,CAAC;AASW,QAAA,YAAY,GAAG,CAAC,IAAY,EAAE,OAAY,EAAE,KAAuD;IAC5G,MAAM,MAAM,GAAG,8BAAa,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC;IACzD,MAAM,MAAM,GAAe,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IAC7F,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;AAC5C,CAAC,CAAC;AAQW,QAAA,YAAY,GAAG,CAAC,OAAY,EAAE,OAAY;IACnD,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC;IAC5E,CAAC;IACD,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AACtC,CAAC,CAAC","sourcesContent":["import { GethConnector } from '@akashaproject/geth-connector';\nimport { IpfsConnector } from '@akashaproject/ipfs-connector';\n\n/**\n *\n * @param data\n * @param request\n * @param error\n * @returns {{data: GethStatus, request: any, error: {message: string, fatal?: boolean}}}\n */\nexport const gethResponse = (data: Object, request: any, error?: { message: string, fatal?: boolean }): MainResponse => {\n    const api = GethConnector.getInstance().serviceStatus;\n    const status: GethStatus = Object.assign(data, { api: api.api, spawned: api.process });\n    return { data: status, request, error };\n};\n\n/**\n *\n * @param data\n * @param request\n * @param error\n * @returns {{data: IpfsStatus, request: any, error: {message: string, fatal?: boolean, from?: {}}}}\n */\nexport const ipfsResponse = (data: Object, request: any, error?: { message: string, fatal?: boolean, from?: {} }): MainResponse => {\n    const status = IpfsConnector.getInstance().serviceStatus;\n    const merged: IpfsStatus = Object.assign(data, { api: status.api, spawned: status.process });\n    return { data: merged, request, error };\n};\n\n/**\n *\n * @param rawData\n * @param request\n * @returns {any}\n */\nexport const mainResponse = (rawData: any, request: any): MainResponse => {\n    if (rawData.error) {\n        return { data: {}, error: { message: rawData.error.message }, request };\n    }\n    return { data: rawData, request };\n};\n"]}