{"version":3,"file":"IpfsEmitter.js","sourceRoot":"","sources":["IpfsEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractEmitter } from './AbstractEmitter';\nimport { IpfsConnector, ipfsEvents } from '@akashaproject/ipfs-connector';\nimport { ipfsResponse } from './responses';\nimport channels from '../../channels';\n\nconst peerId = '/ip4/46.101.103.114/tcp/4001/ipfs/QmaztwrFRmRvvKYbAETVtNtdkAmsee4byiasr4RBq9XCtt';\nabstract class IpfsEmitter extends AbstractEmitter {\n\n    public attachEmitters() {\n        this._download()\n            ._catchCorrupted()\n            ._catchFailed()\n            ._catchError()\n            ._started()\n            ._stopped();\n    }\n\n    private _download() {\n        IpfsConnector.getInstance().once(\n            ipfsEvents.DOWNLOAD_STARTED,\n            () => {\n                this.fireEvent(channels.client.ipfs.startService, ipfsResponse({ downloading: true }));\n            }\n        );\n        return this;\n    }\n\n    private _started() {\n        IpfsConnector.getInstance().on(\n            ipfsEvents.SERVICE_STARTED,\n            () => {\n                this.fireEvent(channels.client.ipfs.startService, ipfsResponse({ started: true }));\n                IpfsConnector.getInstance()\n                    .api\n                    .apiClient\n                    .bootstrap\n                    .add(peerId, (err, data) => {})\n            }\n        );\n        return this;\n    }\n\n    private _stopped() {\n        IpfsConnector.getInstance().on(\n            ipfsEvents.SERVICE_STOPPED,\n            () => {\n                this.fireEvent(channels.client.ipfs.stopService, ipfsResponse({ stopped: true }));\n            }\n        );\n        return this;\n    }\n\n    private _catchCorrupted() {\n        IpfsConnector.getInstance().on(\n            ipfsEvents.BINARY_CORRUPTED,\n            (err: Error) => {\n                this.fireEvent(\n                    channels.client.ipfs.startService,\n                    ipfsResponse({}, { message: err.message, fatal: true })\n                );\n            }\n        );\n        return this;\n    }\n\n    private _catchFailed() {\n        IpfsConnector.getInstance().on(\n            ipfsEvents.SERVICE_FAILED,\n            (err: Error) => {\n                this.fireEvent(\n                    channels.client.ipfs.startService,\n                    ipfsResponse({}, { message: err.message, fatal: true })\n                );\n            }\n        );\n        return this;\n    }\n\n    private _catchError() {\n        IpfsConnector.getInstance().on(\n            ipfsEvents.ERROR,\n            (message: string) => {\n                this.fireEvent(\n                    channels.client.ipfs.startService,\n                    ipfsResponse({}, { message })\n                )\n            });\n        return this;\n    }\n}\nexport default IpfsEmitter;\n"]}