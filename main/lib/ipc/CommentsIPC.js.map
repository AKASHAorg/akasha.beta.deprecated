{"version":3,"file":"CommentsIPC.js","sourceRoot":"","sources":["CommentsIPC.ts"],"names":[],"mappings":"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","sourcesContent":["import ModuleEmitter from './event/ModuleEmitter';\nimport channels from '../channels';\nimport {constructed as contracts} from './contracts/index';\nimport { mainResponse } from './event/responses';\nimport { module as userModule } from './modules/auth/index';\nimport WebContents = Electron.WebContents;\n\nclass CommentsIPC extends ModuleEmitter {\n\n    constructor() {\n        super();\n        this.MODULE_NAME = 'comments';\n        this.DEFAULT_MANAGED = ['getScore'];\n    }\n\n    public initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n        this\n            ._publish()\n            ._update()\n            ._upvote()\n            ._downvote()\n            ._getScore()\n            ._manager();\n    }\n\n    private _publish() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].publish,\n            (event: any, data: CommentPublishRequest) => {\n                let response: CommentPublishResponse;\n                contracts.instance\n                    .main\n                    .saveComment(data.address, data.hash, data.gas)\n                    .then((txData: any) => {\n                       return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({tx});\n                    })\n                    .catch((err: Error) => {\n                       response = mainResponse({error: {message: err.message}});\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].publish,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _update() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].update,\n            (event: any, data: CommentUpdateRequest) => {\n                let response: CommentUpdateResponse;\n                contracts.instance\n                    .main\n                    .updateComment(data.address, data.commentId, data.hash, data.gas)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({tx});\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({error: {message: err.message}});\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].update,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _upvote() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].upvote,\n            (event: any, data: CommentVoteRequest) => {\n                let response: CommentVoteResponse;\n                contracts.instance\n                    .main\n                    .upVoteComment(data.address, data.weight, data.commentId, data.gas, data.value)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({tx});\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({error: {message: err.message}});\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].upvote,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _downvote() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].downvote,\n            (event: any, data: CommentVoteRequest) => {\n                let response: CommentVoteResponse;\n                contracts.instance\n                    .main\n                    .downVoteComment(data.address, data.weight, data.commentId, data.gas, data.value)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({tx});\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({error: {message: err.message}});\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].downvote,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _getScore() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getScore,\n            (event: any, data: CommentScoreRequest) => {\n                let response: CommentScoreResponse;\n                contracts.instance\n                    .main\n                    .getScoreOfComment(data.address, data.commentId)\n                    .then((score: number) => {\n                        response = mainResponse({address: data.address, score});\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({error: {message: err.message}});\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getScore,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n}\n\nexport default CommentsIPC;\n"]}