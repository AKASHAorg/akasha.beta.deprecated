{"version":3,"file":"TagsIPC.js","sourceRoot":"","sources":["TagsIPC.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\nimport { constructed as contracts } from './contracts/index';\nimport ModuleEmitter from './event/ModuleEmitter';\nimport channels from '../channels';\nimport { mainResponse } from './event/responses';\nimport { module as userModule } from './modules/auth/index';\nimport WebContents = Electron.WebContents;\n\nclass TagsIPC extends ModuleEmitter {\n\n    constructor() {\n        super();\n        this.MODULE_NAME = 'tags';\n        this.DEFAULT_MANAGED = ['exists'];\n    }\n\n    /**\n     *\n     * @param webContents\n     */\n    public initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n        this\n            ._create()\n            ._exists()\n            ._getTagName()\n            ._getTagId()\n            ._getTagsCreated()\n            ._checkFormat()\n            ._manager();\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _create() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].create,\n            (event: any, data: TagCreateRequest) => {\n                let response: TagCreateResponse;\n                contracts.instance.tags\n                    .add(data.tagName, data.gas)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagName: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].create,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _exists() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].exists,\n            (event: any, data: TagExistsRequest) => {\n                let response: TagExistsResponse;\n                contracts.instance\n                    .tags\n                    .exists(data.tagName)\n                    .then((found: boolean) => {\n                        response = mainResponse({ exists: found });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagName: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].exists,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _getTagName() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getTagName,\n            (event: any, data: TagAtIdRequest) => {\n                let response: TagAtIdResponse;\n                contracts.instance\n                    .tags\n                    .getTagName(data.tagId)\n                    .then((tagName: string) => {\n                        response = mainResponse({ tagName });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagId: data.tagId }\n                            }\n\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getTagName,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _getTagId() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getTagId,\n            (event: any, data: TagAtNameRequest) => {\n                let response: TagAtNameResponse;\n                contracts.instance\n                    .tags\n                    .getTagId(data.tagName)\n                    .then((tagId: string) => {\n                        response = mainResponse({ tagId });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagName: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getTagId,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getTagsCreated() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getTagsCreated,\n            (event: any, data: GenericFromEventRequest) => {\n                let response: GenericFromEventResponse;\n                contracts\n                    .instance\n                    .tags\n                    .getTagsCreated(data)\n                    .then((collection) => {\n                        response = mainResponse({ collection });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getTagsCreated,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _checkFormat(){\n        this.registerListener(\n            channels.server[this.MODULE_NAME].checkFormat,\n            (event: any, data: TagAtNameRequest) => {\n                let response: any;\n                contracts\n                    .instance\n                    .tags\n                    .checkFormat(data.tagName)\n                    .then((status) => {\n                        response = mainResponse({ tagName: data.tagName, status});\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { address: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].checkFormat,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n}\n\nexport default TagsIPC;\n"]}