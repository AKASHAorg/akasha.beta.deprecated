{"version":3,"file":"TagsIPC.js","sourceRoot":"","sources":["TagsIPC.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\nimport { constructed as contracts } from './contracts/index';\nimport ModuleEmitter from './event/ModuleEmitter';\nimport channels from '../channels';\nimport { mainResponse } from './event/responses';\nimport { module as userModule } from './modules/auth/index';\nimport WebContents = Electron.WebContents;\n\nclass TagsIPC extends ModuleEmitter {\n\n    constructor() {\n        super();\n        this.MODULE_NAME = 'tags';\n        this.DEFAULT_MANAGED = ['exists'];\n    }\n\n    /**\n     *\n     * @param webContents\n     */\n    public initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n        this\n            ._create()\n            ._exists()\n            ._getTagAt()\n            ._getTagId()\n            ._getSubPosition()\n            ._isSubscribed()\n            ._subscribe()\n            ._unsubscribe()\n            ._getTagsFrom()\n            ._getCreateError()\n            ._getTagsCreated()\n            ._getIndexTagError()\n            ._getIndexedTag()\n            ._manager();\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _create() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].create,\n            (event: any, data: TagCreateRequest) => {\n                let response: TagCreateResponse;\n                contracts.instance.tags\n                    .add(data.tagName, data.gas)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagName: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].create,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _exists() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].exists,\n            (event: any, data: TagExistsRequest) => {\n                let response: TagExistsResponse;\n                contracts.instance\n                    .tags\n                    .exists(data.tagName)\n                    .then((found: boolean) => {\n                        response = mainResponse({ exists: found });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagName: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].exists,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _getTagAt() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getTagAt,\n            (event: any, data: TagAtIdRequest) => {\n                let response: TagAtIdResponse;\n                contracts.instance\n                    .tags\n                    .getTagAt(data.tagId)\n                    .then((tagName: string) => {\n                        response = mainResponse({ tagName });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagId: data.tagId }\n                            }\n\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getTagAt,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _getTagId() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getTagId,\n            (event: any, data: TagAtNameRequest) => {\n                let response: TagAtNameResponse;\n                contracts.instance\n                    .tags\n                    .getTagId(data.tagName)\n                    .then((tagId: string) => {\n                        response = mainResponse({ tagId });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagName: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getTagId,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    /**\n     *\n     * @private\n     */\n    private _subscribe() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].subscribe,\n            (event: any, data: TagSubscribeRequest) => {\n                let response: TagSubscribeResponse;\n                contracts.instance\n                    .indexedTags\n                    .subscribe(data.tagName, data.gas)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagName: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].subscribe,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TagsIPC}\n     * @private\n     */\n    private _unsubscribe() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].unsubscribe,\n            (event: any, data: TagUnSubscribeRequest) => {\n                let response: TagUnSubscribeResponse;\n                contracts.instance\n                    .indexedTags\n                    .unsubscribe(data.tagName, data.subPosition, data.gas)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagName: data.tagName }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].unsubscribe,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getSubPosition() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getSubPosition,\n            (event: any, data: TagGetSubPositionRequest) => {\n                let response: TagGetSubPositionResponse;\n                contracts.instance\n                    .indexedTags\n                    .getSubPosition(data.address, data.tagId)\n                    .then((position: string) => {\n                        response = mainResponse({ position });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { tagId: data.tagId, address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getSubPosition,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _isSubscribed() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].isSubscribed,\n            (event: any, data: TagIsSubscribedRequest) => {\n                let response: TagIsSubscribedResponse;\n                contracts.instance\n                    .indexedTags\n                    .isSubscribed(data.address, data.tagId)\n                    .then((subscribed: boolean) => {\n                        response = mainResponse({ subscribed });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { address: data.address, tagId: data.tagId }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].isSubscribed,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _getTagsFrom() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getTagsFrom,\n            (event: any, data: TagsFromToRequest) => {\n                let response: TagsFromToResponse;\n                contracts.instance\n                    .tags\n                    .getTagsCount()\n                    .then((count) => {\n                        const tags = [];\n                        const start = (data.from) ? data.from : 0;\n                        const stop = (data.to) ? (data.to < count) ? data.to : count : count;\n                        for (let i = start; i < stop; i++) {\n                            tags.push(\n                                contracts.instance\n                                    .tags\n                                    .getTagAt(i)\n                            )\n                        }\n                        return Promise.all(tags);\n                    })\n                    .then((tags) => {\n                        response = mainResponse({ tags, from: data.from, to: data.to })\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: data.from\n                            }\n                        })\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getTagsFrom,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getCreateError() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getCreateError,\n            (event: any, data: GenericErrorEventRequest) => {\n                let response: GenericErrorEventResponse;\n                contracts\n                    .instance\n                    .tags\n                    .getCreateError(data)\n                    .then((events) => {\n                        response = mainResponse({ events });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getCreateError,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n\n    private _getTagsCreated() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getTagsCreated,\n            (event: any, data: GenericFromEventRequest) => {\n                let response: GenericFromEventResponse;\n                contracts\n                    .instance\n                    .tags\n                    .getTagsCreated(data)\n                    .then((collection) => {\n                        response = mainResponse({ collection });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getTagsCreated,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getIndexTagError() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getIndexTagError,\n            (event: any, data: GenericErrorEventRequest) => {\n                let response: GenericErrorEventResponse;\n                contracts\n                    .instance\n                    .indexedTags\n                    .getIndexTagError(data)\n                    .then((events) => {\n                        response = mainResponse({ events });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getIndexTagError,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getIndexedTag() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getIndexedTag,\n            (event: any, data: GenericFromEventRequest) => {\n                let response: GenericFromEventResponse;\n                contracts\n                    .instance\n                    .indexedTags\n                    .getIndexedTag(data)\n                    .then((events) => {\n                        response = mainResponse({ events });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getIndexedTag,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n}\n\nexport default TagsIPC;\n"]}