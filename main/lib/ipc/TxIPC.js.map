{"version":3,"file":"TxIPC.js","sourceRoot":"","sources":["TxIPC.ts"],"names":[],"mappings":";;AAAA,kEAAqF;AACrF,yDAAkD;AAClD,0CAAmC;AACnC,iDAAiD;AAGjD,WAAY,SAAQ,uBAAa;IAC7B;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,eAAe,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAEM,aAAa,CAAC,WAAwB;QACzC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,EAAE;aACb,YAAY,EAAE;aACd,QAAQ,EAAE,CAAC;IACpB,CAAC;IAEM,cAAc;QACjB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,WAAW;QACf,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,EAC5C,CAAC,KAAU,EAAE,IAAyB;YAClC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI;gBACd,2BAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YACH,2BAAU,CAAC,YAAY,EAAE,CAAC;YAC1B,MAAM,QAAQ,GAAuB,wBAAY,CAAC,EAAE,QAAQ,EAAE,2BAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrF,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,EAC5C,QAAQ,EACR,KAAK,CACR,CAAC;QACN,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,YAAY;QAChB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,EAC3C,CAAC,KAAU,EAAE,IAAsB;YAC/B,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,2BAAU,CAAC,YAAY,EAAE,GAAG,2BAAU,CAAC,WAAW,EAAE,CAAC;YACpE,MAAM,QAAQ,GAAsB,wBAAY,CAAC,EAAE,QAAQ,EAAE,2BAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;YACpF,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,EAC3C,QAAQ,EACR,KAAK,CACR,CAAC;QACN,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,UAAU;QACd,8BAAa,CAAC,WAAW,EAAE,CAAC,EAAE,CAC1B,0BAAS,CAAC,QAAQ,EAClB,CAAC,EAAO;YACJ,MAAM,QAAQ,GAAsB,wBAAY,CAAC;gBAC7C,KAAK,EAAE,EAAE,CAAC,eAAe;gBACzB,WAAW,EAAE,EAAE,CAAC,WAAW;gBAC3B,iBAAiB,EAAE,EAAE,CAAC,iBAAiB;gBACvC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC7B,QAAQ,EAAE,2BAAU,CAAC,QAAQ;aAChC,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,EAC3C,QAAQ,CACX,CAAC;QACN,CAAC,CACJ,CAAC;IACN,CAAC;CACJ;AAED,kBAAe,KAAK,CAAC","sourcesContent":["import { gethHelper, CONSTANTS, GethConnector } from '@akashaproject/geth-connector';\nimport ModuleEmitter from './event/ModuleEmitter';\nimport channels from '../channels';\nimport { mainResponse } from './event/responses';\nimport WebContents = Electron.WebContents;\n\nclass TxIPC extends ModuleEmitter {\n    constructor() {\n        super();\n        this.MODULE_NAME = 'tx';\n        this.DEFAULT_MANAGED = ['addToQueue', 'emitMined'];\n        this.attachEmitters();\n    }\n\n    public initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n        this._addToQueue()\n            ._listenMined()\n            ._manager();\n    }\n\n    public attachEmitters() {\n        this._emitMined();\n        return true;\n    }\n\n    private _addToQueue() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].addToQueue,\n            (event: any, data: AddToQueueRequest[]) => {\n                data.forEach((hash) => {\n                    gethHelper.addTxToWatch(hash.tx, false);\n                });\n                gethHelper.startTxWatch();\n                const response: AddToQueueResponse = mainResponse({ watching: gethHelper.watching });\n                this.fireEvent(\n                    channels.client[this.MODULE_NAME].addToQueue,\n                    response,\n                    event\n                );\n            });\n        return this;\n    }\n\n    private _listenMined() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].emitMined,\n            (event: any, data: EmitMinedRequest) => {\n                (data.watch) ? gethHelper.startTxWatch() : gethHelper.stopTxWatch();\n                const response: EmitMinedResponse = mainResponse({ watching: gethHelper.watching });\n                this.fireEvent(\n                    channels.client[this.MODULE_NAME].emitMined,\n                    response,\n                    event\n                );\n            });\n        return this;\n    }\n\n    private _emitMined() {\n        GethConnector.getInstance().on(\n            CONSTANTS.TX_MINED,\n            (tx: any) => {\n                const response: EmitMinedResponse = mainResponse({\n                    mined: tx.transactionHash,\n                    blockNumber: tx.blockNumber,\n                    cumulativeGasUsed: tx.cumulativeGasUsed,\n                    hasEvents: !!(tx.logs.length),\n                    watching: gethHelper.watching\n                });\n                this.fireEvent(\n                    channels.client[this.MODULE_NAME].emitMined,\n                    response\n                );\n            }\n        );\n    }\n}\n\nexport default TxIPC;\n"]}