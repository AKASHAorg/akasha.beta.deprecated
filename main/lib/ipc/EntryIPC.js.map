{"version":3,"file":"EntryIPC.js","sourceRoot":"","sources":["EntryIPC.ts"],"names":[],"mappings":"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","sourcesContent":["import ModuleEmitter from './event/ModuleEmitter';\nimport channels from '../channels';\nimport { constructed as contracts } from './contracts/index';\nimport { mainResponse } from './event/responses';\nimport { module as userModule } from './modules/auth/index';\nimport entry from './modules/entry/index';\nimport WebContents = Electron.WebContents;\n\nclass EntryIPC extends ModuleEmitter {\n\n    constructor() {\n        super();\n        this.MODULE_NAME = 'entry';\n        this.DEFAULT_MANAGED = ['getVoteEndDate', 'getScore', 'getEntry'];\n    }\n\n    public initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n        this._initMethods(entry);\n        this\n            ._downvote()\n            ._upvote()\n            ._isOpenedToVotes()\n            ._getVoteOf()\n            ._getVoteEndDate()\n            ._getScore()\n            ._getEntriesCreated()\n            ._getVotesEvent()\n            ._manager();\n    }\n\n    private _upvote() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].upvote,\n            (event: any, data: EntryUpvoteRequest) => {\n                let response: EntryUpvoteResponse;\n                contracts.instance\n                    .main\n                    .upVoteEntry(data.address, data.weight, data.gas, data.value)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].upvote,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _downvote() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].downvote,\n            (event: any, data: EntryUpvoteRequest) => {\n                let response: EntryUpvoteResponse;\n                contracts.instance\n                    .main\n                    .downVoteEntry(data.address, data.weight, data.gas, data.value)\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, data.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].downvote,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _isOpenedToVotes() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].isOpenedToVotes,\n            (event: any, data: EntryOpenedVotesRequest) => {\n                let response: EntryOpenedVotesResponse;\n                contracts.instance\n                    .main\n                    .openedToVotes(data.address)\n                    .then((status: boolean) => {\n                        response = mainResponse({ address: data.address, voting: status });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].isOpenedToVotes,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _getVoteOf() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getVoteOf,\n            (event: any, data: EntryVoteofRequest) => {\n                let response: EntryVoteofResponse;\n                contracts.instance\n                    .main\n                    .getVoteOf(data.profile, data.address)\n                    .then((weight: number) => {\n                        response = mainResponse({ profile: data.profile, weight });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { address: data.address, profile: data.profile }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getVoteOf,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _getVoteEndDate() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getVoteEndDate,\n            (event: any, data: EntryVoteDateRequest) => {\n                let response: EntryVoteDateResponse;\n                contracts.instance\n                    .main\n                    .voteEndDate(data.address)\n                    .then((endDate: number) => {\n                        response = mainResponse({ address: data.address, date: endDate });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getVoteEndDate,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _getScore() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getScore,\n            (event: any, data: EntryScoreRequest) => {\n                let response: EntryScoreResponse;\n                contracts.instance\n                    .main\n                    .getScoreOfEntry(data.address)\n                    .then((score: number) => {\n                        response = mainResponse({ address: data.address, score });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getScore,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _getEntriesCreated() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getEntriesCreated,\n            (event: any, data: GenericFromEventRequest) => {\n                let response: GenericFromEventResponse;\n                contracts.instance\n                    .main\n                    .getEntriesCreatedEvent(data)\n                    .then((collection: any) => {\n                        response = mainResponse({ collection });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getEntriesCreated,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _getVotesEvent() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getVotesEvent,\n            (event: any, data: GenericFromEventRequest) => {\n                let response: GenericFromEventResponse;\n                contracts.instance\n                    .main\n                    .getVotesOfEvent(data)\n                    .then((collection: any) => {\n                        response = mainResponse({ collection });\n                    })\n                    .catch((err: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: err.message\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getVotesEvent,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n}\n\nexport default EntryIPC;\n"]}