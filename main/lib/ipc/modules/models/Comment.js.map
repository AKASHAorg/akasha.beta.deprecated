{"version":3,"file":"Comment.js","sourceRoot":"","sources":["Comment.ts"],"names":[],"mappings":"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","sourcesContent":["import { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport { comments } from './records';\n\nclass Comment implements MediaComponent {\n    hash: string;\n    id: string;\n\n    create(data: CommentModel) {\n        const date  = (new Date()).toJSON();\n        const constructed = {\n            content: data.content,\n            date,\n            parent: data.parent\n        };\n        return IpfsConnector.getInstance().api\n            .add(constructed)\n            .then((hash: string) => {\n                this.load(hash);\n                return this.hash;\n            })\n    }\n\n    load(hash: string) {\n        this.hash = hash;\n        return this;\n    }\n\n    read() {\n        if (!this.hash) {\n            return Promise.reject('Must set hash property first');\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((content: JSON | Buffer) => content);\n    }\n\n    /**\n     *\n     * @param setData\n     * @returns {any}\n     */\n    update(setData: any) {\n        if (!this.hash) {\n            return Promise.reject('Must set hash property first');\n        }\n        return IpfsConnector.getInstance().api\n            .updateObject(this.hash, setData)\n            .then((hash: string) => {\n                this.load(hash);\n                return this.hash;\n            })\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    getShortContent() {\n        if (comments.records.getShort(this.hash)) {\n            return Promise.resolve(comments.records.getShort(this.hash));\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((data) => {\n                comments.records.setShort(this.hash, data);\n                return data;\n            })\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    getFullContent() {\n        if (comments.records.getFull(this.hash)) {\n            return Promise.resolve(comments.records.getFull(this.hash));\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((data) => {\n                comments.records.setFull(this.hash, data);\n                return data;\n            })\n    }\n}\nexport default Comment;\n"]}