{"version":3,"file":"Entry.js","sourceRoot":"","sources":["Entry.ts"],"names":[],"mappings":";AAAA,iCAA8B,+BAA+B,CAAC,CAAA;AAE9D;IAUI,MAAM,CAAC,OAAW,EAAE,IAAW;QAC3B,MAAM,WAAW,GAAG;YAChB,OAAO;YACP,IAAI;SACP,CAAC;QACF,MAAM,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,GAAG;aACjC,GAAG,CAAC,WAAW,CAAC;aAChB,IAAI,CAAC,CAAC,IAAY;YACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,CAAC,CAAC,CAAA;IACV,CAAC;IAOD,IAAI,CAAC,IAAY;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAMD,IAAI;QACA,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,GAAG;aACjC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;aACd,IAAI,CAAC,CAAC,OAAsB,KAAK,OAAO,CAAC,CAAC;IACnD,CAAC;IAOD,MAAM,CAAC,OAAY;QACf,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,GAAG;aACjC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;aAChC,IAAI,CAAC,CAAC,IAAY;YACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,CAAC,CAAC,CAAA;IACV,CAAC;IAMD,eAAe;QACX,MAAM,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,GAAG;aACjC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;aACd,IAAI,CAAC,CAAC,IAAI;YACP,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAA;IACV,CAAC;IAMD,cAAc;QACV,MAAM,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,GAAG;aACjC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;aACd,IAAI,CAAC,CAAC,IAAI;YACP,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAA;IACV,CAAC;AACL,CAAC;AAED;kBAAe,KAAK,CAAC","sourcesContent":["import { IpfsConnector } from '@akashaproject/ipfs-connector';\n\nclass Entry implements MediaComponent {\n    hash: string;\n    id: string;\n\n    /**\n     *\n     * @param content\n     * @param tags\n     * @returns {any}\n     */\n    create(content:any, tags: any[]){\n        const constructed = {\n            content,\n            tags\n        };\n        return IpfsConnector.getInstance().api\n            .add(constructed)\n            .then((hash: string) => {\n                this.load(hash);\n                return this.hash;\n            })\n    }\n\n    /**\n     *\n     * @param hash\n     * @returns {Entry}\n     */\n    load(hash: string) {\n        this.hash = hash;\n        return this;\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    read() {\n        if(!this.hash){\n            return Promise.reject('Must set hash property first');\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((content: JSON | Buffer) => content);\n    }\n\n    /**\n     *\n     * @param setData\n     * @returns {any}\n     */\n    update(setData: any) {\n        if(!this.hash){\n            return Promise.reject('Must set hash property first');\n        }\n        return IpfsConnector.getInstance().api\n            .updateObject(this.hash, setData)\n            .then((hash: string) => {\n                this.load(hash);\n                return this.hash;\n            })\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    getShortContent() {\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((data) => {\n                return data;\n            })\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    getFullContent() {\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((data) => {\n                return data;\n            })\n    }\n}\n\nexport default Entry;\n"]}