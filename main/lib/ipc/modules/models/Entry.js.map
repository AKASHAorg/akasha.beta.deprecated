{"version":3,"file":"Entry.js","sourceRoot":"","sources":["Entry.ts"],"names":[],"mappings":"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","sourcesContent":["import { IpfsConnector, IpfsApiHelper } from '@akashaproject/ipfs-connector';\nimport * as Promise from 'bluebird';\nimport { isEmpty } from 'ramda';\nimport { entries } from './records';\n\nexport const DRAFT_BLOCKS = 'blocks';\nexport const ATOMIC_TYPE = 'atomic';\nexport const IMAGE_TYPE = 'image';\nclass IpfsEntry {\n    hash: string;\n    id: string;\n    draft: any;\n    title: string;\n    excerpt: any;\n    licence: string;\n    featuredImage: any;\n    tags: any[];\n\n    /**\n     *\n     * @param content\n     * @param tags\n     * @returns {any}\n     */\n    create(content: any, tags: any[]) {\n        const ipfsApiRequests = [];\n        this.draft = Object.assign({}, content.draft);\n        content.draft = null;\n        this.title = content.title;\n        this.licence = content.licence;\n        this.tags = tags;\n        ipfsApiRequests.push(\n            IpfsConnector.getInstance().api\n                .constructObjLink(content.featuredImage, true)\n                .then((obj) => this.featuredImage = obj));\n\n        ipfsApiRequests.push(\n            IpfsConnector.getInstance().api\n                .constructObjLink(content.excerpt)\n                .then((obj) => this.excerpt = obj));\n\n        return Promise.all(ipfsApiRequests).then(() => this._uploadMediaDraft()).then((draft) => {\n            return IpfsConnector.getInstance().api\n                .add({\n                    draft: draft,\n                    excerpt: this.excerpt,\n                    featuredImage: this.featuredImage,\n                    licence: this.licence,\n                    tags: this.tags,\n                    title: this.title\n                })\n        });\n    }\n\n    private _filterForImages() {\n        const blockIndex = [];\n        const imageEntities = this.draft[DRAFT_BLOCKS].filter((element, index) => {\n            if (element.type !== ATOMIC_TYPE || isEmpty(element.data.type)) {\n                return false;\n            }\n            if (element.data.type === IMAGE_TYPE) {\n                blockIndex.push(index);\n                return true;\n            }\n            return false;\n        });\n\n        return { blockIndex, imageEntities };\n    }\n\n    private _uploadMediaDraft() {\n        /**\n         * filter draft object for images and upload them to ipfs\n         */\n        const uploads = [];\n        const { imageEntities, blockIndex } = this._filterForImages();\n\n        imageEntities.forEach((element, index) => {\n            const keys = Object.keys(element.data.files).sort();\n            keys.forEach((imSize) => {\n                if (!Buffer.isBuffer(element.data.files[imSize].src)) {\n                    return false;\n                }\n                uploads.push(\n                    IpfsConnector.getInstance().api\n                        .add(element.data.files[imSize].src, true)\n                        .then(\n                            (obj) => {\n                                this.draft[DRAFT_BLOCKS][blockIndex[index]].data.files[imSize].src = obj;\n                            }\n                        )\n                );\n            });\n        });\n        return Promise.all(uploads).then(() => {\n            return IpfsConnector.getInstance().api.constructObjLink(Buffer.from(JSON.stringify(this.draft)), true);\n        });\n    }\n\n    private _getMediaDraft() {\n        /**\n         * filter draft object for images and dowload them from ipfs\n         * this will be used for serving Uin8array images\n         */\n    }\n\n    /**\n     *\n     * @param hash\n     * @returns {Entry}\n     */\n    load(hash: string) {\n        this.hash = hash;\n        return this;\n    }\n\n    /**\n     *\n     * @param setData\n     * @returns {any}\n     */\n    update(setData: any) {\n        if (!this.hash) {\n            return Promise.reject('Must set hash property first');\n        }\n        return IpfsConnector.getInstance().api\n            .updateObject(this.hash, setData)\n            .then((hash: string) => {\n                this.load(hash);\n                return this.hash;\n            })\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    getShortContent() {\n        if (entries.getShort(this.hash)) {\n            return Promise.resolve(entries.getShort(this.hash));\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((data) => {\n                return IpfsConnector.getInstance().api.resolve(data.excerpt[IpfsApiHelper.LINK_SYMBOL])\n                    .then((excerpt) => {\n                        data.excerpt = excerpt;\n                        data.featuredImage = data.featuredImage[IpfsApiHelper.LINK_SYMBOL];\n                        entries.setShort(this.hash, data);\n                        return data;\n                    });\n            })\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    getFullContent() {\n        if (entries.getFull(this.hash)) {\n            return Promise.resolve(entries.getFull(this.hash));\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((data) => {\n                return IpfsConnector.getInstance().api.resolve(data.draft[IpfsApiHelper.LINK_SYMBOL])\n                    .then((draft) => {\n                        data.draft = draft.toString();\n                        entries.setFull(this.hash, data);\n                        return data;\n                    });\n            })\n    }\n}\n\nexport default IpfsEntry;\n"]}