{"version":3,"file":"Entry.js","sourceRoot":"","sources":["Entry.ts"],"names":[],"mappings":"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","sourcesContent":["import { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport { entries } from './records';\n\nclass Entry implements MediaComponent {\n    hash: string;\n    id: string;\n\n    /**\n     *\n     * @param content\n     * @param tags\n     * @returns {any}\n     */\n    create(content: any, tags: any[]) {\n        const date = (new Date()).toJSON();\n        const {\n            draft,\n            title,\n            excerpt,\n            featuredImage,\n            licence,\n            author\n        } = content;\n        const constructed = {\n            draft,\n            title,\n            excerpt,\n            featuredImage,\n            licence,\n            author,\n            tags,\n            date\n        };\n        return IpfsConnector.getInstance().api\n            .add(constructed)\n            .then((hash: string) => {\n                this.load(hash);\n                return this.hash;\n            })\n    }\n\n    private _uploadMediaDraft() {\n        /**\n         * filter draft object for images and upload them to ipfs\n         */\n    }\n\n    private _getMediaDraft() {\n        /**\n         * filter draft object for images and dowload them from ipfs\n         * this will be used for serving Uin8array images\n         */\n    }\n\n    /**\n     *\n     * @param hash\n     * @returns {Entry}\n     */\n    load(hash: string) {\n        this.hash = hash;\n        return this;\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    read() {\n        if (!this.hash) {\n            return Promise.reject('Must set hash property first');\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((content: JSON | Buffer) => content);\n    }\n\n    /**\n     *\n     * @param setData\n     * @returns {any}\n     */\n    update(setData: any) {\n        if (!this.hash) {\n            return Promise.reject('Must set hash property first');\n        }\n        return IpfsConnector.getInstance().api\n            .updateObject(this.hash, setData)\n            .then((hash: string) => {\n                this.load(hash);\n                return this.hash;\n            })\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    getShortContent() {\n        if (entries.getShort(this.hash)) {\n            return Promise.resolve(entries.getShort(this.hash));\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((data) => {\n                entries.setShort(this.hash, data);\n                return data;\n            })\n    }\n\n    /**\n     *\n     * @returns {any}\n     */\n    getFullContent() {\n        if (entries.getFull(this.hash)) {\n            return Promise.resolve(entries.getFull(this.hash));\n        }\n        return IpfsConnector.getInstance().api\n            .get(this.hash)\n            .then((data) => {\n                entries.setFull(this.hash, data);\n                return data;\n            })\n    }\n}\n\nexport default Entry;\n"]}