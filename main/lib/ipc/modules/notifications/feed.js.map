{"version":3,"file":"feed.js","sourceRoot":"","sources":["feed.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport { filter } from './set-filter';\nimport { GethConnector } from '@akashaproject/geth-connector';\n\nlet entries;\nlet comments;\nlet votes;\nconst eventTypes = {\n    VOTE: 'vote',\n    COMMENT: 'comment',\n    PUBLISH: 'publish'\n};\n/**\n * Get total number of your follows\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: { stop?: boolean }, cb) {\n    if (data.stop && entries) {\n        entries.stopWatching(() => {\n            entries = null;\n        });\n        comments.stopWatching(() => {\n            comments = null;\n        });\n        votes.stopWatching(() => {\n            votes = null;\n        });\n        return { running: false };\n    }\n\n    if (entries) {\n        return { running: true, warn: true };\n    }\n\n    const filterBlock = { fromBlock: filter.getBlockNr(), toBlock: 'latest' };\n    entries = contracts.instance.entries.contract.Publish({}, filterBlock);\n    comments = contracts.instance.comments.contract.Commented({}, filterBlock);\n    votes = contracts.instance.votes.contract.Vote({}, filterBlock);\n\n    entries.watch((err, entry) => {\n        if (filter.hasAddress(entry.args.author)) {\n            cb(err, {\n                type: eventTypes.PUBLISH,\n                profileAddress: entry.args.author,\n                entryId: (entry.args.entryId).toString(),\n                blockNumber: entry.blockNumber,\n                tag: GethConnector.getInstance().web3.toUtf8(entry.args.tag)\n            });\n        }\n    });\n\n    comments.watch((err, comment) => {\n        if (filter.hasAddress(comment.args.profile)) {\n            cb(err, {\n                type: eventTypes.COMMENT,\n                profileAddress: comment.args.profile,\n                entryId: (comment.args.entryId).toString(),\n                blockNumber: comment.blockNumber,\n                commentId: (comment.args.commentId).toString()\n            });\n        }\n    });\n\n    votes.watch((err, vote) => {\n        if (filter.hasAddress(vote.args.profile)) {\n            cb(err, {\n                type: eventTypes.VOTE,\n                profileAddress: vote.args.profile,\n                entryId: (vote.args.entry).toString(),\n                blockNumber: vote.blockNumber,\n                weight: (vote.args.weight).toNumber()\n            });\n        }\n    });\n    return { running: true }\n});\n\nexport default { execute, name: 'feed' };\n"]}