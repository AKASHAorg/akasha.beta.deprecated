{"version":3,"file":"feed.js","sourceRoot":"","sources":["feed.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AAGpC,IAAI,OAAO,CAAC;AACZ,IAAI,QAAQ,CAAC;AACb,IAAI,KAAK,CAAC;AAKV,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAwB;IAChE,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC;QACtB,OAAO,CAAC,YAAY,CAAC,QAAQ,OAAO,GAAG,IAAI,CAAC,CAAA,CAAC,CAAC,CAAC;QAC/C,QAAQ,CAAC,YAAY,CAAC,QAAQ,QAAQ,GAAG,IAAI,CAAC,CAAA,CAAC,CAAC,CAAC;QACjD,KAAK,CAAC,YAAY,CAAC,QAAQ,KAAK,GAAG,IAAI,CAAC,CAAA,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,MAAM,CAAC,EAAG,CAAA;AACd,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\n//import { constructed as contracts } from '../../contracts/index';\n\nlet entries;\nlet comments;\nlet votes;\n/**\n * Get total number of your follows\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: { stop?: boolean }) {\n    if(data.stop && entries) {\n        entries.stopWatching(() => { entries = null;});\n        comments.stopWatching(() => { comments = null;});\n        votes.stopWatching(() => { votes = null;});\n    }\n    //const count = yield contracts.instance.feed.getFollowingCount(data.akashaId);\n    return { }\n});\n\nexport default { execute, name: 'getFollowingCount' };\n"]}