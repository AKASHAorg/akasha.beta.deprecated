{"version":3,"file":"set-filter.js","sourceRoot":"","sources":["set-filter.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,kCAA2B,6BAA6B,CAAC,CAAA;AACzD,iCAA6B,2BAA2B,CAAC,CAAA;AACzD,iCAA8B,+BAA+B,CAAC,CAAA;AAEjD,cAAM,GAAG;IAClB,QAAQ,EAAE,EAAE;IACZ,QAAQ,EAAE,CAAC;IACX,eAAe,EAAE,EAAE;IACnB,UAAU,EAAE,CAAC,GAAW;QACpB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACxB,CAAC;IACD,UAAU,EAAE,CAAC,SAAS;QAClB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC9B,CAAC;IACD,UAAU,EAAE,CAAC,QAAQ;QACjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IACD,UAAU,EAAE;QACR,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IACD,YAAY,EAAE,CAAC,OAAO;QAClB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;IACnC,CAAC;IACD,YAAY,EAAE;QACV,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;CACJ,CAAC;AAMF,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAA6C;IACrF,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,MAAM,8BAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC;IACjH,MAAM,SAAS,GAAG,MAAM,yBAAc,CAAC,OAAO,EAAE,CAAC;IACjD,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAI,IAAI,CAAC;IACT,cAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;QACxB,IAAI,GAAG,MAAM,wBAAgB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;IACpC,CAAC;IACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,cAAc;QACjC,MAAM,CAAC,cAAc,CAAC,YAAY,EAAE,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,cAAc,CAAC,YAAY,EAAE,SAAS,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/E,cAAM,CAAC,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;IAC9C,cAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IAChC,YAAY,GAAG,IAAI,CAAC;IACpB,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;AACnD,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport currentProfile from '../registry/current-profile';\nimport getFollowingList from '../profile/following-list';\nimport { GethConnector } from '@akashaproject/geth-connector';\n\nexport const filter = {\n    _address: {},\n    _blockNr: 0,\n    _currentAddress: '',\n    setBlockNr: (bNr: number) => {\n        this._blockNr = bNr;\n    },\n    setAddress: (addresses) => {\n        this._address = addresses;\n    },\n    hasAddress: (qAddress) => {\n        return this._address.hasOwnProperty(qAddress);\n    },\n    getBlockNr: () => {\n        return this._blockNr;\n    },\n    setMyAddress: (address) => {\n        this._currentAddress = address;\n    },\n    getMyAddress: () => {\n        return this._currentAddress;\n    }\n};\n/**\n * Set which profiles to watch for changes\n * @param data\n * @returns {Bluebird<{done: boolean, watching: any}>}\n */\nconst execute = Promise.coroutine(function*(data: { profiles: string[], blockNr?: number}) {\n    const blockNr = (data.blockNr) ? data.blockNr : yield GethConnector.getInstance().web3.eth.getBlockNumberAsync();\n    const myProfile = yield currentProfile.execute();\n    let objectFilter = {};\n    let temp;\n    filter.setBlockNr(blockNr);\n    if (!data.profiles.length) {\n        temp = yield getFollowingList.execute({ akashaId: myProfile.akashaId });\n        data.profiles = temp.collection;\n    }\n    data.profiles.forEach((profileAddress) => {\n        Object.defineProperty(objectFilter, profileAddress, { value: true });\n    });\n    Object.defineProperty(objectFilter, myProfile.profileAddress, { value: true });\n    filter.setMyAddress(myProfile.profileAddress);\n    filter.setAddress(objectFilter);\n    objectFilter = null;\n    return { done: true, watching: data.profiles };\n});\n\nexport default { execute, name: 'setFilter' };\n"]}