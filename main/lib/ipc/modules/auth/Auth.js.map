{"version":3,"file":"Auth.js","sourceRoot":"","sources":["Auth.ts"],"names":[],"mappings":"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","sourcesContent":["import { createCipher, createDecipher, randomBytes, Decipher, Cipher } from 'crypto';\nimport { GethConnector, gethHelper } from '@akashaproject/geth-connector';\nimport { fromRpcSig, ecrecover, toBuffer, bufferToHex, pubToAddress, unpad } from 'ethereumjs-util';\nimport { constructed as contracts } from '../../contracts/index';\nimport * as Promise from 'bluebird';\n\nconst randomBytesAsync = Promise.promisify(randomBytes);\nexport default class Auth {\n    private _encrypted: Buffer;\n    private _decipher: Decipher;\n    private _cipher: Cipher;\n    private _session: {address: string, expiration: Date, vrs: {v: string, r: string, s: string}};\n\n    /**\n     *\n     * @param pass\n     * @returns {Bluebird<string>|PromiseLike<string>|Thenable<string>|Promise<string>}\n     */\n    public generateKey(pass: any) {\n        try {\n            const transformed = Buffer.from(pass).toString('utf8');\n            return GethConnector.getInstance()\n                .web3\n                .personal\n                .newAccountAsync(transformed)\n                .then((address: string) => {\n                    return address;\n                });\n        } catch (err) {\n            return Promise.reject(err);\n        }\n\n    }\n\n    /**\n     *\n     * @returns {PromiseLike<boolean>|Promise<boolean>|Thenable<boolean>|Bluebird<boolean>}\n     * @private\n     */\n    private _generateRandom() {\n        return randomBytesAsync(64).then((buff: Buffer) => {\n            this._cipher = createCipher('aes-256-ctr', buff.toString('hex'));\n            this._decipher = createDecipher('aes-256-ctr', buff.toString('hex'));\n            return true;\n        });\n    }\n\n    /**\n     *\n     * @param key\n     * @returns {Auth}\n     * @private\n     */\n    private _encrypt(key: any) {\n        const keyTr = Buffer.from(key);\n        return this._generateRandom().then(() => {\n            this._encrypted = Buffer.concat([this._cipher.update(keyTr), this._cipher.final()]);\n            return true;\n        });\n    }\n\n    /**\n     *\n     * @returns {Buffer}\n     * @private\n     */\n    private _read(token: any) {\n        // until geth will handle properly eth_sign ... \"\\x19Ethereum Signed Message:\\n\"  + len(message)\n        /*        if (!this.isLogged(token)) {\n         throw new Error('Token is not valid');\n         }*/\n        const result = Buffer.concat([this._decipher.update(this._encrypted), this._decipher.final()]);\n        this._encrypt(result);\n        return result;\n    }\n\n\n    /**\n     *\n     * @param acc\n     * @param pass\n     * @param timer\n     * @param registering\n     * @returns {any}\n     */\n    public login(acc: string, pass: any | Uint8Array, timer: number = 0, registering = false) {\n\n        return contracts.instance\n            .registry\n            .getByAddress(acc)\n            .then((address: string) => {\n                if (!unpad(address) && !registering) {\n                    throw new Error(`eth key: ${acc} has no profile attached`);\n                }\n                return gethHelper.hasKey(acc);\n            })\n            .then((found) => {\n                if (!found) {\n                    throw new Error(`local key for ${acc} not found`);\n                }\n                // temporary until personal_sign is shipped\n                // follow here https://github.com/ethereum/go-ethereum/pull/2940\n                // @TODO: migrate to personal_sign when available\n                return this._encrypt(pass);\n            })\n            .then(() => {\n                return GethConnector.getInstance()\n                    .web3\n                    .personal\n                    .unlockAccountAsync(acc, Buffer.from(pass).toString('utf8'), 1000);\n            })\n            .then((unlocked: boolean) => {\n                if (!unlocked) {\n                    throw new Error(`invalid password`);\n                }\n                return randomBytesAsync(64);\n            })\n            .then((buff: Buffer) => {\n                const token = GethConnector.getInstance()\n                    .web3\n                    .sha3(buff.toString('hex'), { encoding: 'hex' });\n                return this._signSession(acc, token)\n                    .then((signedString: string) => {\n                        const expiration = new Date();\n                        expiration.setMinutes(expiration.getMinutes() + timer);\n                        GethConnector.getInstance().web3.personal.lockAccountAsync(acc);\n                        GethConnector.getInstance().web3.eth.defaultAccount = acc;\n                        this._session = {\n                            expiration,\n                            address: acc,\n                            vrs: fromRpcSig(signedString)\n                        };\n                        setTimeout(() => this._flushSession(), 1000 * 60 * timer);\n                        return { token, expiration, account: acc };\n                    });\n            })\n            .catch((err: Error) => {\n                GethConnector.getInstance().web3.personal.lockAccountAsync(acc);\n                return { error: { message: err.message } };\n            });\n    }\n\n    public logout() {\n        if (this._session) {\n            GethConnector.getInstance().web3.personal.lockAccountAsync(this._session.address);\n        }\n        this._flushSession();\n    }\n\n    /**\n     *\n     * @param token\n     * @returns {boolean}\n     */\n    public isLogged(token: any) {\n        let pubKey: string;\n        let ethAddr: Buffer;\n        const now = new Date();\n        if (!this._session || !token) {\n            return false;\n        }\n\n        if (now > this._session.expiration) {\n            return false;\n        }\n        const { v, r, s } = this._session.vrs;\n        try {\n            pubKey = bufferToHex(ecrecover(toBuffer(token), v, r, s));\n            ethAddr = pubToAddress(pubKey);\n            console.log(bufferToHex(ethAddr), this._session.address);\n            return bufferToHex(ethAddr) === this._session.address;\n        } catch (err) {\n            return false;\n        }\n\n    }\n\n    /**\n     *\n     * @private\n     */\n    private _flushSession() {\n        this._session = null;\n        this._encrypted = null;\n        this._cipher = null;\n        this._decipher = null;\n    }\n\n    /**\n     *\n     * @param account\n     * @param hash\n     * @returns {any}\n     * @private\n     */\n    private _signSession(account: string, hash: string) {\n        return GethConnector.getInstance()\n            .web3\n            .eth\n            .signAsync(account, hash);\n    }\n\n    /**\n     *\n     * @param data\n     * @param token\n     * @returns {any}\n     */\n    public signData(data: {}, token: string) {\n        return GethConnector.getInstance()\n            .web3\n            .personal\n            .unlockAccountAndSendTransactionAsync(data, this._read(token).toString('utf8'));\n    }\n}\n"]}