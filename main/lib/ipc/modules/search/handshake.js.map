{"version":3,"file":"handshake.js","sourceRoot":"","sources":["handshake.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { equals } from 'ramda';\nimport { GethConnector } from '@akashaproject/geth-connector';\nimport {\n    generalSettings,\n    SEARCH_PROVIDER,\n    HANDSHAKE_REQUEST,\n    HANDSHAKE_RESPONSE,\n    HANDSHAKE_DONE,\n    handshakeTimeout\n} from '../../config/settings';\nimport { randomBytesAsync } from '../auth/Auth';\nimport { whisperIdentity } from '../chat/post';\n\nconst execute = Promise.coroutine(function*(data: { provider?: string, timeout?: number }) {\n    const timeout = (data.timeout) ? data.timeout : handshakeTimeout;\n    const seed = yield randomBytesAsync(32);\n    const message = GethConnector.getInstance()\n        .web3\n        .sha3(seed.toString('hex'), { encoding: 'hex' });\n    const jsonMessage = { message: message, date: (new Date()).toJSON() };\n\n    if (!whisperIdentity.from) {\n        whisperIdentity.from = yield GethConnector.getInstance().web3.shh.newIdentityAsync();\n    }\n\n    const payload = GethConnector.getInstance().web3\n        .fromUtf8(JSON.stringify(jsonMessage));\n    const ttl = GethConnector.getInstance().web3\n        .fromDecimal(timeout);\n\n    const init = yield GethConnector.getInstance().web3\n        .shh\n        .postAsync({\n            from: whisperIdentity.from,\n            topics: [HANDSHAKE_REQUEST],\n            payload: payload,\n            ttl: ttl\n        });\n    if (!init) {\n        throw new Error('Could not send handshake request.');\n    }\n    const response = yield Promise.delay(timeout * 1000).then(() => {\n        return Promise.fromCallback(\n            (cb) => {\n                GethConnector.getInstance()\n                    .web3\n                    .shh\n                    .filter({ topics: [HANDSHAKE_RESPONSE], to: whisperIdentity.from })\n                    .get(cb)\n            })\n    });\n\n    if (!response.length) {\n        throw new Error('Search service timed out.');\n    }\n    for (let i = 0; i < response.length; i++) {\n        if (response[i].hasOwnProperty('payload')) {\n            if (equals(payload, response[i].payload)) {\n                generalSettings.set(SEARCH_PROVIDER, response[i].from);\n                generalSettings.set(HANDSHAKE_DONE, true);\n                break;\n            }\n        }\n    }\n\n    if (!generalSettings.get(HANDSHAKE_DONE)) {\n        throw new Error('Could not handshake.');\n    }\n\n    return { searchService: init }\n});\n\nexport default { execute, name: 'handshake' };\n"]}