{"version":3,"file":"query.js","sourceRoot":"","sources":["query.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { GethConnector } from '@akashaproject/geth-connector';\nimport { whisperIdentity } from '../chat/post';\nimport { SEARCH_REQUEST, SEARCH_PROVIDER, generalSettings } from '../../config/settings';\nimport getEntry from '../entry/get-entry';\nconst execute = Promise.coroutine(function*(data: { text: string, pageSize?: number, offset?: number }) {\n    const requestPayLoad = GethConnector.getInstance().web3.fromUtf8(JSON.stringify(data));\n    if (!whisperIdentity.from) {\n        whisperIdentity.from = yield GethConnector.getInstance().web3.shh.newIdentityAsync();\n    }\n    const ttl = \"0x5\";\n    const to = generalSettings.get(SEARCH_PROVIDER);\n\n    if(!to) {\n        throw new Error(\"Must run handshake first.\");\n    }\n\n    const request = yield GethConnector.getInstance().web3\n        .shh\n        .postAsync({\n            from: whisperIdentity.from,\n            topics: [SEARCH_REQUEST],\n            to: to,\n            payload: requestPayLoad,\n            ttl: ttl\n        });\n\n    if(!request){\n        throw new Error(\"Could not send search request.\");\n    }\n    const response = yield Promise.delay(5000).then(() => {\n        return Promise.fromCallback(\n            (cb) => {\n                GethConnector.getInstance()\n                    .web3\n                    .shh\n                    .filter({ topics: [requestPayLoad], to: whisperIdentity.from })\n                    .get(cb)\n            })\n    });\n\n    if (!response.length) {\n        throw new Error('Search service timed out.');\n    }\n    let jsonResponse;\n    try {\n        jsonResponse = JSON.parse(GethConnector.getInstance().web3.toUtf8(response[0].payload));\n    } catch (err) {\n        jsonResponse = null;\n    }\n\n    if(!jsonResponse || !jsonResponse.entries) {\n        throw new Error('Invalid response from search service.')\n    }\n    const results = jsonResponse.entries.map((entryId) => {\n       return getEntry.execute({entryId});\n    });\n    const collection = yield Promise.all(results);\n    return {collection, total: jsonResponse.count, from: data};\n});\n\nexport default { execute, name: 'query' };\n"]}