{"version":3,"file":"runner.js","sourceRoot":"","sources":["runner.ts"],"names":[],"mappings":";AAAA,oCAAoC;AACpC,kEAA8D;AAC9D,iDAAiE;AACjE,IAAY,UAAgD;AAA5D,WAAY,UAAU;IAAE,iDAAW,CAAA;IAAE,6CAAS,CAAA;IAAE,iDAAW,CAAA;AAAA,CAAC,EAAhD,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAAsC;AAC5D,IAAY,aAAmC;AAA/C,WAAY,aAAa;IAAE,+CAAO,CAAA;IAAE,qDAAU,CAAA;AAAA,CAAC,EAAnC,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAAsB;AAE/C,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAA2E;IACnH,IAAI,QAAQ,CAAC;IACb,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChB,KAAK,UAAU,CAAC,OAAO;YAEnB,MAAM,cAAc,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC5E,QAAQ,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YACpE,KAAK,CAAC;QACV,KAAK,UAAU,CAAC,KAAK;YACjB,MAAM,QAAQ,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACpE,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;YAC7B,KAAK,CAAC;QACV,KAAK,UAAU,CAAC,OAAO;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClD,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACnE,CAAC;YAED,MAAM,UAAU,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YACrF,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YAC/B,KAAK,CAAC;QACV;YACI,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAClD,CAAC;IACD,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;QAC/F,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;QAChG,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;AAChC,CAAC,CAAC,CAAC;;AAEH,kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport { constructed as contracts } from '../../contracts/index';\nexport enum ObjectType {PROFILE = 1, ENTRY = 2, COMMENT = 3}\nexport enum OperationType {ADD = 1, REMOVE = 2}\n\nconst execute = Promise.coroutine(function*(data: { type: ObjectType, id: string | string[], operation: OperationType }) {\n    let hashRoot;\n    switch (data.type) {\n        case ObjectType.PROFILE:\n            // here id is AKASHA ID\n            const profileAddress = yield contracts.instance.registry.addressOf(data.id);\n            hashRoot = yield contracts.instance.profile.getIpfs(profileAddress);\n            break;\n        case ObjectType.ENTRY:\n            const entryEth = yield contracts.instance.entries.getEntry(data.id);\n            hashRoot = entryEth.ipfsHash;\n            break;\n        case ObjectType.COMMENT:\n            if (data.id.length !== 2 || !Array.isArray(data.id)) {\n                throw new Error('Comments must provide [entryId, commentdId]');\n            }\n            //  id is [entryId:string, commentId: string]\n            const commentEth = yield contracts.instance.comments.getComment.apply(this, data.id);\n            hashRoot = commentEth.ipfsHash;\n            break;\n        default:\n            throw new Error('No known type specified')\n    }\n    const pin = yield Promise.fromCallback((cb) => {\n        if (data.operation === OperationType.REMOVE) {\n            return IpfsConnector.getInstance().api.apiClient.pin.rm(hashRoot, { recursive: true }, cb);\n        }\n        if (data.operation === OperationType.ADD) {\n            return IpfsConnector.getInstance().api.apiClient.pin.add(hashRoot, { recursive: true }, cb);\n        }\n        throw new Error('Operation for pinning not specified');\n    });\n    return { pin, id: data.id };\n});\n\nexport default { execute, name: 'pin' };\n"]}