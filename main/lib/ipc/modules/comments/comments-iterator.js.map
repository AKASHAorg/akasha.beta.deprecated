{"version":3,"file":"comments-iterator.js","sourceRoot":"","sources":["comments-iterator.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,wBAAyC,uBAAuB,CAAC,CAAA;AAKjE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAA0E;IAClH,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5G,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;IACrD,CAAC;IACD,IAAI,OAAO,CAAC;IACZ,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClD,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACd,OAAO,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAChF,OAAO,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACzD,OAAO,GAAG,CAAC,CAAC;IAChB,CAAC;IAED,OAAO,OAAO,GAAG,UAAU,EAAE,CAAC;QAC1B,SAAS,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;YAClG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC9E,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;YACpB,KAAK,CAAC;QACV,CAAC;QACD,OAAO,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAChF,OAAO,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACzD,OAAO,EAAE,CAAC;IACd,CAAC;IACD,MAAM,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;AAC7E,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\n/**\n * Get entries indexed by tag\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: {start?: number, limit?: number, entryId: string, reverse: boolean }) {\n    let currentId = (data.start) ? data.start : yield contracts.instance.comments.getFirstComment(data.entryId);\n    if (currentId === '0') {\n        return { collection: [], entryId: data.entryId };\n    }\n    let comment;\n    const maxResults = (data.limit) ? data.limit : 50;\n    const results = [];\n    let counter = 0;\n    if (!data.start) {\n        comment = yield contracts.instance.comments.getComment(data.entryId, currentId);\n        results.push({ commentId: currentId, content: comment });\n        counter = 1;\n    }\n\n    while (counter < maxResults) {\n        currentId = (data.reverse) ? yield contracts.instance.comments.getPrevComment(data.entryId, currentId) :\n            yield contracts.instance.comments.getNextComment(data.entryId, currentId);\n        if (currentId === '0') {\n            break;\n        }\n        comment = yield contracts.instance.comments.getComment(data.entryId, currentId);\n        results.push({ commentId: currentId, content: comment });\n        counter++;\n    }\n    return { collection: results, entryId: data.entryId, limit: maxResults };\n});\n\nexport default { execute, name: 'commentsIterator' };\n\n"]}