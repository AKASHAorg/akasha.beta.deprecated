{"version":3,"file":"get-comment.js","sourceRoot":"","sources":["get-comment.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,wBAAyC,uBAAuB,CAAC,CAAA;AACjE,uBAAkC,QAAQ,CAAC,CAAA;AAM3C,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAA2C;IACnF,MAAM,OAAO,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3F,MAAM,OAAO,GAAG,MAAM,wBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC1D,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;AAC1G,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport { getCommentContent } from './ipfs';\n\n/**\n * Get total number of comments for an entry\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: { entryId: string, commentId: string}) {\n    const ethData = yield contracts.instance.comments.getComment(data.entryId, data.commentId);\n    const content = yield getCommentContent(ethData.ipfsHash);\n    return { content: Object.assign(ethData, content), entryId: data.entryId, commentId: data.commentId };\n});\n\nexport default { execute, name: 'getComment' };\n"]}