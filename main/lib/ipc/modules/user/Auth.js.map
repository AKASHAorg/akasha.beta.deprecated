{"version":3,"file":"Auth.js","sourceRoot":"","sources":["Auth.ts"],"names":[],"mappings":"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","sourcesContent":["import { createCipher, createDecipher, randomBytes, Decipher, Cipher } from 'crypto';\nimport { GethConnector, gethHelper } from '@akashaproject/geth-connector';\nimport { fromRpcSig, ecrecover, toBuffer, bufferToHex, pubToAddress } from 'ethereumjs-util';\nimport * as Promise from 'bluebird';\n\nconst randomBytesAsync = Promise.promisify(randomBytes);\nexport default class Auth {\n    private _encrypted: Buffer;\n    private _decipher: Decipher;\n    private _cipher: Cipher;\n    private _session: {address: string, expiration: Date, vrs: {v: string, r: string, s: string}};\n\n    /**\n     *\n     * @param pass\n     * @returns {Bluebird<string>|PromiseLike<string>|Thenable<string>|Promise<string>}\n     */\n    generateKey(pass: any) {\n        return this._encrypt(pass)\n            .then(() => {\n                return GethConnector.getInstance()\n                    .web3\n                    .personal\n                    .newAccountAsync(this._read().toString('utf8'));\n            })\n            .then((address: string) => {\n                this.login(address, pass, 2);\n                return address;\n            });\n    }\n\n    /**\n     *\n     * @returns {Promise<TResult>|Bluebird<U>|PromiseLike<TResult>|Thenable<U>}\n     * @private\n     */\n    private _generateRandom() {\n        return randomBytesAsync(256).then((buff: Buffer) => {\n            this._cipher = createCipher('aes-256-ctr', buff.toString('hex'));\n            this._decipher = createDecipher('aes-256-ctr', buff.toString('hex'));\n            return true;\n        });\n    }\n\n    /**\n     *\n     * @param key\n     * @returns {Auth}\n     * @private\n     */\n    private _encrypt(key: any) {\n        const keyTr = Buffer.from(key);\n        return this._generateRandom().then(() => {\n            this._encrypted = Buffer.concat([this._cipher.update(keyTr), this._cipher.final()]);\n            return true;\n        });\n    }\n\n    /**\n     *\n     * @returns {Buffer}\n     * @private\n     */\n    private _read() {\n        return Buffer.concat([this._decipher.update(this._encrypted), this._decipher.final()]);\n    }\n\n    /**\n     *\n     * @param acc\n     * @param pass\n     * @param timer\n     * @returns {Bluebird<U>}\n     */\n    protected login(acc: string, pass: Uint8Array[], timer?: number) {\n\n        return gethHelper\n            .hasKey(acc)\n            .then((found) => {\n                if (!found) {\n                    throw new Error(`local key for ${acc} not found`);\n                }\n                // temporary until personal_sign is shipped\n                // follow here https://github.com/ethereum/go-ethereum/pull/2940\n                // @TODO: migrate to personal_sign when available\n                this._encrypt(pass)\n                    .then(() => {\n                        return GethConnector.getInstance()\n                            .web3\n                            .personal\n                            .unlockAccountAsync(acc, this._read().toString('utf8'), 2000);\n                    })\n                    .then((unlocked: boolean) => {\n                        if (!unlocked) {\n                            throw new Error(`invalid password`);\n                        }\n                        return randomBytesAsync(256);\n                    })\n                    .then((buff: Buffer) => {\n                            const token = GethConnector.getInstance()\n                                .web3\n                                .sha3(buff.toString('hex'), {encoding: 'hex'});\n                            return this._signSession(acc, token)\n                                .then((signedString: string) => {\n                                    const expiration = new Date();\n                                    expiration.setMinutes(expiration.getMinutes() + timer);\n                                    this._session = {\n                                        expiration,\n                                        address: acc,\n                                        vrs: fromRpcSig(signedString)\n                                    };\n                                    setTimeout(() => this._flushSession(), 1000 * 60 * timer);\n                                    return {token, expiration};\n                                });\n                    })\n                    .catch((err: Error) => {\n                        return {error: err.message};\n                    })\n                    .finally(() => GethConnector.getInstance().web3.personal.lockAccountAsync(acc));\n            });\n    }\n\n    /**\n     *\n     * @param token\n     * @returns {boolean}\n     */\n    public isLogged(token: any) {\n        let pubKey: string;\n        let ethAddr: Buffer;\n        const now = new Date();\n        if (!this._session || !token) {\n            return false;\n        }\n\n        if (now > this._session.expiration) {\n            return false;\n        }\n        const {v, r, s} = this._session.vrs;\n        try {\n            pubKey = bufferToHex(ecrecover(toBuffer(token), v, r, s));\n            ethAddr = pubToAddress(pubKey);\n            return bufferToHex(ethAddr) === this._session.address;\n        }catch (err) {\n            return false;\n        }\n\n    }\n\n    /**\n     *\n     * @private\n     */\n    private _flushSession() {\n        this._session = null;\n        this._encrypted = null;\n    }\n\n    /**\n     *\n     * @param account\n     * @param hash\n     * @returns {any}\n     * @private\n     */\n    private _signSession(account: string, hash: string) {\n        return GethConnector.getInstance()\n            .web3\n            .eth\n            .signAsync(account, hash);\n    }\n\n    /**\n     *\n     * @param data\n     * @param token\n     * @returns {any}\n     */\n    public signData(data: {}, token: string) {\n        if (this.isLogged(token)) {\n            return GethConnector.getInstance()\n                .web3\n                .personal\n                .unlockAccountAndSendTransactionAsync(data, this._read().toString('utf8'));\n        }\n        return Promise.reject(new Error('Authentication required'));\n    }\n}\n"]}