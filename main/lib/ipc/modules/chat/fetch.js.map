{"version":3,"file":"fetch.js","sourceRoot":"","sources":["fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { TOPICS } from './settings';\nimport { GethConnector } from '@akashaproject/geth-connector';\nimport { constructed as contracts } from '../../contracts/index';\nimport { generalSettings, BASE_URL } from '../../config/settings';\nimport { getShortProfile } from '../profile/ipfs';\n\nlet chat;\nconst transform = Promise.coroutine(function*(data: { payload: string, sent: number, hash: string }) {\n    let obj, rootHash, userMedia;\n    let response = {\n        timeStamp: 0,\n        profileAddress: '',\n        messageHash: '',\n        [BASE_URL]: generalSettings.get(BASE_URL)\n    };\n    const utf = GethConnector.getInstance().web3.toUtf8(data.payload);\n    try {\n        obj = JSON.parse(utf);\n    } catch (err) {\n        obj = { message: '', akashaId: '' };\n    }\n    if (obj.akashaId) {\n        response.profileAddress = yield contracts.instance.registry.addressOf(obj.akashaId);\n        response.messageHash = data.hash;\n        rootHash = yield contracts.instance.profile.getIpfs(response.profileAddress);\n        userMedia = yield getShortProfile(rootHash);\n        response.timeStamp = data.sent;\n    }\n    return Object.assign({}, obj, response, userMedia);\n});\n\nconst execute = Promise.coroutine(function*(data: { stop?: boolean }, cb: any) {\n        if (data.stop) {\n            if (chat) {\n                chat.stopWatching(() => {\n                    chat = null;\n                });\n            }\n            return { watching: false };\n        }\n\n        if (chat) {\n            return { watching: true };\n        }\n\n        /*    let current;\n         const collection = [];\n         // fetch initial messages\n         const initial = yield Promise.fromCallback((cb) => {\n         return (GethConnector.getInstance().web3.shh.filter({ topics: TOPICS })).get(cb);\n         });\n         for (let i = 0; i < initial.length; i++) {\n         if (initial[i].hasOwnProperty('payload')) {\n         current = yield transform(initial[i]);\n         collection.push(current);\n         }\n         }\n         if (chat) {\n         return { collection };\n         }\n         cb(null, { collection });*/\n\n        // watch for new messages\n        chat = GethConnector.getInstance().web3.shh.filter({ topics: TOPICS });\n        chat.watch(function (err, data) {\n            if (err) {\n                return cb(err);\n            }\n            if (data.hasOwnProperty('payload')) {\n                transform(data).then((resp) => {\n                    cb(null, resp);\n                });\n            }\n        });\n\n        return { watching: true }\n    }\n);\n\nexport default { execute, name: 'fetch' };\n"]}