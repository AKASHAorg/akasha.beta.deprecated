{"version":3,"file":"send-tip.js","sourceRoot":"","sources":["send-tip.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,wBAAyC,uBAAuB,CAAC,CAAA;AACjE,wBAAqC,eAAe,CAAC,CAAA;AAErD,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAmF;IAC3H,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACxG,MAAM,EAAE,GAAG,MAAM,cAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9D,MAAM,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC3C,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport { module as userModule } from '../auth/index';\n\nconst execute = Promise.coroutine(function*(data: {token: string, receiver: string, value: string, unit?: string, gas?: number}) {\n    const txData = yield contracts.instance.profile.sendTip(data.receiver, data.value, data.unit, data.gas);\n    const tx = yield userModule.auth.signData(txData, data.token);\n    return { tx, receiver: data.receiver };\n});\n\nexport default { execute, name: 'tip' };\n"]}