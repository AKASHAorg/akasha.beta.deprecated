{"version":3,"file":"following-iterator.js","sourceRoot":"","sources":["following-iterator.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,wBAAyC,uBAAuB,CAAC,CAAA;AACjE,+BAAwB,gBAAgB,CAAC,CAAA;AAKzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAyD;IACjG,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3G,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;IACvD,CAAC;IACD,IAAI,SAAS,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IACzF,IAAI,OAAO,GAAG,MAAM,sBAAW,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;IAChE,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClD,MAAM,OAAO,GAAG,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;IAClD,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,OAAO,OAAO,GAAG,UAAU,EAAE,CAAC;QAC1B,SAAS,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrF,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;YACpB,KAAK,CAAC;QACV,CAAC;QACD,SAAS,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrF,OAAO,GAAG,MAAM,sBAAW,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;QAC5D,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;QAC9C,OAAO,EAAE,CAAC;IACd,CAAC;IACD,MAAM,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC5D,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport profileData from './profile-data';\n/**\n * Get followed profiles of id\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: {start?: number, limit?: number, akashaId: string }) {\n    let currentId = (data.start) ? data.start : yield contracts.instance.feed.getFollowingFirst(data.akashaId);\n    if (currentId === '0') {\n        return { collection: [], akashaId: data.akashaId };\n    }\n    let profileId = yield contracts.instance.feed.getFollowingById(data.akashaId, currentId);\n    let profile = yield profileData.execute({ profile: profileId });\n    const maxResults = (data.limit) ? data.limit : 10;\n    const results = [{ profile, address: profileId }];\n    let counter = 1;\n    while (counter < maxResults) {\n        currentId = yield contracts.instance.feed.getFollowingNext(data.akashaId, currentId);\n        if (currentId === '0') {\n            break;\n        }\n        profileId = yield contracts.instance.feed.getFollowersById(data.akashaId, currentId);\n        profile = yield profileData.execute({ profile: profileId });\n        results.push({ profile, address: profileId });\n        counter++;\n    }\n    return { collection: results, akashaId: data.akashaId };\n});\n\nexport default { execute, name: 'followingIterator' };\n\n"]}