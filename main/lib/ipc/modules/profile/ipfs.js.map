{"version":3,"file":"ipfs.js","sourceRoot":"","sources":["ipfs.ts"],"names":[],"mappings":"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","sourcesContent":["import { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport { profiles } from '../models/records';\nimport * as Promise from 'bluebird';\n/**\n *\n * @param data\n * @returns {Thenable<U>|PromiseLike<TResult>|Promise<TResult>|Bluebird<U>}\n */\nconst create = (data: IpfsProfileCreateRequest) => {\n    const returned: any = {\n        firstName: data.firstName,\n        lastName: data.lastName,\n        avatar: '',\n        backgroundImage: '',\n        about: '',\n        links: data.links\n    };\n    let media: any[] = [];\n    let keys: any;\n    if (data.backgroundImage) {\n        keys = Object.keys(data.backgroundImage).sort();\n        media = keys.map((media: string) => {\n            return IpfsConnector.getInstance()\n                .api\n                .constructObjLink(data.backgroundImage[media].src, true);\n        });\n    }\n    return Promise.all(media)\n        .then((hashes) => {\n            let constructed: any = {};\n            if (hashes.length) {\n                hashes.forEach((v: any, i: number) => {\n                    const dim = keys[i];\n                    constructed[dim] = {};\n                    constructed[dim]['width'] = data.backgroundImage[dim].width;\n                    constructed[dim]['height'] = data.backgroundImage[dim].height;\n                    constructed[dim]['src'] = v;\n                });\n                // cleanup\n                delete data.backgroundImage;\n                return IpfsConnector.getInstance().api.add(constructed).then((hash: string) => {\n                    return IpfsConnector.getInstance().api.constructObjLink(hash);\n                });\n            }\n            return Promise.resolve('');\n        }).then((hash: any) => {\n            if (hash) {\n                returned.backgroundImage = hash;\n            }\n            if (data.avatar) {\n                return IpfsConnector.getInstance()\n                    .api\n                    .constructObjLink(data.avatar, true);\n            }\n            return Promise.resolve('');\n        }).then((hash: any) => {\n            if (hash) {\n                returned.avatar = hash;\n            }\n            if (data.about) {\n                const transformed = Buffer.from(data.about);\n                return IpfsConnector.getInstance()\n                    .api\n                    .constructObjLink(transformed);\n            }\n            return Promise.resolve('');\n        }).then((hash: any) => {\n            if (hash) {\n                returned.about = hash;\n            }\n            return IpfsConnector.getInstance().api.add(returned);\n        });\n};\n\n/**\n *\n * @param hash\n * @param resolveAvatar\n * @returns {any}\n */\nconst getShortProfile = (hash: string, resolveAvatar = true) => {\n    if (profiles.getShort(hash)) {\n        return Promise.resolve(profiles.getShort(hash));\n    }\n    return IpfsConnector.getInstance().api.get(hash)\n        .then((schema: ProfileModel) => {\n            let resolved: any = Object.assign({}, schema);\n            console.log(schema);\n            if (schema.avatar && resolveAvatar) {\n                return IpfsConnector.getInstance()\n                    .api\n                    .resolve(`${hash}/avatar`)\n                    .then((data: Buffer) => {\n                        resolved.avatar = data;\n                        return resolved;\n                    });\n            }\n            profiles.setShort(hash, resolved);\n            return resolved;\n        });\n};\n\n/**\n *\n * @param hash\n * @returns {Bluebird<U>|Thenable<U>|Promise<TResult>|PromiseLike<TResult>}\n */\nconst resolveProfile = (hash: string) => {\n    let resolved: any;\n    let keys: any;\n\n    if (profiles.getFull(hash)) {\n        return Promise.resolve(profiles.getFull(hash));\n    }\n\n    return getShortProfile(hash)\n        .then((schema: ProfileModel) => {\n            resolved = Object.assign({}, schema);\n            const LINKS: any[] = [];\n            if (schema.backgroundImage) {\n                return IpfsConnector.getInstance().api.resolve(schema.backgroundImage);\n            }\n            return Promise.resolve('');\n        }).then((mediaObj: any): Promise<any> => {\n            let media: any;\n            if (mediaObj) {\n                keys = Object.keys(mediaObj).sort();\n                resolved.backgroundImage = mediaObj;\n                media = keys.map((media: string) => {\n                    return IpfsConnector.getInstance()\n                        .api\n                        .resolve(resolved.backgroundImage[media].src);\n                });\n                return Promise.all(media);\n            }\n            return Promise.resolve('');\n        }).then((images: any) => {\n            if (images.length) {\n                images.forEach((v: Buffer, i: number) => {\n                    resolved.backgroundImage[keys[i]].src = Uint8Array.from(v);\n                });\n            }\n            if (resolved.about) {\n                return IpfsConnector.getInstance()\n                    .api\n                    .resolve(resolved.about);\n            }\n            return Promise.resolve('');\n        }).then((about: any) => {\n            if (about) {\n                resolved.about = Buffer.from(about).toString('utf8');\n            }\n            profiles.setFull(hash, resolved);\n            return resolved;\n        });\n};\n\n/**\n *\n * @returns {{\n *  create: ((data:IpfsProfileCreateRequest)=>Bluebird<U>),\n  * getShortProfile: ((hash:string)=>any), resolveProfile: ((hash:string)=>any)\n  * }}\n */\nexport default function init() {\n    return {\n        create,\n        getShortProfile,\n        resolveProfile\n    };\n}\n"]}