{"version":3,"file":"ipfs.js","sourceRoot":"","sources":["ipfs.ts"],"names":[],"mappings":"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","sourcesContent":["import { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport * as Promise from 'bluebird';\n\n/**\n *\n * @param data\n * @returns {Thenable<U>|PromiseLike<TResult>|Promise<TResult>|Bluebird<U>}\n */\nconst create = (data: IpfsProfileCreateRequest) => {\n    const returned = Object.assign({}, data);\n    let media: any[] = [];\n    console.log('inside creation');\n    if (data.backgroundImage) {\n        media = data.backgroundImage.map((media) => {\n            return IpfsConnector.getInstance().api.add(Buffer.from(media.src));\n        });\n    }\n    if (data.avatar) {\n        media.push(\n            IpfsConnector.getInstance()\n                .api\n                .add(Buffer.from(data.avatar))\n        );\n    }\n    return Promise.all(media)\n        .then((hashes) => {\n            console.log('inside all creation');\n            hashes.forEach((v: string, i: number) => {\n                if (i === (hashes.length - 1)) {\n                    returned.avatar = v;\n                } else {\n                    returned.backgroundImage[i].src = v;\n                }\n            });\n            console.log('ipfs object', returned);\n            return IpfsConnector.getInstance().api.add(returned);\n        });\n};\n\n/**\n *\n * @param hash\n * @returns {any}\n */\nconst getShortProfile = (hash: string) => {\n    return IpfsConnector.getInstance().api.get(hash)\n        .then((schema: ProfileModel) => {\n            let resolved: any = Object.assign({}, schema);\n            if (schema.avatar) {\n                return IpfsConnector.getInstance()\n                    .api\n                    .resolve(schema.avatar)\n                    .then((data: Buffer) => {\n                        resolved.avatar = Uint8Array.from(data);\n                        return resolved;\n                    });\n            }\n            return Promise.resolve(resolved);\n        });\n};\n\n/**\n *\n * @param hash\n * @returns {Bluebird<U>|Thenable<U>|Promise<TResult>|PromiseLike<TResult>}\n */\nconst resolveProfile = (hash: string) => {\n    return getShortProfile(hash)\n        .then((schema: ProfileModel) => {\n            let resolved: any = Object.assign({}, schema);\n            const LINKS: any[] = [];\n            if (schema.backgroundImage) {\n                schema.backgroundImage.forEach((media) => {\n                    LINKS.push(IpfsConnector.getInstance().api.resolve(media.src));\n                });\n            }\n            return Promise.all(LINKS)\n                .then((sources: Buffer[]) => {\n                    sources.forEach((val, i) => {\n                        resolved.backgroundImage[i].src = Uint8Array.from(val);\n                    });\n                    return resolved;\n                });\n        });\n};\n\n/**\n *\n * @returns {{create: ((data:IpfsProfileCreateRequest)=>(Bluebird<U>|Thenable<U>|Promise<TResult>|PromiseLike<TResult>)), getShortProfile: ((hash:string)=>any), resolveProfile: ((hash:string)=>(Bluebird<U>|Thenable<U>|Promise<TResult>|PromiseLike<TResult>))}}\n */\nexport default function init() {\n    return {\n        create,\n        getShortProfile,\n        resolveProfile\n    };\n}\n"]}