{"version":3,"file":"ipfs.js","sourceRoot":"","sources":["ipfs.ts"],"names":[],"mappings":"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","sourcesContent":["import { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport { profiles } from '../models/records';\nimport { isEmpty } from 'ramda';\nimport * as Promise from 'bluebird';\n\nexport const ProfileSchema = {\n    AVATAR: 'avatar',\n    LINKS: 'links',\n    ABOUT: 'about',\n    BACKGROUND_IMAGE: 'backgroundImage'\n};\n\n/**\n *\n * @type {Function}\n */\nexport const create = Promise.coroutine(function*(data: IpfsProfileCreateRequest) {\n    let saved, tmp, targetHash, keys, pool;\n    let i = 0;\n    const simpleLinks = [ProfileSchema.AVATAR, ProfileSchema.ABOUT, ProfileSchema.LINKS];\n    const root = yield IpfsConnector.getInstance().api.add({ firstName: data.firstName, lastName: data.lastName });\n    targetHash = root.hash;\n    while (i < simpleLinks.length) {\n        if (!isEmpty(data[simpleLinks[i]]) && data[simpleLinks[i]]) {\n            tmp = yield IpfsConnector.getInstance().api.add(data[simpleLinks[i]], simpleLinks[i] === ProfileSchema.AVATAR);\n            saved = yield IpfsConnector.getInstance()\n                .api\n                .addLink({ name: simpleLinks[i], size: tmp.size, hash: tmp.hash }, targetHash);\n            targetHash = saved.multihash;\n        }\n        i++;\n    }\n\n\n    if (data.backgroundImage) {\n        keys = Object.keys(data.backgroundImage).sort();\n        pool = keys.map((media: string) => {\n            return IpfsConnector.getInstance()\n                .api\n                .addFile(data.backgroundImage[media].src);\n        });\n        tmp = yield Promise.all(pool).then(\n            (returned) => {\n                const constructed = {};\n                returned.forEach((v: any, i: number) => {\n                    const dim = keys[i];\n                    constructed[dim] = {};\n                    constructed[dim]['width'] = data.backgroundImage[dim].width;\n                    constructed[dim]['height'] = data.backgroundImage[dim].height;\n                    constructed[dim]['src'] = v.hash;\n                });\n                return IpfsConnector.getInstance().api.add(constructed);\n            });\n        saved = yield IpfsConnector.getInstance().api.addLink({\n            name: 'backgroundImage',\n            size: tmp.size,\n            hash: tmp.hash\n        }, targetHash);\n        targetHash = saved.multihash;\n    }\n\n    saved = null;\n    tmp = null;\n    keys = null;\n    pool = null;\n\n    return targetHash;\n});\n\n\n/**\n *\n * @type {Function}\n */\nexport const getShortProfile = Promise.coroutine(function*(hash: string, resolveAvatar = false) {\n    if (profiles.getShort(hash)) {\n        return Promise.resolve(profiles.getShort(hash));\n    }\n    const avatarPath = { [ProfileSchema.AVATAR]: '' };\n    const profileBase = yield IpfsConnector.getInstance().api.get(hash);\n    const avatar = yield IpfsConnector.getInstance().api.findLinks(hash, [ProfileSchema.AVATAR]);\n    if (avatar.length) {\n        if (!resolveAvatar) {\n            avatarPath[ProfileSchema.AVATAR] = avatar[0].multihash;\n        } else {\n            avatarPath[ProfileSchema.AVATAR] = yield IpfsConnector.getInstance().api.getFile(avatar[0].multihash);\n        }\n    }\n    const fetched = Object.assign({}, profileBase, avatarPath);\n    profiles.setShort(hash, fetched);\n    return fetched;\n});\n\n/**\n *\n * @type {Function}\n */\nexport const resolveProfile = Promise.coroutine(function*(hash: string, resolveImages = false) {\n    if (profiles.getFull(hash)) {\n        return Promise.resolve(profiles.getFull(hash));\n    }\n    let constructed = {\n        [ProfileSchema.LINKS]: [],\n        [ProfileSchema.ABOUT]: '',\n        [ProfileSchema.BACKGROUND_IMAGE]: ''\n    };\n    const shortProfile = yield getShortProfile(hash, resolveImages);\n    const pool = yield IpfsConnector.getInstance()\n        .api.findLinks(hash, [ProfileSchema.LINKS, ProfileSchema.ABOUT, ProfileSchema.BACKGROUND_IMAGE]);\n    for (let i = 0; i < pool.length; i++) {\n        constructed[pool[i].name] = yield IpfsConnector.getInstance().api.get(pool[i].multihash);\n    }\n    const returned = Object.assign({}, shortProfile, constructed);\n    profiles.setFull(hash, returned);\n    return returned;\n});\n"]}