{"version":3,"file":"entry-stream.js","sourceRoot":"","sources":["entry-stream.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport followingCount from '../profile/following-count';\nimport subsCount from '../tags/subs-count';\n\nexport const DEFAULT_TAG = 'akasha';\n/**\n * Get score of an entry\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: { akashaId: string }) {\n    let fCount = yield followingCount.execute({ akashaId: data.akashaId });\n    let sCount = yield subsCount.execute({ akashaId: data.akashaId });\n    const followedProfiles = [];\n    const subbedTags = [];\n    fCount = parseInt(fCount.count);\n    sCount = parseInt(sCount.count);\n    if (!fCount && !sCount) {\n        return { profiles: [], tags: [{ tagName: DEFAULT_TAG }], akashaId: data.akashaId };\n    }\n    let currentFollow = yield contracts.instance.feed.getFollowingFirst(data.akashaId);\n    let profileAddress = yield contracts.instance.feed.getFollowingById(data.akashaId, currentFollow);\n    let profileId = yield contracts.instance.profile.getId(profileAddress);\n\n    followedProfiles.push({ profileAddress: profileAddress, akashaId: profileId });\n    while (fCount > 1) {\n        currentFollow = yield contracts.instance.feed.getFollowingNext(data.akashaId, currentFollow);\n        profileAddress = yield contracts.instance.feed.getFollowingById(data.akashaId, currentFollow);\n        profileId = yield contracts.instance.profile.getId(profileAddress);\n        followedProfiles.push({ profileAddress: profileAddress, akashaId: profileId });\n        fCount--;\n    }\n\n    let currentSub = yield contracts.instance.subs.subsFirst(data.akashaId);\n    let tagName = yield contracts.instance.tags.getTagName(currentSub);\n    if (!tagName) {\n        subbedTags.push({ tagName: DEFAULT_TAG, tagId: 'dont use :)' });\n    } else {\n        subbedTags.push({ tagId: currentSub, tagName: tagName });\n    }\n\n    while (sCount > 1) {\n        currentSub = yield contracts.instance.subs.subsNext(data.akashaId, currentSub);\n        tagName = yield contracts.instance.tags.getTagName(currentSub);\n        subbedTags.push({ tagId: currentSub, tagName: tagName });\n        sCount--;\n    }\n\n    return { profiles: followedProfiles, tags: subbedTags, akashaId: data.akashaId };\n});\n\nexport default { execute, name: 'getEntriesStream' };\n"]}