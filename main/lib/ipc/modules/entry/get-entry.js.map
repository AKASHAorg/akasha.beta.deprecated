{"version":3,"file":"get-entry.js","sourceRoot":"","sources":["get-entry.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,wBAAyC,uBAAuB,CAAC,CAAA;AACjE,uBAAgD,QAAQ,CAAC,CAAA;AACzD,2BAA2E,uBAAuB,CAAC,CAAA;AACnG,iCAA0B,4BAA4B,CAAC,CAAA;AACvD,+BAA2B,yBAAyB,CAAC,CAAA;AAMrD,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAqB;IAC7D,MAAM,QAAQ,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzE,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxE,MAAM,KAAK,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpE,MAAM,MAAM,GAAG,MAAM,wBAAa,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACtE,QAAQ,CAAC,SAAS,GAAG,MAAM,sBAAc,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC;SAC7E,OAAO,CAAC,0BAAe,CAAC;SACxB,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;IACvC,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;QACvB,MAAM,qBAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC;aAClC,OAAO,CAAC,yBAAc,CAAC;aACvB,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;;YAEtC,MAAM,sBAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC;iBACnC,OAAO,CAAC,0BAAe,CAAC;iBACxB,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;IAC3C,MAAM,CAAC;QACH,CAAC,mBAAQ,CAAC,EAAE,0BAAe,CAAC,GAAG,CAAC,mBAAQ,CAAC;QACzC,OAAO;QACP,QAAQ;QACR,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,KAAK;QACL,MAAM;QACN,aAAa,EAAE,MAAM,CAAC,KAAK;KAC9B,CAAC;AACN,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport { getShortContent, getFullContent } from './ipfs';\nimport { generalSettings, BASE_URL, SHORT_WAIT_TIME, FULL_WAIT_TIME } from '../../config/settings';\nimport commentsCount from '../comments/comments-count';\nimport getProfileData from '../profile/profile-data';\n\n/**\n * Fetch entry from entryId\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: EntryGetRequest) {\n    const entryEth = yield contracts.instance.entries.getEntry(data.entryId);\n    const active = yield contracts.instance.entries.isMutable(data.entryId);\n    const score = yield contracts.instance.votes.getScore(data.entryId);\n    const cCount = yield commentsCount.execute({ entryId: data.entryId });\n    entryEth.publisher = yield getProfileData.execute({ profile: entryEth.publisher })\n        .timeout(SHORT_WAIT_TIME)\n        .then((d) => d).catch((e) => null);\n    const content = (data.full) ?\n        yield getFullContent(entryEth.ipfsHash)\n            .timeout(FULL_WAIT_TIME)\n            .then((d) => d).catch((e) => null)\n        :\n        yield getShortContent(entryEth.ipfsHash)\n            .timeout(SHORT_WAIT_TIME)\n            .then((d) => d).catch((e) => null);\n    return {\n        [BASE_URL]: generalSettings.get(BASE_URL),\n        content,\n        entryEth,\n        entryId: data.entryId,\n        score,\n        active,\n        commentsCount: cCount.count\n    };\n});\n\nexport default { execute, name: 'getEntry' };\n\n"]}