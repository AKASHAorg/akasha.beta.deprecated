{"version":3,"file":"votes-iterator.js","sourceRoot":"","sources":["votes-iterator.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,wBAAyC,uBAAuB,CAAC,CAAA;AAMjE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAwD;IAChG,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxG,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;IAC9B,CAAC;IACD,IAAI,GAAG,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC5E,IAAI,QAAQ,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACnE,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClD,MAAM,OAAO,GAAG,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;IAC3D,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,OAAO,OAAO,GAAG,UAAU,EAAE,CAAC;QAC1B,SAAS,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACjF,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;YACpB,KAAK,CAAC;QACV,CAAC;QACD,GAAG,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACxE,QAAQ,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC/D,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QACvD,OAAO,EAAE,CAAC;IACd,CAAC;IACD,MAAM,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;AAC1D,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\n\n/**\n * Get individual votes of entry\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: {start?: number, limit?: number, entryId: string }) {\n    let currentId = (data.start) ? data.start : yield contracts.instance.votes.getFirstVoteId(data.entryId);\n    if (currentId === '0') {\n        return { collection: [] };\n    }\n    let row = yield contracts.instance.votes.getVoteOf(data.entryId, currentId);\n    let akashaId = yield contracts.instance.profile.getId(row.profile);\n    const maxResults = (data.limit) ? data.limit : 30;\n    const results = [{ akashaId: akashaId, score: row.score }];\n    let counter = 1;\n    while (counter < maxResults) {\n        currentId = yield contracts.instance.tags.getNextVoteId(data.entryId, currentId);\n        if (currentId === '0') {\n            break;\n        }\n        row = yield contracts.instance.votes.getVoteOf(data.entryId, currentId);\n        akashaId = yield contracts.instance.profile.getId(row.profile);\n        results.push({ akashaId: akashaId, score: row.score });\n        counter++;\n    }\n    return { collection: results, entryId: data.entryId };\n});\n\nexport default { execute, name: 'votesIterator' };\n\n"]}