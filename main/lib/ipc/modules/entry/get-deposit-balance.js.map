{"version":3,"file":"get-deposit-balance.js","sourceRoot":"","sources":["get-deposit-balance.ts"],"names":[],"mappings":";AAAA,oCAAoC;AACpC,iDAAiE;AACjE,kEAA8D;AAM9D,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAwB;IAChE,MAAM,SAAS,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9E,MAAM,UAAU,GAAG,MAAM,8BAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;IACzF,MAAM,UAAU,GAAG,CAAC,8BAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAChG,MAAM,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;AAC1D,CAAC,CAAC,CAAC;;AAEH,kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport { GethConnector } from '@akashaproject/geth-connector';\n\n/**\n * Get deposit balance\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: { entryId: string}) {\n    const entryFund = yield contracts.instance.entries.getEntryFund(data.entryId);\n    const weiBalance = yield GethConnector.getInstance().web3.eth.getBalanceAsync(entryFund);\n    const ethBalance = (GethConnector.getInstance().web3.fromWei(weiBalance, 'ether')).toString(10);\n    return { balance: ethBalance, entryId: data.entryId };\n});\n\nexport default { execute, name: 'getDepositBalance' };\n"]}