{"version":3,"file":"claim-deposit.js","sourceRoot":"","sources":["claim-deposit.ts"],"names":[],"mappings":";AAAA,oCAAoC;AACpC,iDAAiE;AACjE,yCAAqD;AAMrD,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAoD;IAC5F,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACrF,MAAM,EAAE,GAAG,MAAM,cAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9D,MAAM,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;AACzC,CAAC,CAAC,CAAC;;AAEH,kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport { module as userModule } from '../auth/index';\n\n/**\n * Claim deposit from entry\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: { entryId: string, token: string, gas: number}) {\n    const txData = yield contracts.instance.entries.claimDeposit(data.entryId, data.gas);\n    const tx = yield userModule.auth.signData(txData, data.token);\n    return { tx, entryId: data.entryId };\n});\n\nexport default { execute, name: 'claim' };\n"]}