{"version":3,"file":"following-stream-iterator.js","sourceRoot":"","sources":["following-stream-iterator.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,wBAAyC,uBAAuB,CAAC,CAAA;AACjE,iCAA6B,2BAA2B,CAAC,CAAA;AACzD,kCAA2B,6BAA6B,CAAC,CAAA;AACzD,0BAAqB,mBAAmB,CAAC,CAAA;AACzC,2BAA+C,uBAAuB,CAAC,CAAA;AACvE,iCAA8B,+BAA+B,CAAC,CAAA;AAE9D,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAgE;IACxG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAClB,cAAI,CAAC,UAAU,CAAC,yBAAc,CAAC,CAAC;IACpC,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,yBAAc,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,SAAS,GAAG,MAAM,yBAAc,CAAC,OAAO,EAAE,CAAC;QACjD,MAAM,SAAS,GAAG,MAAM,wBAAgB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnF,cAAI,CAAC,OAAO,CAAC,yBAAc,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IACD,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO;QACzC,MAAM,8BAAa,CAAC,WAAW,EAAE;aAC5B,IAAI;aACJ,GAAG;aACH,mBAAmB,EAAE,CAAC;IAE/B,MAAM,SAAS,GAAG,OAAO,GAAG,yBAAc,CAAC;IAC3C,MAAM,MAAM,GAAG,EAAE,SAAS,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;IACrF,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,yBAAc,CAAC,CAAC;IAE/C,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACrE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpB,MAAM,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;AACjC,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport getFollowingList from '../profile/following-list';\nimport currentProfile from '../registry/current-profile';\nimport { wild } from '../models/records';\nimport { FOLLOWING_LIST, BLOCK_INTERVAL } from '../../config/settings';\nimport { GethConnector } from '@akashaproject/geth-connector';\n\nconst execute = Promise.coroutine(function*(data: { limit?: number, toBlock?: number, purgeCache?: boolean }) {\n    if (data.purgeCache) {\n        wild.removeFull(FOLLOWING_LIST);\n    }\n    if (!wild.hasFull(FOLLOWING_LIST)) {\n        const myProfile = yield currentProfile.execute();\n        const following = yield getFollowingList.execute({ akashaId: myProfile.akashaId });\n        wild.setFull(FOLLOWING_LIST, following.collection);\n    }\n    const toBlock = (data.toBlock) ? data.toBlock :\n        yield GethConnector.getInstance()\n            .web3\n            .eth\n            .getBlockNumberAsync();\n\n    const fromBlock = toBlock - BLOCK_INTERVAL;\n    const filter = { fromBlock: (fromBlock > 0) ? fromBlock : 0, toBlock: data.toBlock };\n    const following = wild.getFull(FOLLOWING_LIST);\n    //const entries = [];\n    const events = yield contracts.instance.entries.getPublished(filter);\n    console.log(events);\n    return { events, following };\n});\n\nexport default { execute, name: 'followingStreamIterator' };\n"]}