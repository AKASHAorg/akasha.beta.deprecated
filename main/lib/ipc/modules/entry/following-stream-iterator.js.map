{"version":3,"file":"following-stream-iterator.js","sourceRoot":"","sources":["following-stream-iterator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport getFollowingList from '../profile/following-list';\nimport currentProfile from '../registry/current-profile';\nimport { wild } from '../models/records';\nimport { FOLLOWING_LIST, BLOCK_INTERVAL } from '../../config/settings';\nimport { GethConnector } from '@akashaproject/geth-connector';\nimport getEntry from './get-entry';\n\n\nconst fetch = Promise.coroutine(function*(entries, following, toBlock, limit) {\n    const fromBlock = toBlock - BLOCK_INTERVAL;\n    const filter = { fromBlock: (fromBlock > 0) ? fromBlock : 0, toBlock: toBlock };\n    const events = yield contracts.instance.entries.getPublished(filter);\n    let lastBlock;\n    for (let i = 0; i < events.length; i++) {\n        if (following.indexOf(events[i].args.author) !== -1) {\n            entries.add(events[i].args.entryId.toString());\n            if (entries.size === limit) {\n                lastBlock = events[i].blockNumber;\n                break;\n            }\n        }\n    }\n    return lastBlock;\n});\n\nconst execute = Promise.coroutine(function*(data: { limit?: number, toBlock?: number, purgeCache?: boolean }) {\n    if (data.purgeCache) {\n        wild.removeFull(FOLLOWING_LIST);\n    }\n    if (!wild.hasFull(FOLLOWING_LIST)) {\n        const myProfile = yield currentProfile.execute();\n        const following = yield getFollowingList.execute({ akashaId: myProfile.akashaId });\n        wild.setFull(FOLLOWING_LIST, following.collection);\n    }\n    let toBlock = (data.toBlock) ? data.toBlock :\n        yield GethConnector.getInstance()\n            .web3\n            .eth\n            .getBlockNumberAsync();\n\n    const following = wild.getFull(FOLLOWING_LIST);\n    const entries = new Set();\n    const limit = (data.limit) ? data.limit : 5;\n    let lastBlock;\n    while (entries.size < limit && toBlock > 0) {\n        lastBlock = yield fetch(entries, following, toBlock, limit);\n        toBlock -= BLOCK_INTERVAL;\n    }\n\n    const collection = yield Promise.all(Array.from(entries).map((entryId) => getEntry.execute({ entryId })));\n    return { collection, toBlock: lastBlock };\n});\n\nexport default { execute, name: 'followingStreamIterator' };\n"]}