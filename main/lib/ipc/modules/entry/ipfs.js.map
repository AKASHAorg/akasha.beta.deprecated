{"version":3,"file":"ipfs.js","sourceRoot":"","sources":["ipfs.ts"],"names":[],"mappings":"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","sourcesContent":["import { IpfsConnector } from '@akashaproject/ipfs-connector';\nimport * as Promise from 'bluebird';\nimport { isEmpty } from 'ramda';\nimport { entries } from '../models/records';\n\nexport const DRAFT_BLOCKS = 'blocks';\nexport const ATOMIC_TYPE = 'atomic';\nexport const IMAGE_TYPE = 'image';\nexport const max_size = 200 * 1000;\nexport const EXCERPT = 'excerpt';\nexport const FEATURED_IMAGE = 'featuredImage';\nexport const DRAFT_PART = 'draft-part';\nexport const PREVIOUS_VERSION = 'previous-version';\n\nclass IpfsEntry {\n\n    id: string;\n    draft: any;\n    title: string;\n    licence: string;\n    tags: any[];\n    wordCount: number;\n    entryLinks: any[];\n\n    /**\n     *\n     * @param content\n     * @param tags\n     * @param previous\n     * @returns {Bluebird<U>}\n     */\n    create(content: any, tags: any[], previous?: { hash: string, version: number }) {\n        const ipfsApiRequests = [];\n        this.entryLinks = [];\n        this.draft = Object.assign({}, content.draft);\n        content.draft = null;\n        this.title = content.title;\n        this.licence = content.licence;\n        this.tags = tags;\n        this.wordCount = content.wordCount;\n        if (content.featuredImage) {\n            ipfsApiRequests.push(\n                IpfsConnector.getInstance().api\n                    .add(content.featuredImage, true)\n                    .then((obj) => {\n                        this.entryLinks.push(Object.assign({}, obj, { name: FEATURED_IMAGE }));\n                    }));\n        }\n\n        ipfsApiRequests.push(\n            IpfsConnector.getInstance().api\n                .add(content.excerpt)\n                .then((obj) => this.entryLinks.push(Object.assign({}, obj, { name: EXCERPT }))));\n\n        if (previous && previous.hash) {\n            IpfsConnector.getInstance().api\n                .getStats(previous.hash)\n                .then((stats) => {\n                    this.entryLinks.push({ hash: stats.Hash, size: stats.CumulativeSize, name: PREVIOUS_VERSION });\n                });\n        }\n\n        return Promise.all(ipfsApiRequests)\n            .then(() => this._uploadMediaDraft())\n            .then((parts) => {\n                return IpfsConnector.getInstance().api\n                    .createNode({\n                        draftParts: parts,\n                        licence: this.licence,\n                        tags: this.tags,\n                        title: this.title,\n                        wordCount: this.wordCount,\n                        version: (previous && previous.hasOwnProperty('version')) ? ++previous.version : 0\n                    }, this.entryLinks).then((node) => node.hash)\n            });\n    }\n\n    /**\n     *\n     * @param content\n     * @param tags\n     * @param previousHash\n     */\n    edit(content: any, tags: any[], previousHash) {\n        return IpfsConnector.getInstance().api\n            .get(previousHash)\n            .then((data) => {\n                if (content.hasOwnProperty('version')) {\n                    delete content.version;\n                }\n\n                return this.create(\n                    content,\n                    tags,\n                    {\n                        hash: previousHash,\n                        version: (data.version) ? data.version : 0\n                    }\n                );\n            });\n    }\n\n    private _filterForImages() {\n        const blockIndex = [];\n        const imageEntities = this.draft[DRAFT_BLOCKS].filter((element, index) => {\n            if (element.type !== ATOMIC_TYPE || isEmpty(element.data.type)) {\n                return false;\n            }\n            if (element.data.type === IMAGE_TYPE) {\n                blockIndex.push(index);\n                return true;\n            }\n            return false;\n        });\n\n        return { blockIndex, imageEntities };\n    }\n\n    private _uploadMediaDraft() {\n        /**\n         * filter draft object for images and upload them to ipfs\n         */\n        const uploads = [];\n        const { imageEntities, blockIndex } = this._filterForImages();\n\n        imageEntities.forEach((element, index) => {\n            const keys = Object.keys(element.data.files).sort();\n            keys.forEach((imSize) => {\n                if (!Buffer.isBuffer(element.data.files[imSize].src)) {\n                    return false;\n                }\n                uploads.push(\n                    IpfsConnector.getInstance().api\n                        .add(element.data.files[imSize].src, true)\n                        .then(\n                            (obj) => {\n                                this.entryLinks.push(Object.assign({}, obj, { name: (imSize + index) }));\n                                this.draft[DRAFT_BLOCKS][blockIndex[index]].data.files[imSize].src = obj.hash;\n                            }\n                        )\n                );\n            });\n        });\n        return Promise.all(uploads).then(() => {\n            let start, end;\n            const slices = [];\n            const entryDraft = Buffer.from(JSON.stringify(this.draft));\n            const parts = Math.ceil(entryDraft.length / max_size);\n            for (let q = 0; q <= parts; q++) {\n                start = q * max_size;\n                end = start + max_size;\n\n                if (start > entryDraft.length) {\n                    break;\n                }\n\n                if (end > entryDraft.length) {\n                    end = entryDraft.length;\n                }\n                let sliceDraft = entryDraft.slice(start, end);\n                slices.push(\n                    IpfsConnector.getInstance().api\n                        .add(sliceDraft)\n                        .then(\n                            (obj) => {\n                                this.entryLinks.push(Object.assign({}, obj, { name: (DRAFT_PART + q) }));\n                            }\n                        )\n                );\n            }\n            return Promise.all(slices).then(() => parts);\n        });\n    }\n}\n/**\n *\n * @param hash\n * @returns {any}\n */\nexport const getShortContent = Promise.coroutine(function*(hash) {\n    if (entries.getShort(hash)) {\n        return Promise.resolve(entries.getShort(hash));\n    }\n    const response = {\n        [EXCERPT]: '',\n        [FEATURED_IMAGE]: ''\n    };\n    const root = yield IpfsConnector.getInstance().api.get(hash);\n    const extraData = yield IpfsConnector.getInstance().api.findLinks(hash, [EXCERPT, FEATURED_IMAGE]);\n    for (let i = 0; i < extraData.length; i++) {\n        if (extraData[i].name === FEATURED_IMAGE) {\n            response[FEATURED_IMAGE] = extraData[i].multihash;\n        }\n        if (extraData[i].name === EXCERPT) {\n            response[EXCERPT] = yield IpfsConnector.getInstance().api.get(extraData[i].multihash);\n        }\n    }\n    const data = Object.assign({}, root, response);\n    entries.setShort(hash, data);\n    return data;\n});\n\n\n/**\n *\n * @param hash\n * @returns {any}\n */\nexport const getFullContent = Promise.coroutine(function*(hash) {\n    if (entries.getFull(hash)) {\n        return Promise.resolve(entries.getFull(hash));\n    }\n    let tmp;\n    let draft;\n    const root = yield IpfsConnector.getInstance().api.get(hash);\n    const parts = [];\n    const draftParts = [];\n    for (let i = 0; i < root.draftParts; i++) {\n        parts.push(DRAFT_PART + i);\n    }\n    const extraData = yield IpfsConnector.getInstance().api.findLinks(hash, parts);\n    for (let y = 0; y < extraData.length; y++) {\n        tmp = yield IpfsConnector.getInstance().api.getObject(extraData[y].multihash, true);\n        draftParts.push(tmp);\n    }\n    const draftObj = draftParts.map((el) => {\n        let currentData = (el.toJSON()).data;\n        if (!Buffer.isBuffer(currentData)) {\n            currentData = Buffer.from(currentData);\n        }\n        return currentData;\n    });\n    const content = (Buffer.concat(draftObj)).toString();\n    try {\n        draft = JSON.parse(content);\n    } catch (err) {\n        draft = null;\n    }\n    const shortContent = yield getShortContent(hash);\n    const data = Object.assign({}, root, shortContent, { draft: draft });\n    entries.setFull(hash, data);\n    tmp = null;\n    draft = null;\n    return data;\n});\n\nexport default IpfsEntry;\n\n\n"]}