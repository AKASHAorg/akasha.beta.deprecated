{"version":3,"file":"entry-profile-iterator.js","sourceRoot":"","sources":["entry-profile-iterator.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,iDAAiE;AACjE,2CAAmC;AAKnC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAA0D;IAClG,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjH,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;IACvD,CAAC;IACD,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACd,UAAU,CAAC,IAAI,CAAC,mBAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QAC1D,OAAO,GAAG,CAAC,CAAC;IAChB,CAAC;IAED,OAAO,OAAO,GAAG,UAAU,EAAE,CAAC;QAC1B,SAAS,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC3F,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;YACpB,KAAK,CAAC;QACV,CAAC;QACD,UAAU,CAAC,IAAI,CAAC,mBAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QAC1D,OAAO,EAAE,CAAC;IACd,CAAC;IACD,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAE9C,MAAM,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;AAC/E,CAAC,CAAC,CAAC;AAEH,kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,sBAAsB,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\nimport getEntry from './get-entry';\n/**\n * Get entries indexed by publisher\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: { start?: number, limit?: number, akashaId: string }) {\n    let currentId = (data.start) ? data.start : yield contracts.instance.entries.getProfileEntryFirst(data.akashaId);\n    if (currentId === '0') {\n        return { collection: [], akashaId: data.akashaId };\n    }\n    const maxResults = (data.limit) ? data.limit : 5;\n    const fetchCalls = [];\n    let counter = 0;\n    if (!data.start) {\n        fetchCalls.push(getEntry.execute({ entryId: currentId }));\n        counter = 1;\n    }\n\n    while (counter < maxResults) {\n        currentId = yield contracts.instance.entries.getProfileEntryNext(data.akashaId, currentId);\n        if (currentId === '0') {\n            break;\n        }\n        fetchCalls.push(getEntry.execute({ entryId: currentId }));\n        counter++;\n    }\n    const results = yield Promise.all(fetchCalls);\n\n    return { collection: results, akashaId: data.akashaId, limit: maxResults };\n});\n\nexport default { execute, name: 'entryProfileIterator' };\n\n"]}