{"version":3,"file":"register-profile.js","sourceRoot":"","sources":["register-profile.ts"],"names":[],"mappings":";;AAAA,yCAAqD;AACrD,0CAAyC;AACzC,oCAAoC;AACpC,iDAAiE;AAMjE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAA0B;IAClE,MAAM,QAAQ,GAAG,MAAM,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC7F,MAAM,EAAE,GAAG,MAAM,cAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9D,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC","sourcesContent":["import { module as userModule } from '../auth/index';\nimport { create } from '../profile/ipfs';\nimport * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\n\n/**\n * Register a new AKASHA ID\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: ProfileCreateRequest) {\n    const ipfsHash = yield create(data.ipfs);\n    const txData = yield contracts.instance.registry.register(data.akashaId, ipfsHash, data.gas);\n    const tx = yield userModule.auth.signData(txData, data.token);\n    return { tx };\n});\n\nexport default { execute, name: 'registerProfile' };\n"]}