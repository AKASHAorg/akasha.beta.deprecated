{"version":3,"file":"address-of-akashaid.js","sourceRoot":"","sources":["address-of-akashaid.ts"],"names":[],"mappings":";AAAA,oCAAoC;AACpC,iDAAiE;AAMjE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAA4B;IACpE,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAClB,CAAC,OAAO;QACJ,MAAM,CAAC,mBAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAC,CACJ,CAAC;IACF,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC5C,MAAM,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AACzC,CAAC,CAAC,CAAC;;AAEH,kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\n\n/**\n * Resolve akashaId[] to a contract address\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: ProfileExistsRequest[]) {\n    const batch = data.map(\n        (profile) => {\n            return contracts.instance.registry.addressOf(profile.akashaId);\n        }\n    );\n    const collection = yield Promise.all(batch);\n    return { collection, request: data };\n});\n\nexport default { execute, name: 'addressOf' };\n\n"]}