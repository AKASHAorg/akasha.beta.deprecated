{"version":3,"file":"tags-iterator.js","sourceRoot":"","sources":["tags-iterator.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AACpC,wBAAyC,uBAAuB,CAAC,CAAA;AAMjE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAU,IAAuC;IAC/E,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IACxF,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;IAC9B,CAAC;IACD,IAAI,WAAW,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACtE,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClD,MAAM,OAAO,GAAG,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;IAC7D,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,OAAO,OAAO,GAAG,UAAU,EAAE,CAAC;QAC1B,SAAS,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAChE,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;YACpB,KAAK,CAAC;QACV,CAAC;QACD,WAAW,GAAG,MAAM,mBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAClE,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;QACzD,OAAO,EAAE,CAAC;IACd,CAAC;IACD,MAAM,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;AACnC,CAAC,CAAC,CAAC;AAEH;kBAAe,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { constructed as contracts } from '../../contracts/index';\n\n/**\n * Get a tags created\n * @type {Function}\n */\nconst execute = Promise.coroutine(function*(data: {start?: number, limit?: number }) {\n    let currentId = (data.start) ? data.start : yield contracts.instance.tags.getFirstTag();\n    if (currentId === '0') {\n        return { collection: [] };\n    }\n    let currentName = yield contracts.instance.tags.getTagName(currentId);\n    const maxResults = (data.limit) ? data.limit : 10;\n    const results = [{ tagId: currentId, tagName: currentName }];\n    let counter = 1;\n    while (counter < maxResults) {\n        currentId = yield contracts.instance.tags.getNextTag(currentId);\n        if (currentId === '0') {\n            break;\n        }\n        currentName = yield contracts.instance.tags.getTagName(currentId);\n        results.push({ tagId: currentId, tagName: currentName });\n        counter++;\n    }\n    return { collection: results };\n});\n\nexport default { execute, name: 'tagIterator' };\n\n"]}