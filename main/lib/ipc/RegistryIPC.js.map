{"version":3,"file":"RegistryIPC.js","sourceRoot":"","sources":["RegistryIPC.ts"],"names":[],"mappings":";AACA,gCAA0B,uBAAuB,CAAC,CAAA;AAClD,2BAAqB,aAAa,CAAC,CAAA;AACnC,4BAA6B,mBAAmB,CAAC,CAAA;AACjD,wBAAuC,mBAAmB,CAAC,CAAA;AAG3D,0BAA0B,uBAAa;IAEnC;QACI,OAAO,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IACjE,CAAC;IAED,aAAa,CAAC,WAAwB;QAClC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAEO,cAAc;QAClB,IAAI,CAAC,gBAAgB,CACjB,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,aAAa,EAC/C,CAAC,KAAU,EAAE,IAA0B;YACnC,mBAAS,CAAC,QAAQ;iBACb,QAAQ;iBACR,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC;iBAC5B,IAAI,CAAC,CAAC,MAAe;gBAClB,MAAM,QAAQ,GAA0B,wBAAY,CAAC,EAAE,QAAA,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC1F,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,aAAa,EAC/C,QAAQ,CACX,CAAC;YACN,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,KAAY;gBAChB,MAAM,QAAQ,GAA0B,wBAAY,CAAC,EAAE,OAAA,KAAK,EAAE,CAAC,CAAC;gBAChE,IAAI,CAAC,SAAS,CACV,kBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,aAAa,EAC/C,QAAQ,CACX,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AAAA","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\nimport ModuleEmitter from './event/ModuleEmitter';\nimport channels from '../channels';\nimport { mainResponse } from './event/responses';\nimport {constructed as contracts} from './contracts/index';\nimport WebContents = Electron.WebContents;\n\nclass RegistryIPC extends ModuleEmitter {\n\n    constructor() {\n        super();\n        this.MODULE_NAME = 'registry';\n        this.DEFAULT_MANAGED = ['getCurrentProfile', 'getByAddress'];\n    }\n\n    initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n    }\n\n    private _profileExists() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].profileExists,\n            (event: any, data: ProfileExistsRequest) => {\n                contracts.instance\n                    .registry\n                    .profileExists(data.username)\n                    .then((exists: boolean) => {\n                        const response: ProfileExistsResponse = mainResponse({ exists, username: data.username });\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].profileExists,\n                            response\n                        );\n                    })\n                    .catch((error: Error) => {\n                        const response: ProfileExistsResponse = mainResponse({ error });\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].profileExists,\n                            response\n                        );\n                    });\n            });\n        return this;\n    }\n}\n"]}