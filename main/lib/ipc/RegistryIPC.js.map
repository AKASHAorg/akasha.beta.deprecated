{"version":3,"file":"RegistryIPC.js","sourceRoot":"","sources":["RegistryIPC.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../../typings/main.d.ts\" />\nimport ModuleEmitter from './event/ModuleEmitter';\nimport { unpad } from 'ethereumjs-util';\nimport channels from '../channels';\nimport { mainResponse } from './event/responses';\nimport { constructed as contracts } from './contracts/index';\nimport { module as userModule } from './modules/auth/index';\nimport { module as profileModule } from './modules/profile/index';\nimport WebContents = Electron.WebContents;\n\nclass RegistryIPC extends ModuleEmitter {\n\n    constructor() {\n        super();\n        this.MODULE_NAME = 'registry';\n        this.DEFAULT_MANAGED = ['getCurrentProfile', 'getByAddress'];\n    }\n\n    public initListeners(webContents: WebContents) {\n        this.webContents = webContents;\n        this._profileExists()\n            ._getCurrentProfile()\n            ._getByAddress()\n            ._registerProfile()\n            ._getErrorEvent()\n            ._getRegistered()\n            ._manager();\n    }\n\n    private _profileExists() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].profileExists,\n            (event: any, data: ProfileExistsRequest) => {\n                contracts.instance\n                    .registry\n                    .profileExists(data.username)\n                    .then((exists: boolean) => {\n                        const response: ProfileExistsResponse = mainResponse({\n                            exists,\n                            username: data.username\n                        });\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].profileExists,\n                            response,\n                            event\n                        );\n                    })\n                    .catch((error: Error) => {\n                        const response: ProfileExistsResponse = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { username: data.username }\n                            }\n                        });\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].profileExists,\n                            response,\n                            event\n                        );\n                    });\n            });\n        return this;\n    }\n\n    private _getCurrentProfile() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getCurrentProfile,\n            (event: any) => {\n                let response: CurrentProfileResponse;\n                contracts.instance\n                    .registry\n                    .getMyProfile()\n                    .then((address: string) => {\n                        const addr = unpad(address);\n                        response = (addr) ? mainResponse({ address }) : mainResponse({ address: addr });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({ error: { message: error.message } });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getCurrentProfile,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getByAddress() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getByAddress,\n            (event: any, data: ProfileByAddressRequest) => {\n                let response: ProfileByAddressResponse;\n                contracts.instance\n                    .registry\n                    .getByAddress(data.ethAddress)\n                    .then((address: string) => {\n                        const addr = unpad(address);\n                        response = mainResponse({ profileAddress: addr });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { ethAddress: data.ethAddress }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getByAddress,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _registerProfile() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].registerProfile,\n            (event: any, data: ProfileCreateRequest) => {\n                let response: ProfileCreateResponse;\n                let newData = Object.assign({}, data);\n                data = null;\n                profileModule\n                    .helpers\n                    .create(newData.ipfs)\n                    .then((ipfsHash: string) => {\n                        return contracts.instance\n                            .registry\n                            .register(newData.username, ipfsHash, newData.gas);\n                    })\n                    .then((txData: any) => {\n                        return userModule.auth.signData(txData, newData.token);\n                    })\n                    .then((tx: string) => {\n                        response = mainResponse({ tx });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { username: newData.username }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        newData = null;\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].registerProfile,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getErrorEvent() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getErrorEvent,\n            (event: any, data: ProfileErrorEventRequest) => {\n                let response: ProfileErrorEventResponse;\n                contracts\n                    .instance\n                    .registry\n                    .getError(data)\n                    .then((events) => {\n                        response = mainResponse({ events });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getErrorEvent,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n\n    private _getRegistered() {\n        this.registerListener(\n            channels.server[this.MODULE_NAME].getRegistered,\n            (event: any, data: ProfileRegisteredEventRequest) => {\n                let response: ProfileRegisteredEventResponse;\n                contracts\n                    .instance\n                    .registry\n                    .getRegistered(data)\n                    .then((collection) => {\n                        response = mainResponse({ collection });\n                    })\n                    .catch((error: Error) => {\n                        response = mainResponse({\n                            error: {\n                                message: error.message,\n                                from: { address: data.address }\n                            }\n                        });\n                    })\n                    .finally(() => {\n                        this.fireEvent(\n                            channels.client[this.MODULE_NAME].getRegistered,\n                            response,\n                            event\n                        );\n                    });\n            }\n        );\n        return this;\n    }\n}\n\nexport default RegistryIPC;\n"]}