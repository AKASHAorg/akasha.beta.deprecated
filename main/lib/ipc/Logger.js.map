{"version":3,"file":"Logger.js","sourceRoot":"","sources":["Logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { join as pathJoin } from 'path';\nimport { Logger, transports } from 'winston';\nimport { constants, access as fsAccess, mkdir } from 'fs';\nimport { app } from 'electron';\n\nconst symbolEnforcer = Symbol();\nconst symbol = Symbol();\n\nclass AppLogger {\n    public logPath: string;\n    public loggers: Object;\n    public PATH_OK: boolean;\n\n    /**\n     *\n     * @param enforcer\n     */\n    constructor(enforcer: Symbol) {\n        if (enforcer !== symbolEnforcer) {\n            throw new Error('Cannot construct singleton');\n        }\n        this.loggers = {};\n        const defaultPath = pathJoin(app.getPath('userData'), 'logs');\n        this._setLogsFolder(defaultPath);\n    }\n\n    /**\n     *\n     * @returns {*}\n     */\n    static getInstance() {\n        if (!this[symbol]) {\n            this[symbol] = new AppLogger(symbolEnforcer);\n        }\n        return this[symbol];\n    }\n\n    /**\n     *\n     * @param path\n     * @private\n     */\n    private _setLogsFolder(path: string) {\n        this.logPath = path;\n        return fsAccess(this.logPath, constants.W_OK, (err) => {\n            if (err) {\n                mkdir(this.logPath, (error) => {\n                    if (error) {\n                        this.PATH_OK = false;\n                        throw new Error(error.message);\n                    }\n                    this.PATH_OK = true;\n                });\n                return;\n            }\n            this.PATH_OK = true;\n        });\n    }\n\n    /**\n     *\n     * @param name\n     * @param level\n     * @param errorLevel\n     * @param maxsize\n     * @param maxFiles\n     * @returns {any}\n     */\n    registerLogger(name: string, {\n        level = 'info',\n        errorLevel = 'warn',\n        maxsize = 10 * 1024,\n        maxFiles = 1\n    } = {}) {\n        if (!this.PATH_OK) {\n            throw new Error(`${this.logPath} is not accessible`);\n        }\n        this.loggers[name] = new (Logger)({\n            transports: [\n                new (transports.File)({\n                    filename: pathJoin(this.logPath, `${name}.error.log`),\n                    level: errorLevel,\n                    maxsize,\n                    maxFiles,\n                    name: `${name}Error`,\n                    tailable: true,\n                    zippedArchive: true\n                }),\n                new (transports.File)({\n                    filename: pathJoin(this.logPath, `${name}.info.log`),\n                    level,\n                    maxsize,\n                    maxFiles,\n                    name: `${name}Info`,\n                    tailable: true,\n                    zippedArchive: true\n                })\n            ]\n        });\n        return this.loggers[name];\n    }\n\n    /**\n     *\n     * @param name\n     * @returns {*}\n     */\n    getLogger(name: string) {\n        return this.loggers[name];\n    }\n}\n\nexport default AppLogger;\n"]}