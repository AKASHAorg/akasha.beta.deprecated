{"version":3,"file":"channels.js","sourceRoot":"","sources":["channels.ts"],"names":[],"mappings":";AAAA,yBAA2B,QAAQ,CAAC,CAAA;AACpC,qBAAyB,IAAI,CAAC,CAAA;AAC9B,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAc;IAC/B,MAAM,IAAI,GAAG,mBAAU,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO;QACjB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC;AACF,MAAM,QAAQ,GAAG;IAEb,IAAI,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,gBAAgB,EAAE,oBAAoB,CAAC;IAE5F,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;IAE7B,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,aAAa,EAAE,gBAAgB,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC;IAE7G,IAAI,EAAE,CAAC,SAAS,EAAE,cAAc,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,CAAC;IAErE,OAAO,EAAE,CAAC,SAAS,EAAE,gBAAgB,EAAE,cAAc,EAAE,SAAS,EAAE,YAAY,CAAC;IAE/E,QAAQ,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,cAAc,CAAC;IAE9F,EAAE,EAAE,CAAC,SAAS,EAAE,YAAY,EAAE,WAAW,CAAC;CAC7C,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACvC,MAAM,GAAG,GAAG,aAAQ,EAAE,CAAC,cAAc,EAAE,CAAC;AACxC,MAAM,MAAM,GAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;AAC/C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI;IAC/B,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,QAAgB;QACpC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI;YACnB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YAC5B,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH;kBAAe,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC","sourcesContent":["import { createHash } from 'crypto';\nimport { totalmem } from 'os';\nconst hashPath = (...path: string[]) => {\n    const hash = createHash('sha256');\n    path.forEach((segment) => {\n        hash.update(segment);\n    });\n    return hash.digest('hex');\n};\nconst channels = {\n\n    auth: ['manager', 'login', 'logout', 'requestEther', 'generateEthKey', 'getLocalIdentities'],\n\n    entry: ['manager', 'publish'],\n\n    geth: ['manager', 'options', 'startService', 'stopService', 'restartService', 'syncStatus', 'logs', 'status'],\n\n    ipfs: ['manager', 'startService', 'stopService', 'status', 'resolve'],\n\n    profile: ['manager', 'getProfileData', 'getMyBalance', 'getIpfs', 'unregister'],\n\n    registry: ['manager', 'profileExists', 'registerProfile', 'getCurrentProfile', 'getByAddress'],\n\n    tx: ['manager', 'addToQueue', 'emitMined'],\n};\n\nconst processes = ['server', 'client'];\nconst mem = totalmem().toLocaleString();\nconst EVENTS: any = { client: {}, server: {} };\nObject.keys(channels).forEach((attr) => {\n    channels[attr].forEach((endpoint: string) => {\n        processes.forEach((proc) => {\n            if (!EVENTS[proc].hasOwnProperty(attr)) {\n                EVENTS[proc][attr] = {};\n            }\n            EVENTS[proc][attr][endpoint] = hashPath(proc, attr, mem, endpoint);\n        });\n    });\n});\nexport default { client: EVENTS.client, server: EVENTS.server };\n\n"]}