{"version":3,"file":"channels.js","sourceRoot":"","sources":["channels.ts"],"names":[],"mappings":";AAAA,yBAA2B,QAAQ,CAAC,CAAA;AAEpC,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAc;IAC/B,MAAM,IAAI,GAAG,mBAAU,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO;QACjB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC;AACF,MAAM,QAAQ,GAAG;IAEb,IAAI,EAAE,CAAC,cAAc,EAAE,aAAa,EAAE,UAAU,CAAC;IAEjD,IAAI,EAAE,CAAC,cAAc,EAAE,aAAa,CAAC;IAErC,MAAM,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;IAEpC,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,aAAa,EAAE,iBAAiB;QAClF,gBAAgB,EAAE,iBAAiB,EAAE,YAAY,EAAE,cAAc,CAAC;IAEtE,KAAK,EAAE,CAAC,SAAS,CAAC;CACrB,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACvC,MAAM,MAAM,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;AAC1C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI;IAC/B,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,QAAgB;QACpC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI;YACnB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YAC5B,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnG,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH;kBAAe,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC","sourcesContent":["import { createHash } from 'crypto';\nimport set = Reflect.set;\nconst hashPath = (...path: string[]) => {\n    const hash = createHash('sha256');\n    path.forEach((segment) => {\n        hash.update(segment);\n    });\n    return hash.digest('hex');\n};\nconst channels = {\n\n    geth: ['startService', 'stopService', 'contract'],\n\n    ipfs: ['startService', 'stopService'],\n\n    logger: ['gethInfo', 'stopGethInfo'],\n\n    user: ['exists', 'login', 'logout', 'createCoinbase', 'faucetEther', 'registerProfile',\n        'getProfileData', 'listEthAccounts', 'getBalance', 'getIpfsImage'],\n\n    entry: ['publish']\n};\n\nconst processes = ['server', 'client'];\nconst EVENTS = { server: {}, client: {} };\nObject.keys(channels).forEach((attr) => {\n    channels[attr].forEach((endpoint: string) => {\n        processes.forEach((proc) => {\n            if (!EVENTS[proc].hasOwnProperty(attr)) {\n                EVENTS[proc][attr] = {};\n            }\n            EVENTS[proc][attr][endpoint] = hashPath(proc, attr, endpoint, new Date().getTime().toString());\n        });\n    });\n});\nexport default { server: EVENTS.server, client: EVENTS.client };\n\n"]}