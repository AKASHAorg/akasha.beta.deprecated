{"version":3,"file":"channels.js","sourceRoot":"","sources":["channels.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from 'crypto';\nimport { totalmem } from 'os';\nconst hashPath = (...path: string[]) => {\n    const hash = createHash('sha256');\n    path.forEach((segment) => {\n        hash.update(segment);\n    });\n    return hash.digest('hex');\n};\nconst channels = {\n\n    auth: ['login', 'logout', 'requestEther', 'generateEthKey', 'getLocalIdentities'],\n\n    tags: ['checkFormat', 'create', 'tagIterator', 'tagSubIterator', 'exists', 'getTagsCreated', 'subsCount',\n        'subscribe', 'getTagId', 'getTagName', 'unSubscribe', 'isSubscribed', 'searchTag'],\n\n    entry: ['getProfileEntriesCount', 'getTagEntriesCount', 'isActive', 'getEntry', 'publish', 'update', 'canClaim', 'claim',\n        'downvote', 'getScore', 'getDepositBalance', 'upvote', 'voteCost', 'voteCount', 'entryTagIterator',\n        'entryProfileIterator', 'votesIterator', 'getEntriesStream', 'getVoteOf', 'getEntryBalance', 'getEntryList'],\n\n    comments: ['getComment', 'comment', 'commentsCount', 'removeComment', 'commentsIterator'],\n\n    geth: ['options', 'startService', 'stopService', 'restartService', 'syncStatus', 'logs', 'status'],\n\n    ipfs: ['startService', 'stopService', 'status', 'resolve', 'getConfig', 'setPorts', 'getPorts'],\n\n    profile: ['getBalance', 'followProfile', 'getFollowersCount', 'getFollowingCount', 'getProfileData',\n        'unFollowProfile', 'updateProfileData', 'followersIterator', 'followingIterator', 'isFollower', 'isFollowing',\n        'getFollowingList'],\n\n    registry: ['fetchRegistered', 'addressOf', 'checkIdFormat', 'getCurrentProfile', 'profileExists', 'registerProfile', 'getByAddress', 'unregister'],\n\n    notifications: ['me', 'feed', 'setFilter'],\n\n    tx: ['addToQueue', 'emitMined'],\n\n    licenses: ['getLicenceById', 'getLicenses']\n};\n\nconst processes = ['server', 'client'];\nconst mem = totalmem().toLocaleString();\nconst EVENTS: any = { client: {}, server: {} };\nObject.keys(channels).forEach((attr) => {\n    channels[attr].forEach((endpoint: string) => {\n        processes.forEach((proc) => {\n            if (!EVENTS[proc].hasOwnProperty(attr)) {\n                EVENTS[proc][attr] = { manager: hashPath(proc, attr, mem, 'manager') };\n            }\n            EVENTS[proc][attr][endpoint] = hashPath(proc, attr, mem, endpoint);\n        });\n    });\n});\nexport default { client: EVENTS.client, server: EVENTS.server };\n\n"]}