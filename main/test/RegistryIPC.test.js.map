{"version":3,"file":"RegistryIPC.test.js","sourceRoot":"","sources":["RegistryIPC.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { ipcMain } from 'electron';\nimport RegistryIPC from '../lib/ipc/RegistryIPC';\nimport { expect } from 'chai';\nimport channel from '../lib/channels';\nimport * as helpers from './helpers';\n\nclass RegistryIPCtest extends RegistryIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(helpers.fireEvent(channel, data, event));\n    }\n}\n\ndescribe('RegistryIPC', function () {\n    this.timeout(120000);\n    let registryChannel: RegistryIPCtest;\n    let token: string;\n    let ethAddress: string;\n    let txPending: string;\n\n    before(function (done) {\n        expect(helpers.initLogger()).to.exist;\n        setTimeout(() => helpers.startServices(done), 400);\n    });\n\n    it('--constructs channel api', function () {\n        registryChannel = new RegistryIPCtest();\n        expect(registryChannel).to.exist;\n    });\n\n    it('--can init listeneres', function () {\n        registryChannel.initListeners(null);\n        expect(registryChannel.listeners.size).to.be.above(0);\n    });\n\n    it('--waits for sync', function (done) {\n        helpers.checkSynced(done);\n    });\n\n    it('--should add to listened channels from #manager', function (done) {\n        let listenersNr = 0;\n        const listenOn = [\n            channel.server.registry.profileExists,\n            channel.server.registry.registerProfile,\n            channel.server.registry.getErrorEvent,\n            channel.server.registry.getRegistered\n        ];\n        registryChannel.callTest.set(\n            channel.client.registry.manager,\n            (injected) => {\n                listenersNr++;\n                if (listenersNr === listenOn.length) {\n                    done()\n                }\n            }\n        );\n        listenOn.forEach((channelName) => {\n            ipcMain.emit(channel.server.registry.manager, '', { channel: channelName, listen: true });\n        });\n    });\n\n    it('--should check if profile exists #profileExists', function (done) {\n        registryChannel.callTest.set(\n            channel.client.registry.profileExists,\n            (injected) => {\n                expect(injected.data.data).to.exist;\n                expect(injected.data.data.exists).to.exist;\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.registry.profileExists, '', {username: 'costel'});\n    });\n\n    it('--should register new address', function (done) {\n       helpers.getNewAddress(done, (newAddress) => {\n           ethAddress = newAddress;\n       });\n    });\n\n    it('--should get aethers', function (done) {\n       helpers.getAethers(done, ethAddress, (tx) => {\n           txPending = tx;\n       });\n    });\n\n    it('--should get a token', function (done){\n        helpers.getToken(done, {account: ethAddress, password: helpers.pwd, rememberTime: 2}, (generated: string) => {\n            token = generated;\n        });\n    });\n\n    it('--should wait for #pendingTx', function (done) {\n       helpers.confirmTx(done, txPending);\n    });\n\n    it('--should register new profile #registerProfile', function(done) {\n       registryChannel.callTest.set(\n           channel.client.registry.registerProfile,\n           (injected) => {\n               expect(injected.data).to.exist;\n               expect(injected.data.data.tx).to.exist;\n               txPending = injected.data.data.tx;\n               done();\n           }\n       );\n        ipcMain.emit(channel.server.registry.registerProfile, '', {token, username: 'TuserT'+ new Date().getTime(),\n            ipfs:{firstName: 'costel', lastName: 'ionel',\n                avatar: new Uint8Array(1000000),\n                backgroundImage: {\n                    xs: {src: new Uint8Array(1000000), width: 100, height: 100 },\n                    sm: {src: new Uint8Array(1000000), width: 200, height: 100 },\n                    md: {src: new Uint8Array(1000000), width: 300, height: 100 },\n                } }});\n    });\n\n    it('--should wait for registry tx', function (done) {\n        helpers.confirmTx(done, txPending);\n    });\n\n    after(function (done) {\n        helpers.stopServices(done);\n    });\n});\n"]}