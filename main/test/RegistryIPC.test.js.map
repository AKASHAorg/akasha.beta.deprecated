{"version":3,"file":"RegistryIPC.test.js","sourceRoot":"","sources":["RegistryIPC.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { ipcMain } from 'electron';\nimport RegistryIPC from '../lib/ipc/RegistryIPC';\nimport { expect } from 'chai';\nimport channel from '../lib/channels';\nimport * as helpers from './helpers';\n\nclass RegistryIPCtest extends RegistryIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(helpers.fireEvent(channel, data, event));\n    }\n}\n\ndescribe('RegistryIPC', function () {\n    this.timeout(120000);\n    let registryChannel: RegistryIPCtest;\n    let token: string;\n    let ethAddress: string;\n    let txPending: string;\n\n    before(function (done) {\n        expect(helpers.initLogger()).to.exist;\n        setTimeout(() => helpers.startServices(done), 400);\n    });\n\n    it('--constructs channel api', function () {\n        registryChannel = new RegistryIPCtest();\n        expect(registryChannel).to.exist;\n    });\n\n    it('--can init listeneres', function () {\n        registryChannel.initListeners(null);\n        expect(registryChannel.listeners.size).to.be.above(0);\n    });\n\n    it('--waits for sync', function (done) {\n        helpers.checkSynced(done);\n    });\n\n    it('--should add to listened channels from #manager', function (done) {\n        let listenersNr = 0;\n        const listenOn = [\n            channel.server.registry.profileExists,\n            channel.server.registry.registerProfile\n        ];\n        registryChannel.callTest.set(\n            channel.client.registry.manager,\n            (injected) => {\n                listenersNr++;\n                if (listenersNr === listenOn.length) {\n                    done()\n                }\n            }\n        );\n        listenOn.forEach((channelName) => {\n            ipcMain.emit(channel.server.registry.manager, '', { channel: channelName, listen: true });\n        });\n    });\n\n    it('--should check if profile exists #profileExists', function (done) {\n        registryChannel.callTest.set(\n            channel.client.registry.profileExists,\n            (injected) => {\n                expect(injected.data.data).to.exist;\n                expect(injected.data.data.exists).to.exist;\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.registry.profileExists, '', { akashaId: 'costel' });\n    });\n\n    it('--should register new address', function (done) {\n        helpers.getNewAddress(done, (newAddress) => {\n            ethAddress = newAddress;\n        });\n    });\n\n    it('--should get aethers', function (done) {\n        helpers.getAethers(done, ethAddress, (tx) => {\n            txPending = tx;\n        });\n    });\n\n    it('--should get a token', function (done) {\n        helpers.getToken(done, {\n            account: ethAddress,\n            password: helpers.pwd,\n            rememberTime: 2,\n            registering: true\n        }, (generated: string) => {\n            token = generated;\n        });\n    });\n\n    it('--should wait for #pendingTx', function (done) {\n        helpers.confirmTx(done, txPending);\n    });\n\n    it('--should register new profile #registerProfile', function (done) {\n        registryChannel.callTest.set(\n            channel.client.registry.registerProfile,\n            (injected) => {\n                console.log(injected.data);\n                expect(injected.data).to.exist;\n                expect(injected.data.data.tx).to.exist;\n                txPending = injected.data.data.tx;\n                console.log(txPending);\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.registry.registerProfile, '', {\n            token, akashaId: 'costelinho',\n            ipfs: {\n                firstName: 'Tritza', lastName: 'Fanica' + new Date().getTime(),\n                avatar: Buffer.alloc(100000, '1'),\n                backgroundImage: {\n                    xs: { src: Buffer.alloc(100000, '1'), width: 100, height: 100 },\n                    sm: { src: Buffer.alloc(100000, '1'), width: 200, height: 100 },\n                    md: { src: Buffer.alloc(100000, '1'), width: 300, height: 100 },\n                }\n            }\n        });\n    });\n\n    it('--should wait for registry tx', function (done) {\n        helpers.confirmTx(done, txPending);\n    });\n\n    after(function (done) {\n        helpers.stopServices(done);\n    });\n});\n"]}