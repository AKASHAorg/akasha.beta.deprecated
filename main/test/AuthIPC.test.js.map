{"version":3,"file":"AuthIPC.test.js","sourceRoot":"","sources":["AuthIPC.test.ts"],"names":[],"mappings":"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","sourcesContent":["import AuthIPC from '../lib/ipc/AuthIPC';\nimport { ipcMain } from 'electron';\nimport {\n    fireEvent,\n    initLogger,\n    startServices,\n    stopServices,\n    checkSynced,\n    pwd,\n    mockedAddress\n} from './helpers';\nimport { expect } from 'chai';\nimport channel from '../lib/channels';\nimport { setTimeout } from 'timers';\n\nclass AuthIPCtest extends AuthIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(fireEvent(channel, data, event));\n    }\n}\ndescribe('AuthIPC', function () {\n    this.timeout(120000);\n    let authChannel: AuthIPCtest;\n\n    before(function (done) {\n        expect(initLogger()).to.exist;\n        setTimeout(() => startServices(done), 400);\n    });\n\n    it('--constructs channel api', function () {\n        authChannel = new AuthIPCtest();\n        expect(authChannel).to.exist;\n    });\n\n    it('--can init listeneres', function () {\n        authChannel.initListeners(null);\n        expect(authChannel.listeners.size).to.be.above(0);\n    });\n\n    it('--waits for sync', function (done) {\n        checkSynced(done);\n    });\n\n    it('--should add to listened channels from #manager', function (done) {\n        let listenersNr = 0;\n        const listenOn = [\n            channel.server.auth.generateEthKey,\n            channel.server.auth.getLocalIdentities\n        ];\n        authChannel.callTest.set(\n            channel.client.auth.manager,\n            (injected) => {\n                listenersNr++;\n                if (listenersNr === listenOn.length) {\n                    done()\n                }\n            }\n        );\n        listenOn.forEach((channelName) => {\n            ipcMain.emit(channel.server.auth.manager, '', { channel: channelName, listen: true });\n        });\n    });\n\n    it.skip('--should create new ethereum address #generateEthKey', function (done) {\n        authChannel.callTest.set(\n            channel.client.auth.generateEthKey,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data.address).to.exist;\n                expect(injected.data.error).to.not.exist;\n                done();\n            });\n        ipcMain.emit(channel.server.auth.generateEthKey, '', { password: pwd });\n    });\n\n    it('--should request from faucet #requestEther', function (done) {\n        authChannel.callTest.set(\n            channel.client.auth.requestEther,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data.tx).to.exist;\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.auth.requestEther, '', { address: mockedAddress })\n    });\n\n    it('--should check for profiles #getLocalIdentities', function (done) {\n        authChannel.callTest.set(\n            channel.client.auth.getLocalIdentities,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data).to.be.instanceof(Array);\n                done();\n            });\n        ipcMain.emit(channel.server.auth.getLocalIdentities, '', {})\n    });\n\n    it('--should #login', function (done) {\n        authChannel.callTest.set(\n            channel.client.auth.login,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data.token).to.exist;\n                done();\n            });\n        ipcMain.emit(channel.server.auth.login, '', {account: mockedAddress, password: pwd, rememberTime: 1})\n    });\n\n    it('--should #logout', function (done) {\n        authChannel.callTest.set(\n            channel.client.auth.logout,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data.done).to.exist;\n                done();\n            });\n        ipcMain.emit(channel.server.auth.logout, '', {})\n    });\n\n    after(function (done) {\n        stopServices(done);\n    });\n});\n"]}