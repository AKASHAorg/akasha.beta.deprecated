{"version":3,"file":"EntryIPC.test.js","sourceRoot":"","sources":["EntryIPC.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { ipcMain } from 'electron';\nimport EntryIPC from '../lib/ipc/EntryIPC';\nimport { expect } from 'chai';\nimport channel from '../lib/channels';\nimport * as helpers from './helpers';\nimport entryContent from './fixtures/entryContent';\n\nclass EntryIPCtest extends EntryIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(helpers.fireEvent(channel, data, event));\n    }\n}\n\ndescribe('EntryIPC', function () {\n    this.timeout(240000);\n    let entryChannel: EntryIPCtest;\n    let token: string;\n\n    before(function (done) {\n        expect(helpers.initLogger()).to.exist;\n        setTimeout(() => helpers.startServices(done), 400);\n    });\n\n    it('--constructs channel api', function () {\n        entryChannel = new EntryIPCtest();\n        expect(entryChannel).to.exist;\n    });\n\n    it('--can init listeneres', function () {\n        entryChannel.initListeners(null);\n        expect(entryChannel.listeners.size).to.be.above(0);\n    });\n\n    it('--waits for sync', function (done) {\n        helpers.checkSynced(done);\n    });\n\n    it('--should add to listened channels from #manager', function (done) {\n        let listenersNr = 0;\n        const listenOn = [\n            channel.server.entry.publish,\n            channel.server.entry.update,\n            channel.server.entry.upvote,\n            channel.server.entry.downvote,\n            channel.server.entry.isOpenedToVotes,\n            channel.server.entry.getVoteOf,\n            channel.server.entry.getEntriesCount,\n            channel.server.entry.getEntryOf,\n            channel.server.entry.getEntriesCreated\n        ];\n        entryChannel.callTest.set(\n            channel.client.entry.manager,\n            (injected) => {\n                listenersNr++;\n                if (listenersNr === listenOn.length) {\n                    done()\n                }\n            }\n        );\n        listenOn.forEach((channelName) => {\n            ipcMain.emit(channel.server.entry.manager, '', { channel: channelName, listen: true });\n        });\n    });\n    it('--should get a token', function (done) {\n        helpers.getToken(done, {\n            account: helpers.mockedAddress,\n            password: helpers.pwd,\n            rememberTime: 4\n        }, (generated: string) => {\n            token = generated;\n        });\n    });\n\n    it.skip('--should publish an entry', function (done) {\n        const content = {\n            draft: entryContent,\n            title: 'Entry' + new Date().getTime(),\n            excerpt: 'Testing excerpt, bla bla bla, test O_O :D :D :D' + new Date().getTime(),\n            licence: Math.floor(Math.random() * 10) + 1,\n            author: helpers.profileAddress,\n            featuredImage: Buffer.alloc(200000, 33)\n        };\n        const tags = [helpers.tagName];\n\n        entryChannel.callTest.set(\n            channel.client.entry.publish,\n            (injected) => {\n                expect(injected.data.data).to.exist;\n                expect(injected.data.data.tx).to.exist;\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.entry.publish, '', {content, tags, token, gas: 2000000});\n    });\n\n    it('--should get entries created', (done) => {\n        entryChannel.callTest.set(\n            channel.client.entry.getEntriesCreated,\n            (injected) => {\n                expect(injected.data.data).to.exist;\n                expect(injected.data.data.collection).to.exist;\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.entry.getEntriesCreated, '', {index: {}, fromBlock: 0});\n    });\n\n    it('--should get an shortEntry by address', (done) => {\n        entryChannel.callTest.set(\n            channel.client.entry.getEntry,\n            (injected) => {\n                console.log(injected.data.data);\n                expect(injected.data.data).to.exist;\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.entry.getEntry, '', {entryAddress: helpers.entryAddress});\n    });\n\n    it('--should get an fullEntry by address', (done) => {\n        entryChannel.callTest.set(\n            channel.client.entry.getEntry,\n            (injected) => {\n                expect(injected.data.data).to.exist;\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.entry.getEntry, '', {entryAddress: helpers.entryAddress, full: true});\n    });\n    after(function (done) {\n        helpers.stopServices(done);\n    });\n});\n"]}