{"version":3,"file":"helpers.js","sourceRoot":"","sources":["helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import Applogger from '../lib/ipc/Logger';\nimport GethIPC from '../lib/ipc/GethIPC';\nimport IpfsIPC from '../lib/ipc/IpfsIPC';\nimport { ipcMain } from 'electron';\nimport { expect } from 'chai';\nimport channel from '../lib/channels';\n\nexport class GethIPCtest extends GethIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(fireEvent(channel, data, event));\n    }\n}\n\nexport class IpfsIPCtest extends IpfsIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(fireEvent(channel, data, event));\n    }\n}\n\nexport const gethChannel = new GethIPCtest();\nexport const ipfsChannel = new IpfsIPCtest();\nexport const pwd = Buffer.from(\"abc123\");\nexport const mockedAddress = '0xb9d31a9e8cbddad80eac90852543142f13bebcb3';\n\nexport const initLogger = () => {\n    return Applogger.getInstance();\n};\n\nexport const fireEvent = (channel, data, event) => {\n    return { channel, data, event };\n};\n\nexport const startServices = (done) => {\n    console.log('starting services, waiting for #started event...');\n    gethChannel.initListeners(null);\n    ipfsChannel.initListeners(null);\n    const running = [];\n    gethChannel.callTest.set(channel.client.geth.startService, (injected) => {\n        expect(injected.data).to.exist;\n        expect(injected.data.error).to.not.exist;\n        if (injected.data.data.started) {\n            running.push(1);\n            if(running.indexOf(1)!==-1 && running.indexOf(2)!==-1){\n                //console.dir(injected, {depth: null, colors: true});\n                done();\n            }\n        }\n    });\n    ipfsChannel.callTest.set(channel.client.ipfs.startService, (injected) => {\n        expect(injected.data).to.exist;\n        expect(injected.data.error).to.not.exist;\n        if (injected.data.data.started) {\n            running.push(2);\n            if(running.indexOf(1)!==-1 && running.indexOf(2)!==-1){\n                done();\n            }\n        }\n    });\n\n    ipcMain.emit(channel.server.geth.startService, '', {});\n    ipcMain.emit(channel.server.ipfs.startService, '', {});\n};\n\nexport const stopServices = (done) => {\n    gethChannel.callTest.set(channel.client.geth.stopService, (injected) => {\n        if(!injected.data.data.spawned){\n            done();\n        }\n    });\n    gethChannel.callTest.set(channel.client.ipfs.stopService, (injected) => {\n        return injected;\n    });\n    ipcMain.emit(channel.server.ipfs.stopService);\n    ipcMain.emit(channel.server.geth.stopService);\n\n};\n\nexport const checktSynced = (done) => {\n    let interval;\n    gethChannel.callTest.set(\n        channel.client.geth.manager,\n        (injected) => {\n           return injected;\n        }\n    );\n    ipcMain.emit(channel.server.geth.manager, '', { channel: channel.server.geth.syncStatus, listen: true });\n\n    gethChannel.callTest.set(channel.client.geth.syncStatus, (injected) => {\n        if(injected.data.data.synced){\n            clearInterval(interval);\n            done();\n        }\n        return injected;\n    });\n    interval = setInterval(()=> ipcMain.emit(channel.server.geth.syncStatus, '', {}), 1000);\n};\n"]}