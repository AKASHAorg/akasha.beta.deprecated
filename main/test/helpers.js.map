{"version":3,"file":"helpers.js","sourceRoot":"","sources":["helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import Applogger from '../lib/ipc/Logger';\nimport GethIPC from '../lib/ipc/GethIPC';\nimport IpfsIPC from '../lib/ipc/IpfsIPC';\nimport TxIPC from '../lib/ipc/TxIPC';\nimport { ipcMain } from 'electron';\nimport { expect } from 'chai';\nimport channel from '../lib/channels';\nimport AuthIPC from '../lib/ipc/AuthIPC';\n\nclass AuthIPCtest extends AuthIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(fireEvent(channel, data, event));\n    }\n}\n\nexport class GethIPCtest extends GethIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(fireEvent(channel, data, event));\n    }\n}\n\nexport class IpfsIPCtest extends IpfsIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(fireEvent(channel, data, event));\n    }\n}\n\nexport class TxIPCtest extends TxIPC {\n    public callTest: Map<string, any> = new Map();\n\n    public fireEvent(channel, data, event) {\n        const cb = this.callTest.get(channel);\n        return cb(fireEvent(channel, data, event));\n    }\n}\n\nexport const gethChannel = new GethIPCtest();\nexport const ipfsChannel = new IpfsIPCtest();\nexport const authChannel = new AuthIPCtest();\nexport const txChannel = new TxIPCtest();\nexport const tagId = 2;\nexport const tagName = 'tag-no1478868171004';\nexport const pwd = Buffer.from(\"abc12345\");\nexport const mockedAddress = '0xc7fea2aa9b1475e09f6325e3f6586170f3a1c470';\nexport const akashaId = 'costelinho';\nexport const profileAddress = '0x78363144f9d4373c05a29a83260c0ce1b300092a';\nexport const entryAddress = '0xc7449867e7767c6d5b257dea7740650003ee5080';\nexport const initLogger = () => {\n    return Applogger.getInstance();\n};\n\nexport const fireEvent = (channel, data, event) => {\n    return { channel, data, event };\n};\n\nexport const startServices = (done) => {\n    console.log('### starting services, waiting for #started event ###');\n    gethChannel.initListeners(null);\n    ipfsChannel.initListeners(null);\n    authChannel.initListeners(null);\n    txChannel.initListeners(null);\n    const running = [];\n    gethChannel.callTest.set(channel.client.geth.startService, (injected) => {\n        expect(injected.data).to.exist;\n        expect(injected.data.error).to.not.exist;\n        if (injected.data.data.started) {\n            running.push(1);\n            if (running.indexOf(1) !== -1 && running.indexOf(2) !== -1) {\n                //console.dir(injected, {depth: null, colors: true});\n                done();\n            }\n        }\n    });\n    ipfsChannel.callTest.set(channel.client.ipfs.startService, (injected) => {\n        expect(injected.data).to.exist;\n        expect(injected.data.error).to.not.exist;\n        if (injected.data.data.started) {\n            running.push(2);\n            if (running.indexOf(1) !== -1 && running.indexOf(2) !== -1) {\n                done();\n            }\n        }\n    });\n\n    ipcMain.emit(channel.server.geth.startService, '', {});\n    ipcMain.emit(channel.server.ipfs.startService, '', {});\n};\n\nexport const stopServices = (done) => {\n    gethChannel.callTest.set(channel.client.geth.stopService, (injected) => {\n        if (!injected.data.data.spawned) {\n            done();\n        }\n    });\n    gethChannel.callTest.set(channel.client.ipfs.stopService, (injected) => {\n        return injected;\n    });\n    ipcMain.emit(channel.server.ipfs.stopService, '', {});\n    ipcMain.emit(channel.server.geth.stopService, '', {});\n};\n\nexport const checkSynced = (done) => {\n    let interval;\n    gethChannel.callTest.set(\n        channel.client.geth.manager,\n        (injected) => {\n            return injected;\n        }\n    );\n    ipcMain.emit(channel.server.geth.manager, '', {\n        channel: channel.server.geth.syncStatus,\n        listen: true\n    });\n\n    gethChannel.callTest.set(channel.client.geth.syncStatus, (injected) => {\n        if (injected.data.data.synced) {\n            clearInterval(interval);\n            done();\n        }\n        return injected;\n    });\n    interval = setInterval(()=> ipcMain.emit(channel.server.geth.syncStatus, '', {}), 1000);\n};\n\nexport const getToken = (done, authData, collect) => {\n    authChannel.callTest.set(\n        channel.client.auth.login,\n        (injected) => {\n            expect(injected.data.data.token).to.exist;\n            collect(injected.data.data.token);\n            done();\n        });\n    ipcMain.emit(channel.server.auth.login, '', authData)\n};\n\nexport const getNewAddress = (done, collect) => {\n    authChannel.callTest.set(\n        channel.client.auth.manager,\n        (injected) => {\n            return injected;\n        }\n    );\n    ipcMain.emit(channel.server.auth.manager, '', {\n        channel: channel.server.auth.generateEthKey,\n        listen: true\n    });\n    authChannel.callTest.set(\n        channel.client.auth.generateEthKey,\n        (injected) => {\n            expect(injected.data).to.exist;\n            expect(injected.data.data.address).to.exist;\n            expect(injected.data.error).to.not.exist;\n            collect(injected.data.data.address);\n            done();\n        });\n    setTimeout(() => {\n        ipcMain.emit(channel.server.auth.generateEthKey, '', { password: pwd });\n    }, 1000);\n};\n\nexport const getAethers = (done, address, collect) => {\n    authChannel.callTest.set(\n        channel.client.auth.requestEther,\n        (injected) => {\n            expect(injected.data).to.exist;\n            expect(injected.data.data.tx).to.exist;\n            collect(injected.data.data.tx);\n            done();\n        }\n    );\n    ipcMain.emit(channel.server.auth.requestEther, '', { address })\n};\n\nexport const confirmTx = (done, tx) => {\n    txChannel.callTest.set(\n        channel.client.tx.addToQueue,\n        (injected) => {\n            return injected;\n        }\n    );\n    txChannel.callTest.set(\n        channel.client.tx.emitMined,\n        (injected) => {\n            expect(injected.data).to.exist;\n            expect(injected.data.data.mined).to.exist;\n            if (injected.data.data.mined === tx) {\n                done();\n            }\n        }\n    );\n    ipcMain.emit(channel.server.tx.addToQueue, '', [{ tx }]);\n};\n"]}