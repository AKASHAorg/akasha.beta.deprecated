{"version":3,"file":"IpfsIPC.test.js","sourceRoot":"","sources":["IpfsIPC.test.ts"],"names":[],"mappings":";AAAA,2BAAwB,UAAU,CAAC,CAAA;AACnC,0BAAwC,WAAW,CAAC,CAAA;AACpD,uBAAuB,MAAM,CAAC,CAAA;AAC9B,2BAAoB,iBAAiB,CAAC,CAAA;AAEtC,QAAQ,CAAC,SAAS,EAAE;IAChB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAErB,MAAM,CAAC,UAAU,IAAI;QACjB,aAAM,CAAC,oBAAU,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QAC9B,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE;QAC3B,aAAM,CAAC,qBAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE;QACxB,qBAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAChC,aAAM,CAAC,qBAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,UAAU,IAAI;QAChE,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,MAAM,QAAQ,GAAG;YACb,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS;YAC7B,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;YAC5B,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;SAC/B,CAAC;QACF,qBAAW,CAAC,QAAQ,CAAC,GAAG,CACpB,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAC3B,CAAC,QAAQ;YACL,WAAW,EAAE,CAAC;YACd,EAAE,CAAC,CAAC,WAAW,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClC,IAAI,EAAE,CAAA;YACV,CAAC;QACL,CAAC,CACJ,CAAC;QACF,QAAQ,CAAC,OAAO,CAAC,CAAC,WAAW;YACzB,kBAAO,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,UAAU,IAAI;QACvC,qBAAW,CAAC,QAAQ,CAAC,GAAG,CACpB,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAChC,CAAC,QAAQ;YACL,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;YACzC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7B,IAAI,EAAE,CAAC;YACX,CAAC;QACL,CAAC,CAAC,CAAC;QACP,kBAAO,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,UAAU,IAAI;QACpD,qBAAW,CAAC,QAAQ,CAAC,GAAG,CACpB,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAC7B,CAAC,QAAQ;YACL,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;YAC5C,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QACP,kBAAO,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,UAAU,IAAI;QACnC,qBAAW,CAAC,QAAQ,CAAC,GAAG,CACpB,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAC5B,CAAC,QAAQ;YACL,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;YAC1C,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QACP,kBAAO,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,UAAU,IAAI;QACrC,qBAAW,CAAC,QAAQ,CAAC,GAAG,CACpB,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAC1B,CAAC,QAAQ;YACL,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;YAC9C,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QACP,kBAAO,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,UAAU,IAAI;QACnC,qBAAW,CAAC,QAAQ,CAAC,GAAG,CACpB,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAC5B,CAAC,QAAQ;YACL,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;YACxC,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;YACzC,IAAI,EAAE,CAAC;QACX,CAAC,CACJ,CAAC;QACF,kBAAO,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,UAAU,IAAI;QAChB,qBAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI;YAC3D,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;YAC3B,qBAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YAC7B,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QACH,kBAAO,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { ipcMain } from 'electron';\nimport { initLogger, ipfsChannel } from './helpers';\nimport { expect } from 'chai';\nimport channel from '../lib/channels';\n\ndescribe('IpfsIPC', function () {\n    this.timeout(120000);\n\n    before(function (done) {\n        expect(initLogger()).to.exist;\n        setTimeout(done, 200);\n    });\n\n    it('--constructs channel api', function () {\n        expect(ipfsChannel).to.exist;\n    });\n\n    it('--can init listeneres', function () {\n        ipfsChannel.initListeners(null);\n        expect(ipfsChannel.listeners.size).to.be.above(0);\n    });\n\n    it('--should add to listened channels from #manager', function (done) {\n        let listenersNr = 0;\n        const listenOn = [\n            channel.server.ipfs.getConfig,\n            channel.server.ipfs.setPorts,\n            channel.server.ipfs.getPorts\n        ];\n        ipfsChannel.callTest.set(\n            channel.client.ipfs.manager,\n            (injected) => {\n                listenersNr++;\n                if (listenersNr === listenOn.length) {\n                    done()\n                }\n            }\n        );\n        listenOn.forEach((channelName) => {\n            ipcMain.emit(channel.server.ipfs.manager, '', { channel: channelName, listen: true });\n        });\n    });\n\n    it('--should #startService', function (done) {\n        ipfsChannel.callTest.set(\n            channel.client.ipfs.startService,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.error).to.not.exist;\n                if (injected.data.data.started) {\n                    done();\n                }\n            });\n        ipcMain.emit(channel.server.ipfs.startService, '', {});\n    });\n\n    it('--should get ipfs config #getConfig', function (done) {\n        ipfsChannel.callTest.set(\n            channel.client.ipfs.getConfig,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data.apiPort).to.exist;\n                done();\n            });\n        ipcMain.emit(channel.server.ipfs.getConfig, '', {});\n    });\n\n    it('--should #setPorts', function (done) {\n        ipfsChannel.callTest.set(\n            channel.client.ipfs.setPorts,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data.set).to.be.true;\n                done();\n            });\n        ipcMain.emit(channel.server.ipfs.setPorts, '', { ports: { gateway: 8899 } });\n    });\n\n    it('--should get #status', function (done) {\n        ipfsChannel.callTest.set(\n            channel.client.ipfs.status,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data.spawned).to.be.true;\n                done();\n            });\n        ipcMain.emit(channel.server.ipfs.status, '', {});\n    });\n\n    it('--should #getPorts', function (done) {\n        ipfsChannel.callTest.set(\n            channel.client.ipfs.getPorts,\n            (injected) => {\n                expect(injected.data).to.exist;\n                expect(injected.data.data.api).to.exist;\n                expect(injected.data.error).to.not.exist;\n                done();\n            }\n        );\n        ipcMain.emit(channel.server.ipfs.getPorts, '', {});\n    });\n\n    after(function (done) {\n        ipfsChannel.callTest.set(channel.client.ipfs.stopService, (data) => {\n            expect(data.data).to.exist;\n            ipfsChannel.callTest.clear();\n            done();\n        });\n        ipcMain.emit(channel.server.ipfs.stopService, '', {});\n    });\n});\n"]}