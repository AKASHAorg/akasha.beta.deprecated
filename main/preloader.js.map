{"version":3,"file":"preloader.js","sourceRoot":"","sources":["preloader.ts"],"names":[],"mappings":";;AAAA,iEAAmG;AACnG,6CAAqC;AACrC,iDAAyD;AAEzD;IAEI,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,kBAAO,CAAC,CAAC;IAE7C,MAAM,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM;QACvC,MAAM,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM;YAC/C,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,0BAAW,CAAC,kBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM;QACvC,MAAM,CAAC,IAAI,CAAC,kBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM;YAC/C,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;gBACvB,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,yBAAU,CAC7C,kBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAC9B,kBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EACjC,MAAM,CACT,CAAA;YACL,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,SAAS,CAAC;AACrB,CAAC;AAED,MAAM,CAAC,SAAS,CAAC,GAAG,SAAS,EAAE,CAAC;AAEhC,MAAM,CAAC,MAAM,CAAC,GAAG;IACb,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;AACtC,CAAC,CAAC;AAGF,MAAM,CAAC,mBAAmB,CAAC,GAAG,IAAI,yCAAiB,EAAE,CAAC;AAEtD,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC;IACzC,UAAU,CAAC,MAAM,MAAM,CAAC,mBAAmB,CAAC,CAAC,aAAa,EAAE,EAAE,IAAI,CAAC,CAAC;IACpE,MAAM,CAAC,mBAAmB,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC/D,MAAM,CAAC,oBAAoB,CAAC,GAAG,IAAI,0CAAkB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAEnF,MAAM,CAAC,qBAAqB,CAAC,GAAG,IAAI,2CAAmB,CAAC,CAAC,IAAI;QACzD,MAAM,CAAC,oBAAoB,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { SpellCheckHandler, ContextMenuListener, ContextMenuBuilder } from 'electron-spellchecker';\nimport Channel from './lib/channels';\nimport { ApiRequest, ApiListener } from './ipcPreloader';\n// Linux: libxtst-dev, libx11-dev, libxkbfile-dev\nfunction injectApi() {\n\n    const AkashaApi = Object.assign({}, Channel);\n\n    Object.keys(Channel.client).forEach((module) => {\n        Object.keys(Channel.client[module]).forEach((method) => {\n            AkashaApi.client[module][method] = new ApiListener(Channel.client[module][method], method);\n        });\n    });\n\n    Object.keys(Channel.server).forEach((module) => {\n        Object.keys(Channel.server[module]).forEach((method) => {\n            if (method !== 'manager') {\n                AkashaApi.server[module][method] = new ApiRequest(\n                    Channel.server[module][method],\n                    Channel.server[module]['manager'],\n                    method\n                )\n            }\n        });\n    });\n    return AkashaApi;\n}\n\nwindow['Channel'] = injectApi();\n\nwindow['eval'] = function () {\n    throw new Error(\"eval disabled.\");\n};\n\n//spellchecking stuff\nwindow['spellCheckHandler'] = new SpellCheckHandler();\n\nif (process.env.NODE_ENV !== 'development') {\n    setTimeout(() => window['spellCheckHandler'].attachToInput(), 1000);\n    window['spellCheckHandler'].switchLanguage(navigator.language);\n    window['contextMenuBuilder'] = new ContextMenuBuilder(window['spellCheckHandler']);\n\n    window['contextMenuListener'] = new ContextMenuListener((info) => {\n        window['contextMenuBuilder'].showPopupMenu(info);\n    });\n}\n"]}