{"version":3,"file":"watcher.js","sourceRoot":"","sources":["watcher.ts"],"names":[],"mappings":";;AAAA,+DAA8D;AAC9D,yDAAgD;AAEhD,MAAM,UAAU,GAAG;IACjB,EAAE,EAAE,aAAa;IACjB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC1B,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC1B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC5B;IACD,QAAQ,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC;CAC1C,CAAC;AAEF,SAAwB,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU;IAEnE,MAAM,cAAc,GAAG,IAAI,0BAAc,CACvC,uBAAW,CAAC,IAAI,EAChB;QACE,QAAQ;QACR,WAAW,EAAE,aAAa;KAC3B,CAAC,CAAC;IAEL,cAAc,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI;QAClC,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QACnE,MAAM,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACjB,OAAO,cAAc,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;SAC5D;QACD,OAAO,CACJ,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;aACzB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,OAAO,EAAG,cAAc,EAAE,CAAC;AAC7B,CAAC;AAtBD,kCAsBC","sourcesContent":["import { CORE_MODULE } from '@akashaproject/common/constants';\nimport IpcChannelMain from './ipc-channel-main';\n\nconst dataStream = {\n  id: '/dataStream',\n  type: 'object',\n  properties: {\n    module: { type: 'string' },\n    method: { type: 'string' },\n    payload: { type: 'object' },\n  },\n  required: ['module', 'method', 'payload'],\n};\n\nexport default function startDataStream(modules, windowId, getService) {\n  // create listener on main Channel\n  const ipcChannelMain = new IpcChannelMain(\n    CORE_MODULE.DATA,\n    {\n      windowId,\n      channelName: 'mainChannel',\n    });\n\n  ipcChannelMain.on(function (ev, args) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    console.log(getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator, v);\n    const result = v.validate(args, dataStream);\n    if (!result.valid) {\n      return ipcChannelMain.send({ args, error: result.errors });\n    }\n    modules\n      [args.module][args.method]\n      .execute(args.payload).then(data => ipcChannelMain.send({ data, args }));\n  });\n\n  return {  ipcChannelMain };\n}\n"]}