{"version":3,"file":"post.js","sourceRoot":"","sources":["post.ts"],"names":[],"mappings":"","sourcesContent":["// import * as Promise from 'bluebird';\n// import IpfsConnector from '@akashaproject/ipfs-js-connector';\n// import { web3Api } from '../../services';\n// import auth from '../auth-web3/Auth';\n// import { roomFactory } from './join';\n// const Buffer = require('safe-buffer').Buffer;\n//\n// const execute = Promise.coroutine(function* (data: { roomName: string, message: string, token: string }, cb) {\n//     if (!roomFactory.getRoom(data.roomName)) {\n//         throw new Error('Join room first before posting');\n//     }\n//\n//     const room = roomFactory.getChanPrefix() + data.roomName;\n//     const stamp = Date.now();\n//     const message = web3Api.instance.fromAscii(JSON.stringify({ message: data.message, date: stamp }));\n//     const sig = yield auth.signMessage(message, data.token);\n//     const signedMessage = JSON.stringify({ content: message, sig });\n//\n//     const encodedMessage = Buffer.from(signedMessage);\n//     IpfsConnector.getInstance().api.apiClient.pubsub.publish(room, encodedMessage, () => {\n//         cb('', { done: true });\n//     });\n//     delete data.message;\n//     return Promise.resolve({ done: false });\n// });\n//\n// export default { execute, name: 'post', hasStream: true };\n"]}