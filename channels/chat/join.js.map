{"version":3,"file":"join.js","sourceRoot":"","sources":["join.ts"],"names":[],"mappings":"","sourcesContent":["// import * as Promise from 'bluebird';\n// import IpfsConnector from '@akashaproject/ipfs-js-connector';\n//\n// class RoomFactory {\n//     public rooms: any[] = [];\n//     private chanPrefix = '0x4ka2hA-*-';\n//     private activeChannel: string;\n//\n//     public join(roomName: string, cb) {\n//         if (this.getRoom(roomName)) {\n//             throw new Error(`Already subscribed to ${roomName}`);\n//         }\n//         const handler = (message) => {\n//             cb('', {\n//                 roomName: roomName, message: {\n//                     data: message.data.toString(),\n//                     from: message.from\n//                 }\n//             });\n//         };\n//         IpfsConnector.getInstance().api.apiClient.pubsub.subscribe(this.chanPrefix + roomName, {\n//             discover: true\n//         }, handler);\n//\n//         this.rooms.push({ roomName, handler });\n//     }\n//\n//     public getRoom(roomName: string) {\n//         return this.rooms.find((obj) => obj.roomName === roomName);\n//     }\n//\n//     public setActive(channel: string) {\n//         this.activeChannel = channel;\n//     }\n//\n//     public getActive() {\n//         return this.activeChannel;\n//     }\n//\n//     public closeAll() {\n//         this.rooms.forEach((data) => {\n//                 IpfsConnector.getInstance().api.apiClient.pubsub.unsubscribe(this.chanPrefix + data.roomName, data.handler);\n//             }\n//         );\n//         this.rooms.length = 0;\n//     }\n//\n//     public leave(roomName: string) {\n//         const room = this.getRoom(roomName);\n//         IpfsConnector.getInstance().api.apiClient.pubsub.unsubscribe(this.chanPrefix + roomName, room.handler);\n//         const index = this.rooms.indexOf(room);\n//         if (index !== -1) {\n//             this.rooms.splice(index, 1);\n//         }\n//\n//     }\n//\n//     public getChanPrefix() {\n//         return this.chanPrefix;\n//     }\n// }\n//\n// export const roomFactory = new RoomFactory();\n//\n// const execute = Promise.coroutine(function* (data: { channels: string[] }, cb) {\n//     if (!data.channels || !data.channels.length) {\n//         throw new Error('Must provide at least a channel');\n//     }\n//     data.channels.forEach((chan) => {\n//         roomFactory.join(chan, cb);\n//     });\n//\n//     console.log(roomFactory);\n//     delete data.channels;\n//\n//     return Promise.resolve({ numChannels: roomFactory.rooms.length });\n// });\n//\n// export default { execute, name: 'join', hasStream: true };\n"]}