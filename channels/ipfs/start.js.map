{"version":3,"file":"start.js","sourceRoot":"","sources":["start.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEhC,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE7F,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAE/C,MAAM,aAAa,GAAG,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,aAAa,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE;YACrD,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACxC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SAC1B;QAED,aAAa,CAAC,WAAW,EAAE;aAC1B,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,WAAW,CAAC,CAAC;YAClB,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAE5E,MAAM,aAAa,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAqBhC,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aACjC,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,+BAA+B,CAAC,CAAC;QAEjE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC;IACvD,MAAM,OAAO,GAAG;QACd,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAChD,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { isEmpty } from 'ramda';\n\nimport { CORE_MODULE, GENERAL_SETTINGS, IPFS_MODULE } from '@akashaproject/common/constants';\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n\n    const ipfsConnector = getService(CORE_MODULE.IPFS_CONNECTOR);\n    const ipfsProvider = getService(CORE_MODULE.IPFS_PROVIDER);\n    if (ipfsConnector.getInstance().serviceStatus.process) {\n      console.warn('IPFS is already running');\n      return { started: true };\n    }\n\n    ipfsConnector.getInstance()\n    .setIpfsFolder(data.hasOwnProperty('storagePath') ?\n      data.storagePath :\n      getService(CORE_MODULE.SETTINGS).get(GENERAL_SETTINGS.IPFS_DEFAULT_PATH));\n\n    yield ipfsConnector.getInstance().start(isEmpty(ipfsProvider.instance) ?\n      null : ipfsProvider.instance);\n    // @TODO: migrate this at impl lvl\n    // yield initSearchDbs();\n    // let peers;\n    // if (!isEmpty(ipfsProvider.instance)) {\n    //     const nodeId = yield IpfsConnector.getInstance().api.apiClient.idAsync();\n    //     if (nodeId && (nodeId.agentVersion).includes('go-ipfs')) {\n    //         peers = IPFS_CIRCUIT_RELAYS.concat(AKASHA_BOOTSTRAP_PEERS).concat(DEFAULT_CIRCUIT_RELAYS);\n    //     } else {\n    //         peers = AKASHA_BOOTSTRAP_PEERS.concat(DEFAULT_CIRCUIT_RELAYS);\n    //     }\n    //\n    //     peers.forEach(peer => {\n    //         IpfsConnector.getInstance().api.apiClient.swarm.connect(peer, (err) => {\n    //             if (err) {\n    //                 console.error('js-ipfs swarm connect error ', err);\n    //             }\n    //         });\n    //     });\n    // }\n\n    (getService(CORE_MODULE.SETTINGS))\n    .set(GENERAL_SETTINGS.BASE_URL, 'https://gateway.ipfs.io/ipfs/');\n\n    return { started: true };\n  });\n\n  const startService = { execute, name: 'startService' };\n  const service = function () {\n    return startService;\n  };\n  sp().service(IPFS_MODULE.startService, service);\n  return startService;\n}\n"]}