{"version":3,"file":"sync-tags.js","sourceRoot":"","sources":["sync-tags.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE3E,MAAM,CAAC,MAAM,cAAc,GAAG;IAC5B,EAAE,EAAE,WAAW;IACf,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC9B;IACD,QAAQ,EAAE,CAAC,WAAW,CAAC;CACxB,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO;SACtB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAA2B;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,cAAc,GAAG,SAAS,CAAC,aAAa,CAC5C,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EACjC,EAAE,EACF,IAAI,CAAC,SAAS,CACf,CAAC;QACF,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7C,cAAc,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;YAClC,MAAM,IAAI,GAAG,EAAE,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YACrE,OAAO,CAAC,IAAI;iBACX,WAAW;iBACX,aAAa,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;gBACjC,IAAI,GAAG,EAAE;oBACP,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;iBAClB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;QAC9D,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;IAC/C,MAAM,OAAO,GAAG;QACd,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC5C,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, TAGS_MODULE } from '@akashaproject/common/constants';\n\nexport const syncTagsSchema = {\n  id: '/syncTags',\n  type: 'object',\n  properties: {\n    fromBlock: { type: 'number' },\n  },\n  required: ['fromBlock'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise\n  .coroutine(function* (data: { fromBlock: number }) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, syncTagsSchema, { throwError: true });\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const tagCreateEvent = contracts.createWatcher(\n      contracts.instance.Tags.TagCreate,\n      {},\n      data.fromBlock,\n    );\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n    const dbIndex = getService(CORE_MODULE.DB_INDEX);\n    const toUtf8 = web3Api.instance.utils.toUtf8;\n    tagCreateEvent.watch((err, event) => {\n      const data = { id: event.args.tag, tagName: toUtf8(event.args.tag) };\n      dbIndex.tags\n      .searchIndex\n      .concurrentAdd({}, [data], (err) => {\n        if (err) {\n          console.log(err);\n        }\n      });\n    });\n    const lastBlock = yield web3Api.instance.eth.getBlockNumber();\n    return { lastBlock, done: true };\n  });\n\n  const syncTags = { execute, name: 'syncTags' };\n  const service = function () {\n    return syncTags;\n  };\n  sp().service(TAGS_MODULE.syncTags, service);\n  return syncTags;\n}\n"]}