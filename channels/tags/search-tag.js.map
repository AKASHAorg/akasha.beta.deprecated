{"version":3,"file":"search-tag.js","sourceRoot":"","sources":["search-tag.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA2E;AAE9D,QAAA,eAAe,GAAG;IAC7B,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,EAAE;QACzC,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC;CAC/B,CAAC;AAEW,QAAA,QAAQ,GAAG,iBAAiB,CAAC;AAE1C,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO;SACtB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAwC;QAC5D,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,uBAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACxD,MAAM,KAAK,GAAG,UAAU,CAAC,uBAAW,CAAC,KAAK,CAAC,CAAC;QAE5C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAQ,CAAC,EAAE;YAClC,MAAM,MAAM,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC;iBAC/C,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;YAElE,MAAM,OAAO;iBACZ,YAAY,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,UAAe,EAAE,EAAE;gBAC7D,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;oBACjC,OAAO,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvE,CAAC,CAAC,CAAC;gBACH,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAQ,EAAE,IAAI,CAAC,CAAC;gBACpC,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;SACJ;QACD,MAAM,UAAU,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE;YACvE,OAAO,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;IACjD,MAAM,OAAO,GAAG;QACd,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,uBAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAE7C,OAAO,SAAS,CAAC;AACnB,CAAC;AAlCD,uBAkCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, TAGS_MODULE } from '@akashaproject/common/constants';\n\nexport const searchTagSchema = {\n  id: '/searchTag',\n  type: 'object',\n  properties: {\n    tagName: { type: 'string', minLength: 2 },\n    limit: { type: 'number' },\n  },\n  required: ['tagName', 'limit'],\n};\n\nexport const cacheKey = 'search:tags:all';\n\nexport default function init(sp, getService) {\n  const execute = Promise\n  .coroutine(function* (data: { tagName: string, limit: number }) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, searchTagSchema, { throwError: true });\n    const stash = getService(CORE_MODULE.STASH);\n\n    if (!stash.mixed.hasFull(cacheKey)) {\n      const filter = getService(CORE_MODULE.CONTRACTS)\n      .instance.Tags.TagCreate({}, { fromBlock: 0, toBlock: 'latest' });\n\n      yield Promise\n      .fromCallback((cb) => filter.get(cb)).then((collection: any) => {\n        const tags = collection.map((el) => {\n          return getService(CORE_MODULE.WEB3_API).instance.toUtf8(el.args.tag);\n        });\n        stash.mixed.setFull(cacheKey, tags);\n        return true;\n      });\n    }\n    const collection = (stash.mixed.getFull(cacheKey)).filter((currentTag) => {\n      return currentTag.includes(data.tagName);\n    });\n\n    return { collection };\n  });\n\n  const searchTag = { execute, name: 'searchTag' };\n  const service = function () {\n    return searchTag;\n  };\n  sp().service(TAGS_MODULE.searchTag, service);\n\n  return searchTag;\n}\n"]}