{"version":3,"file":"tags-iterator.js","sourceRoot":"","sources":["tags-iterator.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA2E;AAE3E,MAAM,iBAAiB,GAAG;IACxB,EAAE,EAAE,cAAc;IAClB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzB,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC5B;IACD,QAAQ,EAAE,CAAC,SAAS,CAAC;CACtB,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO;SACtB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAyC;QAC7D,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,iBAAiB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE1D,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QACnC,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,SAAS,CACvC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EACjC,EAAE,EACF,IAAI,CAAC,OAAO,EACZ,UAAU,EACV,EAAE,CAAC,CAAC;QAEN,KAAK,MAAM,KAAK,IAAI,OAAO,CAAC,OAAO,EAAE;YACnC,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAClE,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;gBACpC,MAAM;aACP;SACF;QACD,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;IACrD,MAAM,OAAO,GAAG;QACd,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,uBAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAE/C,OAAO,WAAW,CAAC;AACrB,CAAC;AAjCD,uBAiCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, TAGS_MODULE } from '@akashaproject/common/constants';\n\nconst tagIteratorSchema = {\n  id: '/tagIterator',\n  type: 'object',\n  properties: {\n    limit: { type: 'number' },\n    toBlock: { type: 'number' },\n  },\n  required: ['toBlock'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise\n  .coroutine(function* (data: { toBlock: number, limit?: number }) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, tagIteratorSchema, { throwError: true });\n\n    const collection = [];\n    const maxResults = data.limit || 5;\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n    const fetched = yield contracts.fromEvent(\n      contracts.instance.Tags.TagCreate,\n      {},\n      data.toBlock,\n      maxResults,\n      {});\n\n    for (const event of fetched.results) {\n      collection.push({ tag: web3Api.instance.toUtf8(event.args.tag) });\n      if (collection.length === maxResults) {\n        break;\n      }\n    }\n    return { collection, lastBlock: fetched.fromBlock };\n  });\n\n  const tagIterator = { execute, name: 'tagIterator' };\n  const service = function () {\n    return tagIterator;\n  };\n  sp().service(TAGS_MODULE.tagIterator, service);\n\n  return tagIterator;\n}\n"]}