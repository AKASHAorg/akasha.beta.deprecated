{"version":3,"file":"query.js","sourceRoot":"","sources":["query.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, SEARCH_MODULE } from '@akashaproject/common/constants';\nimport { dbs } from './indexes';\n\nconst querySchema = {\n  id: '/query',\n  type: 'object',\n  properties: {\n    text: { type: 'string' },\n    authors: {\n      type: 'array',\n      items: { type: 'string' },\n      uniqueItems: true,\n      minItems: 1,\n    },\n    pageSize: { type: 'number' },\n    offset: { type: 'number' },\n  },\n  required: ['text'],\n};\n\nconst buildFilter = function (authors: string[], text: string) {\n  const result = [];\n  authors.forEach((ethAddress) => {\n    result.push({ AND: { ethAddress: [ethAddress], title: [text] }, BOOST: 5 });\n    result.push({ AND: { ethAddress: [ethAddress], excerpt: [text] } });\n  });\n  return result;\n};\n\nexport default function init (sp, getService) {\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, querySchema, { throwError: true });\n\n    const collection = [];\n    const pageSize = data.pageSize || 20;\n    const offset = data.offset || 0;\n    const defaultQuery = [{\n      AND: { title: [data.text] },\n      BOOST: 5,\n    }, { AND: { excerpt: [data.text] } }];\n    const query = (data.authors && data.authors.length) ?\n      buildFilter(data.authors, data.text) : defaultQuery;\n    dbs.entry.searchIndex.totalHits({ query }, function (err, count) {\n      dbs.entry.searchIndex.search({\n          query,\n          pageSize,\n          offset,\n        })\n        .on('data', (data) => {\n          collection.push({\n            entryId: data.document.id,\n            ethAddress: data.document.ethAddress,\n            version: data.document.version,\n          });\n        }).on('end', () => {\n        cb('', { collection, totalHits: count, searching: false });\n      });\n    });\n    return { searching: true };\n  });\n\n  const query = { execute, name: 'query', hasStream: true };\n  const service = function () {\n    return query;\n  };\n  sp().service(SEARCH_MODULE.query, service);\n\n  return query;\n}\n"]}