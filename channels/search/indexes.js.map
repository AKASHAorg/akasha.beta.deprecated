{"version":3,"file":"indexes.js","sourceRoot":"","sources":["indexes.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA8D;AAE9D,MAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE/B,QAAA,GAAG,GAAG;IACjB,KAAK,EAAE;QACL,IAAI,EAAE,kBAAkB;QACxB,UAAU,EAAE;YACV,YAAY,EAAE;gBACZ,OAAO,EAAE;oBACP,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,KAAK;iBACpB;gBACD,KAAK,EAAE;oBACL,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,KAAK;iBACpB;aACF;SACF;QACD,WAAW,EAAE,IAAI;KAClB;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,iBAAiB;QACvB,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,EAAE;KACf;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,sBAAsB;QAC5B,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,EAAE;KACf;CACF,CAAC;AAEF,MAAM,YAAY;IAGhB,YAAY,MAAc,EAAE,IAA2C;QACrE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAC1B,EAAE,EACF;YACE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,MAAM;YAC3D,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;YACnB,WAAW,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;SAChC,EACD,IAAI,CAAC,UAAU,CAChB,CAAC;IACJ,CAAC;IAED,IAAI;QACF,OAAO,OAAO;aACX,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;CACF;AAED,mBAAyB,EAAE;IACzB,MAAM,SAAS,GAAG;QAChB,OAAO,WAAG,CAAC;IACb,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,uBAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC9C,OAAO,EAAE,IAAI,EAAJ,YAAI,EAAE,CAAC;AAClB,CAAC;AAND,4BAMC;AAGY,QAAA,IAAI,GAAG,SAAS,IAAI,CAAC,MAAe;IAC/C,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,WAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QAC7C,OAAO,IAAI,YAAY,CAAC,WAAG,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,WAAG,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,EAAE;aAC3F,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,WAAG,CAAC,KAAK,CAAC,CAAC,WAAW,GAAG,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,CAAC,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE } from '@akashaproject/common/constants';\n\nconst searchIndex = require('search-index');\n\nexport const dbs = {\n  entry: {\n    path: 'beta-entry-index',\n    additional: {\n      fieldOptions: {\n        excerpt: {\n          searchable: true,\n          preserveCase: false,\n        },\n        title: {\n          searchable: true,\n          preserveCase: false,\n        },\n      },\n    },\n    searchIndex: null,\n  },\n  tags: {\n    path: 'beta-tags-index',\n    searchIndex: null,\n    additional: {},\n  },\n  profiles: {\n    path: 'beta-profileID-index',\n    searchIndex: null,\n    additional: {},\n  },\n};\n\nclass StorageIndex {\n  readonly options: any;\n\n  constructor(dbPath: string, opts: { additional?: any, prefix?: string }) {\n    this.options = Object.assign(\n      {},\n      {\n        indexPath: opts.prefix ? `${opts.prefix}${dbPath}` : dbPath,\n        appendOnly: false,\n        preserveCase: false,\n        nGramLength: { gte: 1, lte: 4 },\n      },\n      opts.additional,\n    );\n  }\n\n  init() {\n    return Promise\n      .fromCallback(cb => searchIndex(this.options, cb));\n  }\n}\n\nexport default function (sp) {\n  const dbService = function () {\n    return dbs;\n  };\n  sp().service(CORE_MODULE.DB_INDEX, dbService);\n  return { init };\n}\n\n// this should be initialized after initiating the module\nexport const init = function init(prefix?: string) {\n  const waitFor = Object.keys(dbs).map((index) => {\n    return new StorageIndex(dbs[index].path, { prefix, additional: dbs[index].additional }).init()\n      .then(si => dbs[index].searchIndex = si);\n  });\n  return Promise.all(waitFor);\n};\n"]}