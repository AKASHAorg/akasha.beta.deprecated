{"version":3,"file":"indexes.js","sourceRoot":"","sources":["indexes.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+CAAuC;AACvC,+DAA4D;AAE/C,QAAA,GAAG,GAAG;IACf,KAAK,EAAE;QACH,IAAI,EAAE,yBAAyB;QAC/B,UAAU,EAAE;YACR,YAAY,EAAE;gBACV,OAAO,EAAE;oBACL,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,KAAK;iBACtB;gBACD,KAAK,EAAE;oBACH,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,KAAK;iBACtB;aACJ;SACJ;QACD,WAAW,EAAE,IAAI;KACpB;IACD,IAAI,EAAE;QACF,IAAI,EAAE,wBAAwB;QAC9B,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,EAAE;KACjB;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,6BAA6B;QACnC,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,EAAE;KACjB;CACJ,CAAC;AAEF,cAA6B,EAAE,EAAE,UAAU;IACvC;QAGI,YAAY,MAAc,EAAE,UAAgB;YACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CACxB,EAAE,EACF;gBACI,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,KAAK;gBACnB,WAAW,EAAE,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAC;aAChC,EACD,UAAU,CACb,CAAC;QACN,CAAC;QAED,IAAI;YACA,OAAO,OAAO;iBACT,YAAY,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,sBAAW,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7D,CAAC;KACJ;IAGD,MAAM,IAAI,GAAG;QACT,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,WAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAC3C,OAAO,IAAI,YAAY,CAAC,WAAG,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,WAAG,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;iBACjE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,WAAG,CAAC,KAAK,CAAC,CAAC,WAAW,GAAG,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC,CAAC;IACF,MAAM,SAAS,GAAG,cAAc,OAAO,WAAG,CAAC,CAAA,CAAC,CAAC;IAC7C,EAAE,EAAE,CAAC,OAAO,CAAC,uBAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC9C,OAAO,EAAC,IAAI,EAAC,CAAC;AAClB,CAAC;AAlCD,uBAkCC","sourcesContent":["import * as Promise from 'bluebird';\nimport SearchIndex from 'search-index';\nimport {CORE_MODULE} from '@akashaproject/common/constants';\n\nexport const dbs = {\n    entry: {\n        path: 'akasha#beta/entry-index',\n        additional: {\n            fieldOptions: {\n                excerpt: {\n                    searchable: true,\n                    preserveCase: false,\n                },\n                title: {\n                    searchable: true,\n                    preserveCase: false,\n                },\n            },\n        },\n        searchIndex: null,\n    },\n    tags: {\n        path: 'akasha#beta/tags-index',\n        searchIndex: null,\n        additional: {},\n    },\n    profiles: {\n        path: 'akasha#beta/profileID-index',\n        searchIndex: null,\n        additional: {},\n    },\n};\n\nexport default function init(sp, getService) {\n    class StorageIndex {\n        readonly options: any;\n\n        constructor(dbPath: string, additional?: any) {\n            this.options = Object.assign(\n                {},\n                {\n                    indexPath: dbPath,\n                    appendOnly: false,\n                    preserveCase: false,\n                    nGramLength: {gte: 1, lte: 4},\n                },\n                additional,\n            );\n        }\n\n        init() {\n            return Promise\n                .fromCallback((cb) => SearchIndex(this.options, cb));\n        }\n    }\n\n\n    const init = function init() {\n        const waitFor = Object.keys(dbs).map((index) => {\n            return new StorageIndex(dbs[index].path, dbs[index].additional).init()\n                .then(si => dbs[index].searchIndex = si);\n        });\n        return Promise.all(waitFor);\n    };\n    const dbService = function () { return dbs;};\n    sp().service(CORE_MODULE.DB_INDEX, dbService);\n    return {init};\n}\n"]}