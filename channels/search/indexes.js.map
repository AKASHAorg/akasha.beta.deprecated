{"version":3,"file":"indexes.js","sourceRoot":"","sources":["indexes.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,4CAA4C;AAC5C,+DAA8D;AAEjD,QAAA,GAAG,GAAG;IACjB,KAAK,EAAE;QACL,IAAI,EAAE,yBAAyB;QAC/B,UAAU,EAAE;YACV,YAAY,EAAE;gBACZ,OAAO,EAAE;oBACP,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,KAAK;iBACpB;gBACD,KAAK,EAAE;oBACL,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,KAAK;iBACpB;aACF;SACF;QACD,WAAW,EAAE,IAAI;KAClB;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,wBAAwB;QAC9B,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,EAAE;KACf;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,6BAA6B;QACnC,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,EAAE;KACf;CACF,CAAC;AAEF;IAGE,YAAY,MAAc,EAAE,UAAgB;QAC1C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAC1B,EAAE,EACF;YACE,SAAS,EAAE,MAAM;YACjB,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;YACnB,WAAW,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;SAChC,EACD,UAAU,CACX,CAAC;IACJ,CAAC;IAED,IAAI;QACF,OAAO,OAAO;aACb,YAAY,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;CACF;AAED,mBAAyB,EAAE;IACzB,MAAM,SAAS,GAAG;QAChB,OAAO,WAAG,CAAC;IACb,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,uBAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC9C,OAAO,EAAE,IAAI,EAAJ,YAAI,EAAE,CAAC;AAClB,CAAC;AAND,4BAMC;AAGY,QAAA,IAAI,GAAG;IAClB,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,WAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QAC7C,OAAO,IAAI,YAAY,CAAC,WAAG,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,WAAG,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;aACrE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,WAAG,CAAC,KAAK,CAAC,CAAC,WAAW,GAAG,EAAE,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,CAAC,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport * as SearchIndex from 'search-index';\nimport { CORE_MODULE } from '@akashaproject/common/constants';\n\nexport const dbs = {\n  entry: {\n    path: 'akasha#beta/entry-index',\n    additional: {\n      fieldOptions: {\n        excerpt: {\n          searchable: true,\n          preserveCase: false,\n        },\n        title: {\n          searchable: true,\n          preserveCase: false,\n        },\n      },\n    },\n    searchIndex: null,\n  },\n  tags: {\n    path: 'akasha#beta/tags-index',\n    searchIndex: null,\n    additional: {},\n  },\n  profiles: {\n    path: 'akasha#beta/profileID-index',\n    searchIndex: null,\n    additional: {},\n  },\n};\n\nclass StorageIndex {\n  readonly options: any;\n\n  constructor(dbPath: string, additional?: any) {\n    this.options = Object.assign(\n      {},\n      {\n        indexPath: dbPath,\n        appendOnly: false,\n        preserveCase: false,\n        nGramLength: { gte: 1, lte: 4 },\n      },\n      additional,\n    );\n  }\n\n  init() {\n    return Promise\n    .fromCallback((cb) => SearchIndex(this.options, cb));\n  }\n}\n\nexport default function (sp) {\n  const dbService = function () {\n    return dbs;\n  };\n  sp().service(CORE_MODULE.DB_INDEX, dbService);\n  return { init };\n}\n\n// this should be initialized after initiating the module\nexport const init = function init() {\n  const waitFor = Object.keys(dbs).map((index) => {\n    return new StorageIndex(dbs[index].path, dbs[index].additional).init()\n    .then(si => dbs[index].searchIndex = si);\n  });\n  return Promise.all(waitFor);\n};\n"]}