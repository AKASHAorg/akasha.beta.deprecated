{"version":3,"file":"clear-index.js","sourceRoot":"","sources":["clear-index.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA6E;AAC7E,uCAAgC;AAEnB,QAAA,WAAW,GAAG;IACzB,EAAE,EAAE,QAAQ;IACZ,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC3B;IACD,QAAQ,EAAE,CAAC,QAAQ,CAAC;CACrB,CAAC;AAEF,MAAM,OAAO,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;AAE9C,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO;SACtB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAwB,EAAE,EAAE;QAChD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,mBAAW,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEpD,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC7C;QAED,aAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,GAAG;YAC9C,IAAI,GAAG,EAAE;gBACP,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;aAChB;YACD,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC1D,MAAM,OAAO,GAAG;QACd,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,yBAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAE3C,OAAO,KAAK,CAAC;AACf,CAAC;AA1BD,uBA0BC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, SEARCH_MODULE } from '@akashaproject/common/constants';\nimport { dbs } from './indexes';\n\nexport const flushSchema = {\n  id: '/flush',\n  type: 'object',\n  properties: {\n    target: { type: 'string' },\n  },\n  required: ['target'],\n};\n\nconst modules = ['entry', 'tags', 'profiles'];\n\nexport default function init(sp, getService) {\n  const execute = Promise\n  .coroutine(function* (data: { target: string }, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, flushSchema, { throwError: true });\n\n    if (modules.indexOf(data.target) === -1) {\n      throw new Error('target is not recognized');\n    }\n\n    dbs[data.target].searchIndex.flush(function (err) {\n      if (err) {\n        return cb(err);\n      }\n      cb('', { done: true });\n    });\n    return { done: false };\n  });\n\n  const flush = { execute, name: 'flush', hasStream: true };\n  const service = function () {\n    return flush;\n  };\n  sp().service(SEARCH_MODULE.flush, service);\n\n  return flush;\n}\n"]}