{"version":3,"file":"feed.js","sourceRoot":"","sources":["feed.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAAmG;AAEnG,MAAM,WAAW,GAAG;IAClB,EAAE,EAAE,cAAc;IAClB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC5B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC9B;CACF,CAAC;AAEF,MAAM,UAAU,GAAG,iBAAiB,CAAC;AAErC,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QAEnD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACpD,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,yBAAa,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACzF,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,KAAK,GAAG,UAAU,CAAC,gCAAoB,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,WAAW,GAAG,SAAS;aAC5B,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAEzF,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;YAC5B,IAAI,CAAC,GAAG,EAAE;gBACR,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;aACrF;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC,CAAC;IACH,MAAM,OAAO,GAAG;QACd,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,gCAAoB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAEjD,OAAO,OAAO,CAAC;AACjB,CAAC;AA1BD,uBA0BC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, NOTIFICATIONS_MODULE } from '@akashaproject/common/constants';\n\nconst watchFollow = {\n  id: '/watchFollow',\n  type: 'object',\n  properties: {\n    akashaId: { type: 'string' },\n    ethAddress: { type: 'string', format: 'address' },\n    fromBlock: { type: 'number' },\n  },\n};\n\nconst EVENT_TYPE = 'FOLLOWING_EVENT';\n\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data, cb) {\n\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, watchFollow, { throwError: true });\n    const ethAddress = yield (getService(COMMON_MODULE.profileHelpers)).profileAddress(data);\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const queue = getService(NOTIFICATIONS_MODULE.queue);\n    const followEvent = contracts\n    .createWatcher(contracts.instance.Feed.Follow, { followed: ethAddress }, data.fromBlock);\n\n    followEvent.watch((err, ev) => {\n      if (!err) {\n        queue.push(cb, { type: EVENT_TYPE, payload: ev.args, blockNumber: ev.blockNumber });\n      }\n    });\n\n    return followEvent;\n  });\n  const service = function () {\n    return execute;\n  };\n  sp().service(NOTIFICATIONS_MODULE.feed, service);\n\n  return execute;\n}\n"]}