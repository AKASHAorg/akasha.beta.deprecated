{"version":3,"file":"votes.js","sourceRoot":"","sources":["votes.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, NOTIFICATIONS_MODULE } from '@akashaproject/common/constants';\n\nconst watchVotes = {\n  id: '/watchVotes',\n  type: 'object',\n  properties: {\n    akashaId: { type: 'string' },\n    ethAddress: { type: 'string', format: 'address' },\n    fromBlock: { type: 'number' },\n  },\n};\n\nconst EVENT_TYPE = 'VOTE_EVENT';\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data, cb) {\n\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, watchVotes, { throwError: true });\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const entriesCache = getService(NOTIFICATIONS_MODULE.entriesCache);\n    const queue = getService(NOTIFICATIONS_MODULE.queue);\n\n    const ethAddress = yield getService(COMMON_MODULE.profileHelpers).profileAddress(data);\n    if (!entriesCache.getAll().length) {\n      const fetchedEntries = yield contracts\n      .fromEvent(\n        contracts.instance.Entries.Publish, { author: ethAddress }, 0,\n        1000, { lastIndex: 0, reversed: true });\n      for (const event of fetchedEntries.results) {\n        yield entriesCache.push(event.args.entryId);\n      }\n    }\n\n    const voteEvent = contracts.createWatcher(\n      contracts.instance.Votes.Vote, { voteType: 0 }, data.fromBlock,\n    );\n    voteEvent.watch((err, ev) => {\n      if (err) {\n        return;\n      }\n      if (entriesCache.has(ev.args.target)) {\n        queue.push(\n          cb,\n          {\n            type: EVENT_TYPE,\n            payload: {\n              entryId: ev.args.target,\n              voter: ev.args.voter,\n              weight: ev.args.negative ?\n                '-' + (ev.args.weight).toString(10) : (ev.args.weight).toString(10),\n            },\n            blockNumber: ev.blockNumber,\n          },\n        );\n      }\n    });\n\n    return voteEvent;\n  });\n  const service = function () {\n    return execute;\n  };\n  sp().service(NOTIFICATIONS_MODULE.votes, service);\n\n  return execute;\n}\n"]}