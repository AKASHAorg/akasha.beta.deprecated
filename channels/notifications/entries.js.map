{"version":3,"file":"entries.js","sourceRoot":"","sources":["entries.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,iCAAwC;AACxC,+DAAoF;AAEpF,cAA6B,EAAE,EAAE,UAAU;IACzC;QAAA;YACU,cAAS,GAAG,EAAE,CAAC;YACf,YAAO,GAAG,EAAE,CAAC;QAqCvB,CAAC;QAnCQ,IAAI,CAAC,OAAO;YAEjB,IAAI,gBAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,aAAK,CAAC,OAAO,CAAC,EAAE;gBACvD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;aAC1B;YACD,OAAO,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC,QAAQ;iBAC9C,KAAK;iBACL,SAAS,CAAC,OAAO,CAAC;iBAClB,IAAI,CAAC,MAAM,CAAC,EAAE;gBACb,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE;oBACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC5B;gBACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,MAAM;YACX,OAAO,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;QAEM,KAAK;YACV,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC5B,CAAC;QAEM,WAAW;YAChB,OAAO,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;QAEM,GAAG,CAAC,OAAO;YAChB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAChD,CAAC;QAEM,cAAc,CAAC,OAAO;YAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9C,CAAC;KACF;IAED,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;IACxC,MAAM,OAAO,GAAG;QACd,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,gCAAoB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACzD,OAAO,YAAY,CAAC;AACtB,CAAC;AAhDD,uBAgDC","sourcesContent":["import * as Promise from 'bluebird';\nimport { contains, isNil } from 'ramda';\nimport { CORE_MODULE, NOTIFICATIONS_MODULE } from '@akashaproject/common/constants';\n\nexport default function init(sp, getService) {\n  class EntriesCache {\n    private published = [];\n    private canVote = [];\n\n    public push(entryId) {\n\n      if (contains(entryId, this.published) || isNil(entryId)) {\n        return Promise.resolve();\n      }\n      return getService(CORE_MODULE.CONTRACTS).instance\n        .Votes\n        .getRecord(entryId)\n        .then(record => {\n          if (record[2] > (Date.now() / 1000)) {\n            this.canVote.push(entryId);\n          }\n          this.published.push(entryId);\n        });\n    }\n\n    public getAll() {\n      return this.published;\n    }\n\n    public reset() {\n      this.published.length = 0;\n    }\n\n    public getOnlyVote() {\n      return this.canVote;\n    }\n\n    public has(entryId) {\n      return this.published.indexOf(entryId) !== -1;\n    }\n\n    public inVotingPeriod(entryId) {\n      return this.canVote.indexOf(entryId) !== -1;\n    }\n  }\n\n  const entriesCache = new EntriesCache();\n  const service = function () {\n    return entriesCache;\n  };\n  sp().service(NOTIFICATIONS_MODULE.entriesCache, service);\n  return entriesCache;\n}\n"]}