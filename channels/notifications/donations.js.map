{"version":3,"file":"donations.js","sourceRoot":"","sources":["donations.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAAmG;AAEnG,MAAM,WAAW,GAAG;IAClB,EAAE,EAAE,cAAc;IAClB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC5B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC9B;CACF,CAAC;AAEF,MAAM,UAAU,GAAG,gBAAgB,CAAC;AAEpC,cAA6B,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO;SACpB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QAE5B,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACpD,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,yBAAa,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACvF,MAAM,OAAO,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,KAAK,GAAG,UAAU,CAAC,gCAAoB,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,WAAW,GAAG,SAAS;aAC1B,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAErF,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;YAC5B,IAAI,CAAC,GAAG,EAAE;gBACR,KAAK,CAAC,IAAI,CACR,EAAE,EACF;oBACE,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI;wBAClB,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACnE,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACjE,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS;qBAC3B;oBACD,WAAW,EAAE,EAAE,CAAC,WAAW;iBAC5B,CACF,CAAC;aACH;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC,CAAC;IACL,MAAM,OAAO,GAAG;QACd,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,gCAAoB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAEtD,OAAO,OAAO,CAAC;AACjB,CAAC;AAvCD,uBAuCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, NOTIFICATIONS_MODULE } from '@akashaproject/common/constants';\n\nconst watchDonate = {\n  id: '/watchDonate',\n  type: 'object',\n  properties: {\n    akashaId: { type: 'string' },\n    ethAddress: { type: 'string', format: 'address' },\n    fromBlock: { type: 'number' },\n  },\n};\n\nconst EVENT_TYPE = 'DONATION_EVENT';\n\nexport default function init(sp, getService) {\n  const execute = Promise\n    .coroutine(function* (data, cb) {\n\n      const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n      v.validate(data, watchDonate, { throwError: true });\n      const ethAddress = yield getService(COMMON_MODULE.profileHelpers).profileAddress(data);\n      const web3Api = getService(CORE_MODULE.WEB3_API);\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const queue = getService(NOTIFICATIONS_MODULE.queue);\n      const donateEvent = contracts\n        .createWatcher(contracts.instance.AETH.Donate, { to: ethAddress }, data.fromBlock);\n\n      donateEvent.watch((err, ev) => {\n        if (!err) {\n          queue.push(\n            cb,\n            {\n              type: EVENT_TYPE,\n              payload: {\n                from: ev.args.from,\n                aeth: (web3Api.instance.fromWei(ev.args.aeth, 'ether')).toFormat(5),\n                eth: (web3Api.instance.fromWei(ev.args.eth, 'ether')).toFormat(5),\n                message: ev.args.extraData,\n              },\n              blockNumber: ev.blockNumber,\n            },\n          );\n        }\n      });\n\n      return donateEvent;\n    });\n  const service = function () {\n    return execute;\n  };\n  sp().service(NOTIFICATIONS_MODULE.donations, service);\n\n  return execute;\n}\n"]}