{"version":3,"file":"ipfs.js","sourceRoot":"","sources":["ipfs.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AAEpC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AAEjG,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE,EAAE,UAAU;IAC1C,MAAM,MAAM,GAAG,SAAS,MAAM,CAAE,IAAI;QAClC,MAAM,IAAI,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,WAAW,GAAG;YAClB,IAAI;YACJ,OAAO,EAAE,IAAI;SACd,CAAC;QACF,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,GAAG;aAC9D,GAAG,CAAC,WAAW,CAAC;aAChB,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,MAAM,iBAAiB,GAAG,SAAS,iBAAiB,CAAE,IAAI;QACxD,MAAM,QAAQ,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC1D,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC1B,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAChD;QACD,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,GAAG;aAC9D,GAAG,CAAC,IAAI,CAAC;aACT,OAAO,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;aAChF,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACb,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC7B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACb,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC;IAClD,MAAM,OAAO,GAAG;QACd,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AACrD,CAAC","sourcesContent":["import * as Promise from 'bluebird';\n\nimport { COMMENTS_MODULE, CORE_MODULE, GENERAL_SETTINGS } from '@akashaproject/common/constants';\n\nexport default function init (sp, getService) {\n  const create = function create (data) {\n    const date = (new Date()).toJSON();\n    const constructed = {\n      date,\n      content: data,\n    };\n    return (getService(CORE_MODULE.IPFS_CONNECTOR)).getInstance().api\n      .add(constructed)\n      .then((result: any) => result.hash);\n  };\n\n  const getCommentContent = function getCommentContent (hash) {\n    const comments = (getService(CORE_MODULE.STASH)).comments;\n    if (comments.hasFull(hash)) {\n      return Promise.resolve(comments.getFull(hash));\n    }\n    return (getService(CORE_MODULE.IPFS_CONNECTOR)).getInstance().api\n      .get(hash)\n      .timeout((getService(CORE_MODULE.SETTINGS)).get(GENERAL_SETTINGS.FULL_WAIT_TIME))\n      .then((data) => {\n        comments.setFull(hash, data);\n        return data;\n      }).catch((e) => {\n        return { content: null };\n      });\n  };\n\n  const commentIpfs = { create, getCommentContent };\n  const service = function () {\n    return commentIpfs;\n  };\n  sp().service(COMMENTS_MODULE.commentIpfs, service);\n}\n"]}