{"version":3,"file":"remove-comment.js","sourceRoot":"","sources":["remove-comment.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA+E;AAE/E,MAAM,cAAc,GAAG;IACrB,EAAE,EAAE,gBAAgB;IACpB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC7B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC;CAC1D,CAAC;AAEF,cAA6B,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAS,EAAE,EAAE;QACxD,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,QAAQ;aAC/C,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QACvF,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjE,OAAO,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC1E,MAAM,OAAO,GAAG;QACd,OAAO,aAAa,CAAC;IACvB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,2BAAe,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IACrD,OAAO,aAAa,CAAC;AACvB,CAAC;AAjBD,uBAiBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMENTS_MODULE, CORE_MODULE } from '@akashaproject/common/constants';\n\nconst removeCommentS = {\n  id: '/removeComment',\n  type: 'object',\n  properties: {\n    ethAddress: { type: 'string', format: 'address' },\n    commentId: { type: 'string' },\n    entryId: { type: 'string' },\n    token: { type: 'string' },\n  },\n  required: ['ethAddress', 'entryId', 'token', 'commentId'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data: any, cb) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, removeCommentS, { throwError: true });\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const txData = yield contracts.instance.Comments\n    .deleteComment.request(data.entryId, data.ethAddress, data.commentId, { gas: 250000 });\n    const transaction = yield contracts.send(txData, data.token, cb);\n    return { tx: transaction.tx, receipt: transaction.receipt };\n  });\n\n  const removeComment = { execute, name: 'removeComment', hasStream: true };\n  const service = function () {\n    return removeComment;\n  };\n  sp().service(COMMENTS_MODULE.removeComment, service);\n  return removeComment;\n}\n"]}