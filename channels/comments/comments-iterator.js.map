{"version":3,"file":"comments-iterator.js","sourceRoot":"","sources":["comments-iterator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMENTS_MODULE, CORE_MODULE } from '@akashaproject/common/constants';\n\nconst commentsIteratorS = {\n  id: '/commentsIterator',\n  type: 'object',\n  properties: {\n    limit: { type: 'number' },\n    entryId: { type: 'string' },\n    toBlock: { type: 'number' },\n    parent: { type: 'string' },\n    author: { type: 'string', format: 'address' },\n    reversed: { type: 'boolean' },\n  },\n  required: ['entryId', 'toBlock'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const fetchComment = getService(COMMENTS_MODULE.getComment);\n    v.validate(data, commentsIteratorS, { throwError: true });\n\n    const collection = [];\n    if (data.more) {\n      return { collection, lastBlock: 0, lastIndex: 0 };\n    }\n    const commentsCount = yield contracts.instance.Comments.totalComments(data.entryId);\n    const maxResults = commentsCount.toNumber();\n    const fetched = yield contracts\n    .fromEvent(\n      contracts.instance.Comments.Publish, {\n        entryId: data.entryId,\n        author: data.author,\n      },\n      data.toBlock, maxResults, { lastIndex: data.lastIndex, reversed: data.reversed });\n    for (const event of fetched.results) {\n      const comment = yield fetchComment.execute({\n        commentId: event.args.id,\n        entryId: event.args.entryId,\n        noResolve: true,\n      });\n      collection.push(Object.assign(\n        {},\n        comment,\n        { commentId: event.args.id, parent: event.args.parent }));\n    }\n\n    return { collection, lastBlock: fetched.fromBlock, lastIndex: fetched.lastIndex };\n  });\n\n  const commentsIterator = { execute, name: 'commentsIterator' };\n  const service = function () {\n    return commentsIterator;\n  };\n  sp().service(COMMENTS_MODULE.commentsIterator, service);\n  return commentsIterator;\n\n}\n"]}