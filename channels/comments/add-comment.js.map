{"version":3,"file":"add-comment.js","sourceRoot":"","sources":["add-comment.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA8F;AAE9F,MAAM,QAAQ,GAAG;IACf,EAAE,EAAE,UAAU;IACd,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC1B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,YAAY,EAAE,SAAS,EAAE,OAAO,CAAC;CAC7C,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAS,EAAE,EAAE;QACxD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEjD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,2BAAe,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtF,MAAM,WAAW,GAAG,CAAC,UAAU,CAAC,yBAAa,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACjF,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC;QACnC,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ;aAC9B,QAAQ,CAAC,OAAO,CAAC,OAAO,CACvB,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,GAAG,WAAW,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAE7E,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7D,IAAI,SAAS,GAAG,IAAI,CAAC;QAErB,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3C,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAClD,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;SACrD;QACD,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC9D,MAAM,OAAO,GAAG;QACd,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,2BAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC/C,OAAO,OAAO,CAAC;AACjB,CAAC;AA7BD,uBA6BC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMENTS_MODULE, COMMON_MODULE, CORE_MODULE } from '@akashaproject/common/constants';\n\nconst commentS = {\n  id: '/comment',\n  type: 'object',\n  properties: {\n    ethAddress: { type: 'string', format: 'address' },\n    parent: { type: 'string' },\n    entryId: { type: 'string' },\n    token: { type: 'string' },\n  },\n  required: ['ethAddress', 'entryId', 'token'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data: any, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, commentS, { throwError: true });\n\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const ipfsHash = yield (getService(COMMENTS_MODULE.commentIpfs)).create(data.content);\n    const decodedHash = (getService(COMMON_MODULE.ipfsHelpers)).decodeHash(ipfsHash);\n    const replyTo = data.parent || '0';\n    const txData = contracts.instance\n      .Comments.publish.request(\n        data.entryId, data.ethAddress, replyTo, ...decodedHash, { gas: 250000 });\n\n    const receipt = yield contracts.send(txData, data.token, cb);\n    let commentId = null;\n    // in the future extract this should be dynamic @TODO\n    if (receipt.logs && receipt.logs.length > 1) {\n      const log = receipt.logs[receipt.logs.length - 1];\n      commentId = log.topics.length > 3 ? log.data : null;\n    }\n    return { commentId, receipt, entryId: data.entryId };\n  });\n\n  const comment = { execute, name: 'comment', hasStream: true };\n  const service = function () {\n    return comment;\n  };\n  sp().service(COMMENTS_MODULE.comment, service);\n  return comment;\n}\n"]}