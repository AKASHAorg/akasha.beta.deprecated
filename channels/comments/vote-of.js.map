{"version":3,"file":"vote-of.js","sourceRoot":"","sources":["vote-of.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE9F,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE,OAAO;IACb,KAAK,EAAE;QACL,IAAI,EAAE,QAAQ;QACd,UAAU,EAAE;YACV,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;YAC7B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;YAC5B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;SAClD;QACD,QAAQ,EAAE,CAAC,WAAW,CAAC;KACxB;IACD,WAAW,EAAE,IAAI;IACjB,QAAQ,EAAE,CAAC;CACZ,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAC/B,QAAQ,CAAC,EAAE,IAAqE;QAC9E,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACxD,MAAM,cAAc,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC;QACjF,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YAChC,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;gBAC7C,OAAO,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;gBACf,yBAAY,GAAG,IAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAG;YAC7C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/C,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEL,MAAM,SAAS,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;IACjD,MAAM,OAAO,GAAG;QACd,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACjD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMENTS_MODULE, COMMON_MODULE, CORE_MODULE } from '@akashaproject/common/constants';\n\nexport const getVoteOfSchema = {\n  id: '/getVoteOf',\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      commentId: { type: 'string' },\n      akashaId: { type: 'string' },\n      ethAddress: { type: 'string', format: 'address' },\n    },\n    required: ['commentId'],\n  },\n  uniqueItems: true,\n  minItems: 1,\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(\n    function* (data: { commentId: string, akashaId?: string, ethAddress?: string }[]) {\n      const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n      v.validate(data, getVoteOfSchema, { throwError: true });\n      const profileAddress = (getService(COMMON_MODULE.profileHelpers)).profileAddress;\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const requests = data.map((req) => {\n        return profileAddress(req).then((ethAddress) => {\n          return contracts.instance.Votes.voteOf(ethAddress, req.commentId);\n        }).then((vote) => {\n          return { ...req, vote: vote.toString(10) };\n        });\n      });\n\n      const collection = yield Promise.all(requests);\n      return { collection };\n    });\n\n  const getVoteOf = { execute, name: 'getVoteOf' };\n  const service = function () {\n    return getVoteOf;\n  };\n  sp().service(COMMENTS_MODULE.getVoteOf, service);\n  return getVoteOf;\n}\n"]}