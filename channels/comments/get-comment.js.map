{"version":3,"file":"get-comment.js","sourceRoot":"","sources":["get-comment.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAC;AACxC,OAAO,EACL,eAAe,EACf,aAAa,EACb,WAAW,EACX,cAAc,GACf,MAAM,iCAAiC,CAAC;AAEzC,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE,EAAE,UAAU;IAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAC/B,QAAQ,CAAC,EAAE,IAAiE;QAE1E,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,CACJ,MAAM,EAAE,UAAU,EAAE,OAAO,EAC3B,WAAW,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,MAAM,SAAS,CAAC,QAAQ;aAC5D,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAErD,MAAM,QAAQ,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAC1F,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;QAC5F,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9B,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAE7F,MAAM,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,GAAG,MAAM,SAAS;aACnD,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE5C,OAAO,MAAM,CAAC,MAAM,CAClB,EAAE,EACF,OAAO,EACP;YACE,MAAM;YACN,OAAO;YACP,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI;YACzC,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;YACjC,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;YACvB,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE;YAC/B,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;SACpC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEL,MAAM,UAAU,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;IACnD,MAAM,OAAO,GAAG;QACd,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAClD,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { unpad } from 'ethereumjs-util';\nimport {\n  COMMENTS_MODULE,\n  COMMON_MODULE,\n  CORE_MODULE,\n  PROFILE_MODULE,\n} from '@akashaproject/common/constants';\n\nexport default function init (sp, getService) {\n  const execute = Promise.coroutine(\n    function* (data: { entryId: string, commentId: string, noResolve?: boolean }) {\n\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const [\n        parent, ethAddress, deleted,\n        publishDate, fn, digestSize, hash] = yield contracts.instance\n        .Comments.getComment(data.entryId, data.commentId);\n\n      const ipfsHash = (getService(COMMON_MODULE.ipfsHelpers)).encodeHash(fn, digestSize, hash);\n      const author = yield (getService(PROFILE_MODULE.resolveEthAddress)).execute({ ethAddress });\n      const content = data.noResolve ?\n        { ipfsHash } : yield (getService(COMMENTS_MODULE.commentIpfs)).getCommentContent(ipfsHash);\n\n      const [totalVotes, score, endPeriod] = yield contracts\n        .instance.Votes.getRecord(data.commentId);\n\n      return Object.assign(\n        {},\n        content,\n        {\n          author,\n          deleted,\n          parent: (!!unpad(parent)) ? parent : null,\n          totalVotes: totalVotes.toNumber(),\n          score: score.toNumber(),\n          endPeriod: endPeriod.toNumber(),\n          publishDate: publishDate.toNumber(),\n        });\n    });\n\n  const getComment = { execute, name: 'getComment' };\n  const service = function () {\n    return getComment;\n  };\n  sp().service(COMMENTS_MODULE.getComment, service);\n  return getComment;\n}\n"]}