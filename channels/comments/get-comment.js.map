{"version":3,"file":"get-comment.js","sourceRoot":"","sources":["get-comment.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,qDAAwC;AACxC,+DAA8G;AAE9G,cAA6B,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAiE;QAE5G,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,CACJ,MAAM,EAAE,UAAU,EAAE,OAAO,EAC3B,WAAW,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,MAAM,SAAS,CAAC,QAAQ;aAC5D,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAErD,MAAM,QAAQ,GAAG,UAAU,CAAC,yBAAa,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACxF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,0BAAc,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;QAC1F,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9B,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,UAAU,CAAC,2BAAe,CAAC,WAAW,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAE3F,MAAM,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,GAAG,MAAM,SAAS;aACnD,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE5C,OAAO,MAAM,CAAC,MAAM,CAClB,EAAE,EACF,OAAO,EACP;YACE,MAAM,EAAE,CAAC,CAAC,CAAC,uBAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI;YACzC,MAAM;YACN,OAAO;YACP,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;YACjC,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;YACvB,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE;YAC/B,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;SACpC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,MAAM,UAAU,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;IACnD,MAAM,OAAO,GAAG;QACd,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,2BAAe,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAClD,OAAO,UAAU,CAAC;AACpB,CAAC;AArCD,uBAqCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { unpad } from 'ethereumjs-util';\nimport { COMMENTS_MODULE, COMMON_MODULE, CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data: { entryId: string, commentId: string, noResolve?: boolean }) {\n\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const [\n      parent, ethAddress, deleted,\n      publishDate, fn, digestSize, hash] = yield contracts.instance\n      .Comments.getComment(data.entryId, data.commentId);\n\n    const ipfsHash = getService(COMMON_MODULE.ipfsHelpers).encodeHash(fn, digestSize, hash);\n    const author = yield getService(PROFILE_MODULE.resolveEthAddress).execute({ ethAddress });\n    const content = data.noResolve ?\n      { ipfsHash } : yield getService(COMMENTS_MODULE.commentIpfs).getCommentContent(ipfsHash);\n\n    const [totalVotes, score, endPeriod] = yield contracts\n      .instance.Votes.getRecord(data.commentId);\n\n    return Object.assign(\n      {},\n      content,\n      {\n        parent: (!!unpad(parent)) ? parent : null,\n        author,\n        deleted,\n        totalVotes: totalVotes.toNumber(),\n        score: score.toNumber(),\n        endPeriod: endPeriod.toNumber(),\n        publishDate: publishDate.toNumber(),\n      });\n  });\n\n  const getComment = { execute, name: 'getComment' };\n  const service = function () {\n    return getComment;\n  };\n  sp().service(COMMENTS_MODULE.getComment, service);\n  return getComment;\n}\n"]}