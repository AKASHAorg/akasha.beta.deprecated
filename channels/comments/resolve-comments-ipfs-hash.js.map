{"version":3,"file":"resolve-comments-ipfs-hash.js","sourceRoot":"","sources":["resolve-comments-ipfs-hash.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE/E,MAAM,wBAAwB,GAAG;IAC/B,EAAE,EAAE,0BAA0B;IAC9B,IAAI,EAAE,OAAO;IACb,KAAK,EAAE;QACL,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,WAAW;KACpB;IACD,WAAW,EAAE,IAAI;IACjB,QAAQ,EAAE,CAAC;CACZ,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAc,EAAE,EAAO;QAClE,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,wBAAwB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACjE,MAAM,iBAAiB,GAAG,CAAC,UAAU,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,CAAC;QACtF,KAAK,MAAM,QAAQ,IAAI,IAAI,EAAE;YAC3B,iBAAiB,CAAC,QAAQ,CAAC;iBACxB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;SACpE;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC,CAAC;IAEH,MAAM,uBAAuB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,yBAAyB,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC9F,MAAM,OAAO,GAAG;QACd,OAAO,uBAAuB,CAAC;IACjC,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,uBAAuB,EAAE,OAAO,CAAC,CAAC;IAC/D,OAAO,uBAAuB,CAAC;AACjC,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMENTS_MODULE, CORE_MODULE } from '@akashaproject/common/constants';\n\nconst resolveCommentsIpfsHashS = {\n  id: '/resolveCommentsIpfsHash',\n  type: 'array',\n  items: {\n    type: 'string',\n    format: 'multihash',\n  },\n  uniqueItems: true,\n  minItems: 1,\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data: string[], cb: any) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, resolveCommentsIpfsHashS, { throwError: true });\n    const getCommentContent = (getService(COMMENTS_MODULE.commentIpfs)).getCommentContent;\n    for (const ipfsHash of data) {\n      getCommentContent(ipfsHash)\n        .then(result => cb('', Object.assign({}, result, { ipfsHash })));\n    }\n    return {};\n  });\n\n  const resolveCommentsIpfsHash = { execute, name: 'resolveCommentsIpfsHash', hasStream: true };\n  const service = function () {\n    return resolveCommentsIpfsHash;\n  };\n  sp().service(COMMENTS_MODULE.resolveCommentsIpfsHash, service);\n  return resolveCommentsIpfsHash;\n}\n"]}