{"version":3,"file":"generate-key.js","sourceRoot":"","sources":["generate-key.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,6CAAqC;AACrC,+DAA2E;AAE3E,MAAM,eAAe,GAAG;IACtB,EAAE,EAAE,iBAAiB;IACrB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE;QAC3C,SAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE;KAC7C;IACD,QAAQ,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC;CACpC,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,CAAC,oBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;YACrE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QACD,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,uBAAW,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9E,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;IAC3D,MAAM,OAAO,GAAG;QACd,OAAO,cAAc,CAAC;IACxB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,uBAAW,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAClD,OAAO,cAAc,CAAC;AACxB,CAAC;AAlBD,uBAkBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { Buffer } from 'safe-buffer';\nimport { AUTH_MODULE, CORE_MODULE } from '@akashaproject/common/constants';\n\nconst generateEthKeyS = {\n  id: '/generateEthKey',\n  type: 'object',\n  properties: {\n    password: { type: 'any', format: 'buffer' },\n    password1: { type: 'any', format: 'buffer' },\n  },\n  required: ['password', 'password1'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, generateEthKeyS, { throwError: true });\n\n    if (!(Buffer.from(data.password)).equals(Buffer.from(data.password1))) {\n      throw new Error('auth:generate-key:pwdm');\n    }\n    const address = yield getService(AUTH_MODULE.auth).generateKey(data.password);\n    return { address };\n  });\n\n  const generateEthKey = { execute, name: 'generateEthKey' };\n  const service = function () {\n    return generateEthKey;\n  };\n  sp().service(AUTH_MODULE.generateEthKey, service);\n  return generateEthKey;\n}\n"]}