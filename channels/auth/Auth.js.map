{"version":3,"file":"Auth.js","sourceRoot":"","sources":["Auth.ts"],"names":[],"mappings":"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","sourcesContent":["import { createCipheriv, createDecipheriv, randomBytes } from 'crypto';\nimport { Buffer } from 'safe-buffer';\n// import { takeLast }from 'ramda';\nimport {\n  addHexPrefix,\n  bufferToHex,\n  ecrecover,\n  fromRpcSig,\n  hashPersonalMessage,\n  pubToAddress,\n  toBuffer,\n} from 'ethereumjs-util';\nimport * as Promise from 'bluebird';\nimport { AUTH_MODULE, CORE_MODULE } from '@akashaproject/common/constants';\n\nexport const randomBytesAsync = Promise.promisify(randomBytes);\n\nexport default function init(sp, getService) {\n\n  class Auth {\n    private encrypted: any;\n    private decipher: any;\n    private cipher: any;\n    private session:\n      { address: string, expiration: Date, vrs: { v: string, r: string, s: string } };\n    private task;\n\n    public generateKey(pass: any) {\n      try {\n        if (!Buffer.isBuffer(pass)) {\n          return Promise.reject(new Error('Incorrect password format'));\n        }\n        const transformed = Buffer.from(pass).toString('utf8');\n        return (getService(CORE_MODULE.GETH_CONNECTOR)).getInstance()\n        .web3\n        .personal\n        .newAccountAsync(transformed)\n        .then((address: string) => {\n          return address;\n        });\n      } catch (err) {\n        return Promise.reject(err);\n      }\n\n    }\n\n    public login(acc: string, pass: any | Uint8Array, timer: number = 1) {\n\n      return (getService(CORE_MODULE.WEB3_HELPER))\n      .hasKey(acc)\n      .then((found) => {\n        if (!found) {\n          throw new Error(`local key for ${acc} not found`);\n        }\n        return this.encrypt(pass);\n      })\n      .then(() => {\n        return randomBytesAsync(64);\n      })\n      .then((buff) => {\n        const token = addHexPrefix(buff.toString('hex'));\n        return this.signSession(token, acc, Buffer.from(pass).toString('utf8'))\n        .then((signedString: string) => {\n          const expiration = new Date();\n          const clientToken = hashPersonalMessage(buff);\n          expiration.setMinutes(expiration.getMinutes() + timer);\n          (getService(CORE_MODULE.GETH_CONNECTOR))\n          .getInstance().web3.personal.lockAccountAsync(acc).then(() => null);\n          (getService(CORE_MODULE.GETH_CONNECTOR))\n          .getInstance().web3.eth.defaultAccount = acc;\n          this.session = {\n            expiration,\n            address: acc,\n            vrs: fromRpcSig(signedString),\n          };\n          this.task = setTimeout(() => this.flushSession(), 1000 * 60 * timer);\n          return {\n            expiration,\n            token: addHexPrefix(clientToken.toString('hex')),\n            ethAddress: acc,\n          };\n        });\n      });\n    }\n\n    public logout() {\n      if (this.session) {\n        (getService(CORE_MODULE.GETH_CONNECTOR))\n        .getInstance().web3.personal.lockAccountAsync(this.session.address);\n      }\n      this.flushSession();\n\n    }\n\n    public isLogged(token: any) {\n      let pubKey: string;\n      let ethAddr: Buffer;\n      const now = new Date();\n      // console.log(token);\n      if (!this.session || !token) {\n        return false;\n      }\n\n      if (now > this.session.expiration) {\n        return false;\n      }\n      const { v, r, s } = this.session.vrs;\n      try {\n        pubKey = bufferToHex(ecrecover(toBuffer(token), v, r, s));\n        ethAddr = pubToAddress(pubKey);\n        // console.log(bufferToHex(ethAddr), this.session.address);\n        return bufferToHex(ethAddr) === this.session.address;\n      } catch (err) {\n        return false;\n      }\n\n    }\n\n    public signData(data: {}, token: string) {\n      return (getService(CORE_MODULE.GETH_CONNECTOR)).getInstance()\n      .web3\n      .personal\n      .sendTransactionAsync(data, this.read(token).toString('utf8'));\n    }\n\n    public signMessage(data: {}, token: string) {\n      return (getService(CORE_MODULE.GETH_CONNECTOR)).getInstance()\n      .web3\n      .personal\n      .signAsync(\n        data,\n        (getService(CORE_MODULE.GETH_CONNECTOR)).getInstance().web3.eth.defaultAccount,\n        this.read(token).toString('utf8'));\n    }\n\n    generateRandom() {\n      return randomBytesAsync(16).then((buff) => {\n        return randomBytesAsync(16).then((iv) => {\n          const extraData = randomBytes(8);\n          this.cipher = createCipheriv('aes-256-gcm', buff.toString('hex'), iv);\n          this.decipher = createDecipheriv('aes-256-gcm', buff.toString('hex'), iv);\n\n          this.cipher.setAAD(extraData);\n          this.decipher.setAAD(extraData);\n          return true;\n        });\n      });\n    }\n\n    encrypt(key: any) {\n      const keyTr = Buffer.from(key);\n      return this.generateRandom().then(() => {\n        this.encrypted = Buffer.concat([this.cipher.update(keyTr), this.cipher.final()]);\n        return true;\n      });\n    }\n\n    read(token: any) {\n\n      if (!this.isLogged(token)) {\n        throw new Error('Token is not valid');\n      }\n      this.decipher.setAuthTag(this.cipher.getAuthTag());\n      const result = Buffer.concat(\n        [this.decipher.update(this.encrypted), this.decipher.final()]);\n      this.encrypt(result);\n      return result;\n    }\n\n    flushSession() {\n      this.session = null;\n      this.encrypted = null;\n      this.cipher = null;\n      this.decipher = null;\n      clearTimeout(this.task);\n      console.log('flushed session');\n    }\n\n    signSession(hash: string, account: string, password: string) {\n      return (getService(CORE_MODULE.GETH_CONNECTOR)).getInstance()\n      .web3\n      .personal\n      .signAsync(hash, account, password);\n    }\n  }\n\n  const auth = new Auth();\n  const service = function () {\n    return auth;\n  };\n  sp().service(AUTH_MODULE.auth, service);\n}\n"]}