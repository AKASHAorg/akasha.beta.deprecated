{"version":3,"file":"can-claim.js","sourceRoot":"","sources":["can-claim.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA4E;AAE5E,MAAM,SAAS,GAAG;IAChB,EAAE,EAAE,WAAW;IACf,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,OAAO,EAAE;YACP,IAAI,EAAE,OAAO;YACb,KAAK,EAAE;gBACL,IAAI,EAAE,QAAQ;aACf;YACD,WAAW,EAAE,IAAI;YACjB,QAAQ,EAAE,CAAC;SACZ;KACF;IACD,QAAQ,EAAE,CAAC,SAAS,CAAC;CACtB,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAElD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;QAC9C,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;YACvC,OAAO,SAAS,CAAC,QAAQ,CAAC,KAAK;iBAC9B,aAAa,CAAC,EAAE,EAAE,SAAS,CAAC;iBAC5B,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBACf,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/C,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;IAC/C,MAAM,OAAO,GAAG;QACd,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC7C,OAAO,QAAQ,CAAC;AAClB,CAAC;AAxBD,uBAwBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst canClaimS = {\n  id: '/canClaim',\n  type: 'object',\n  properties: {\n    entryId: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n      uniqueItems: true,\n      minItems: 1,\n    },\n  },\n  required: ['entryId'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, canClaimS, { throwError: true });\n\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const timeStamp = new Date().getTime() / 1000;\n    const requests = data.entryId.map((id) => {\n      return contracts.instance.Votes\n      .canClaimEntry(id, timeStamp)\n      .then((status) => {\n        return { entryId: id, status };\n      });\n    });\n    const collection = yield Promise.all(requests);\n    return { collection };\n  });\n\n  const canClaim = { execute, name: 'canClaim' };\n  const service = function () {\n    return canClaim;\n  };\n  sp().service(ENTRY_MODULE.canClaim, service);\n  return canClaim;\n}\n"]}