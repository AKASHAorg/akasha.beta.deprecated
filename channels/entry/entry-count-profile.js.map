{"version":3,"file":"entry-count-profile.js","sourceRoot":"","sources":["entry-count-profile.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAE7F,MAAM,uBAAuB,GAAG;IAC9B,EAAE,EAAE,yBAAyB;IAC7B,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC5B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;KAClD;CACF,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE,EAAE,UAAU;IAC1C,MAAM,OAAO,GAAG,OAAO;SACpB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAgD;QACpE,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,uBAAuB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEhE,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACtF,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;aACpD,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC3C,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEL,MAAM,sBAAsB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,wBAAwB,EAAE,CAAC;IAC3E,MAAM,OAAO,GAAG;QACd,OAAO,sBAAsB,CAAC;IAChC,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IACxD,OAAO,sBAAsB,CAAC;AAChC,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nconst getProfileEntriesCountS = {\n  id: '/getProfileEntriesCount',\n  type: 'object',\n  properties: {\n    akashaId: { type: 'string' },\n    ethAddress: { type: 'string', format: 'address' },\n  },\n};\n\nexport default function init (sp, getService) {\n  const execute = Promise\n    .coroutine(function* (data: { ethAddress?: string, akashaId?: string }) {\n      const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n      v.validate(data, getProfileEntriesCountS, { throwError: true });\n\n      const address = yield (getService(COMMON_MODULE.profileHelpers)).profileAddress(data);\n      const count = yield (getService(CORE_MODULE.CONTRACTS))\n        .instance.Entries.getEntryCount(address);\n      return { count: count.toString(10) };\n    });\n\n  const getProfileEntriesCount = { execute, name: 'getProfileEntriesCount' };\n  const service = function () {\n    return getProfileEntriesCount;\n  };\n  sp().service(PROFILE_MODULE.entryCountProfile, service);\n  return getProfileEntriesCount;\n}\n"]}