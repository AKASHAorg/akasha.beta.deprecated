{"version":3,"file":"get-vote-of.js","sourceRoot":"","sources":["get-vote-of.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA2F;AAE9E,QAAA,UAAU,GAAG;IACxB,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,IAAI,EAAE,OAAO;YACb,KAAK,EAAE;gBACL,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC3B,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC5B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;iBAClD;gBACD,QAAQ,EAAE,CAAC,SAAS,CAAC;aACtB;YACD,WAAW,EAAE,IAAI;YACjB,QAAQ,EAAE,CAAC;SACZ;KACF;IACD,QAAQ,EAAE,CAAC,MAAM,CAAC;CAEnB,CAAC;AAEF,cAA6B,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAC/B,QAAQ,CAAC,EAAE,IAA6E;QACtF,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,kBAAU,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEnD,MAAM,cAAc,GAAG,UAAU,CAAC,yBAAa,CAAC,CAAC,cAAc,CAAC;QAChE,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACrC,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;gBAC7C,OAAO,OAAO,CAAC,GAAG,CAAC;oBACjB,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,CAAC,OAAO,CAAC;oBACxD,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,OAAO,CAAC;iBAC1D,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBACxB,yBACK,GAAG,IACN,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EACrB,OAAO,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAC1D,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,IACjB;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/C,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEL,MAAM,SAAS,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;IACjD,MAAM,OAAO,GAAG;QACd,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9C,OAAO,SAAS,CAAC;AACnB,CAAC;AAnCD,uBAmCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nexport const getVoteOfS = {\n  id: '/getVoteOf',\n  type: 'object',\n  properties: {\n    list: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          entryId: { type: 'string' },\n          akashaId: { type: 'string' },\n          ethAddress: { type: 'string', format: 'address' },\n        },\n        required: ['entryId'],\n      },\n      uniqueItems: true,\n      minItems: 1,\n    },\n  },\n  required: ['list'],\n\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(\n    function* (data: { list: { entryId: string, akashaId?: string, ethAddress?: string }[] }) {\n      const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n      v.validate(data, getVoteOfS, { throwError: true });\n\n      const profileAddress = getService(COMMON_MODULE).profileAddress;\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const web3Api = getService(CORE_MODULE.WEB3_API);\n      const requests = data.list.map((req) => {\n        return profileAddress(req).then((ethAddress) => {\n          return Promise.all([\n            contracts.instance.Votes.voteOf(ethAddress, req.entryId),\n            contracts.instance.Votes.karmaOf(ethAddress, req.entryId),\n          ]);\n        }).spread((vote, karma) => {\n          return {\n            ...req,\n            vote: vote.toString(),\n            essence: (web3Api.instance.fromWei(karma[0])).toFormat(10),\n            claimed: karma[1],\n          };\n        });\n      });\n\n      const collection = yield Promise.all(requests);\n      return { collection };\n    });\n\n  const getVoteOf = { execute, name: 'getVoteOf' };\n  const service = function () {\n    return getVoteOf;\n  };\n  sp().service(ENTRY_MODULE.getVoteOf, service);\n  return getVoteOf;\n}\n"]}