{"version":3,"file":"can-claim-vote.js","sourceRoot":"","sources":["can-claim-vote.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA4E;AAE5E,MAAM,aAAa,GAAG;IACpB,EAAE,EAAE,WAAW;IACf,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,OAAO,EAAE;YACP,IAAI,EAAE,OAAO;YACb,KAAK,EAAE;gBACL,IAAI,EAAE,QAAQ;aACf;YACD,WAAW,EAAE,IAAI;YACjB,QAAQ,EAAE,CAAC;SACZ;KACF;IACD,QAAQ,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC;CACpC,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAC/B,QAAQ,CAAC,EAAE,IAA+C;QACxD,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEtD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;QAC9C,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;YACvC,OAAO,SAAS,CAAC,QAAQ,CAAC,KAAK;iBAC9B,iBAAiB,CAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC;iBACjD,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBACf,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/C,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEL,MAAM,YAAY,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC;IACvD,MAAM,OAAO,GAAG;QACd,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACjD,OAAO,YAAY,CAAC;AACtB,CAAC;AAzBD,uBAyBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst canClaimVoteS = {\n  id: '/canClaim',\n  type: 'object',\n  properties: {\n    ethAddress: { type: 'string', format: 'address' },\n    entries: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n      uniqueItems: true,\n      minItems: 1,\n    },\n  },\n  required: ['ethAddress', 'entries'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(\n    function* (data: { entries: string[], ethAddress: string }) {\n      const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n      v.validate(data, canClaimVoteS, { throwError: true });\n\n      const timeStamp = new Date().getTime() / 1000;\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const requests = data.entries.map((id) => {\n        return contracts.instance.Votes\n        .canClaimEntryVote(id, data.ethAddress, timeStamp)\n        .then((status) => {\n          return { entryId: id, status };\n        });\n      });\n      const collection = yield Promise.all(requests);\n      return { collection };\n    });\n\n  const canClaimVote = { execute, name: 'canClaimVote' };\n  const service = function () {\n    return canClaimVote;\n  };\n  sp().service(ENTRY_MODULE.canClaimVote, service);\n  return canClaimVote;\n}\n"]}