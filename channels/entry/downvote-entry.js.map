{"version":3,"file":"downvote-entry.js","sourceRoot":"","sources":["downvote-entry.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA4E;AAE/D,QAAA,QAAQ,GAAG;IACtB,EAAE,EAAE,WAAW;IACf,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzB,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC3B;IACD,QAAQ,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,CAAC;CACvD,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACnD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEjD,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC3D;QACD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK;aACtC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QACtF,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjE,OAAO,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAChE,MAAM,OAAO,GAAG;QACd,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC7C,OAAO,QAAQ,CAAC;AAClB,CAAC;AApBD,uBAoBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nexport const downvote = {\n  id: '/downvote',\n  type: 'object',\n  properties: {\n    entryId: { type: 'string' },\n    token: { type: 'string' },\n    ethAddress: { type: 'string', format: 'address' },\n    weight: { type: 'number' },\n  },\n  required: ['entryId', 'token', 'ethAddress', 'weight'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, downvote, { throwError: true });\n\n    if (data.weight < 1 || data.weight > 10) {\n      throw new Error('Vote weight value must be between 1-10');\n    }\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const txData = contracts.instance.Votes\n    .voteEntry.request(data.weight, data.entryId, true, data.ethAddress, { gas: 250000 });\n    const transaction = yield contracts.send(txData, data.token, cb);\n    return { tx: transaction.tx, receipt: transaction.receipt };\n  });\n  const downVote = { execute, name: 'downvote', hasStream: true };\n  const service = function () {\n    return downVote;\n  };\n  sp().service(ENTRY_MODULE.downVote, service);\n  return downVote;\n}\n"]}