{"version":3,"file":"get-entry-list.js","sourceRoot":"","sources":["get-entry-list.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,QAAQ,IAAI,cAAc,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAE5E,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,EAAE,EAAE,eAAe;IACnB,IAAI,EAAE,OAAO;IACb,KAAK,EAAE;QACL,IAAI,EAAE,WAAW;KAClB;IACD,WAAW,EAAE,IAAI;IACjB,QAAQ,EAAE,CAAC;CACZ,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE,EAAE,UAAU;IAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACnD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,SAAS,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QACzC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD,MAAM,QAAQ,GAAG,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACnD,KAAK,MAAM,QAAQ,IAAI,IAAI,EAAE;YAC3B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CACzC,EAAE,CACA,EAAE,EACF;gBACE,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,UAAU,EAAE,QAAQ,CAAC,UAAU;gBAC/B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CACF,CAAC,CAAC;SACN;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IACxE,MAAM,OAAO,GAAG;QACd,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACjD,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { getEntry as getEntrySchema } from './get-entry';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nexport const getEntryListS = {\n  id: '/getEntryList',\n  type: 'array',\n  items: {\n    $ref: '/getEntry',\n  },\n  uniqueItems: true,\n  minItems: 1,\n};\n\nexport default function init (sp, getService) {\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.addSchema(getEntrySchema, '/getEntry');\n    v.validate(data, getEntryListS, { throwError: true });\n    const getEntry = getService(ENTRY_MODULE.getEntry);\n    for (const entryObj of data) {\n      getEntry.execute(entryObj).then((result) =>\n        cb(\n          '',\n          {\n            data: result,\n            entryId: entryObj.entryId,\n            ethAddress: entryObj.ethAddress,\n            akashaId: entryObj.akashaId,\n          },\n        ));\n    }\n    return {};\n  });\n\n  const getEntryList = { execute, name: 'getEntryList', hasStream: true };\n  const service = function () {\n    return getEntryList;\n  };\n  sp().service(ENTRY_MODULE.getEntryList, service);\n  return getEntryList;\n}\n"]}