{"version":3,"file":"upvote-entry.js","sourceRoot":"","sources":["upvote-entry.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,QAAQ,IAAI,MAAM,EAAE,MAAM,kBAAkB,CAAC;AACtD,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAE5E,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE,EAAE,UAAU;IAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACnD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE/C,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC3D;QACD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS;aAC9C,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAC/E,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7D,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC5D,MAAM,OAAO,GAAG;QACd,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { downvote as upvote } from './downvote-entry';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nexport default function init (sp, getService) {\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, upvote, { throwError: true });\n\n    if (data.weight < 1 || data.weight > 10) {\n      throw new Error('Vote weight value must be between 1-10');\n    }\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const txData = contracts.instance.Votes.voteEntry\n      .request(data.weight, data.entryId, false, data.ethAddress, { gas: 250000 });\n    const receipt = yield contracts.send(txData, data.token, cb);\n    return { receipt };\n  });\n\n  const upVote = { execute, name: 'upvote', hasStream: true };\n  const service = function () {\n    return upVote;\n  };\n  sp().service(ENTRY_MODULE.upVote, service);\n  return upVote;\n}\n"]}