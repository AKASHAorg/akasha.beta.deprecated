{"version":3,"file":"entry-count-tag.js","sourceRoot":"","sources":["entry-count-tag.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA4E;AAE5E,MAAM,mBAAmB,GAAG;IAC1B,EAAE,EAAE,qBAAqB;IACzB,IAAI,EAAE,OAAO;IACb,KAAK,EAAE;QACL,IAAI,EAAE,QAAQ;KACf;IACD,WAAW,EAAE,IAAI;IACjB,QAAQ,EAAE,CAAC;CACZ,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,mBAAmB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE5D,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YAChC,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI;iBAC7B,YAAY,CAAC,GAAG,CAAC;iBACjB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;gBACd,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/C,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,MAAM,kBAAkB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,oBAAoB,EAAE,CAAC;IACnE,MAAM,OAAO,GAAG;QACd,OAAO,kBAAkB,CAAC;IAC5B,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;IACvD,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAvBD,uBAuBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst getTagEntriesCountS = {\n  id: '/getTagEntriesCount',\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n  uniqueItems: true,\n  minItems: 1,\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, getTagEntriesCountS, { throwError: true });\n\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const requests = data.map((tag) => {\n      return contracts.instance.Tags\n      .totalEntries(tag)\n      .then((count) => {\n        return { count: count.toString(10), tag };\n      });\n    });\n    const collection = yield Promise.all(requests);\n    return { collection };\n  });\n\n  const getTagEntriesCount = { execute, name: 'getTagEntriesCount' };\n  const service = function () {\n    return getTagEntriesCount;\n  };\n  sp().service(ENTRY_MODULE.getTagEntriesCount, service);\n  return getTagEntriesCount;\n}\n"]}