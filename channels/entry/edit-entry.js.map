{"version":3,"file":"edit-entry.js","sourceRoot":"","sources":["edit-entry.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { unpad } from 'ethereumjs-util';\nimport { COMMON_MODULE, CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst update = {\n  id: '/publish',\n  type: 'object',\n  properties: {\n    content: {\n      type: 'object',\n    },\n    token: {\n      type: 'string',\n    },\n    tags: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n      uniqueItems: true,\n      minItems: 1,\n    },\n    entryType: {\n      type: 'number',\n    },\n    ethAddress: { type: 'string', format: 'address' },\n  },\n  required: ['content', 'token', 'tags', 'ethAddress', 'entryType'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, update, { throwError: true });\n\n    let ipfsEntry = new (getService(ENTRY_MODULE.ipfsEntryHelper)).IpfsEntry();\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const [fn, digestSize, hash] = yield contracts\n      .instance.Entries.getEntry(data.ethAddress, data.entryId);\n\n    if (!unpad(hash)) {\n      throw new Error(`entryId: ${data.entryId} published by ${data.ethAddress} does not exits`);\n    }\n\n    const ipfsHashPublished = (getService(COMMON_MODULE.ipfsHelpers)).encodeHash(fn, digestSize, hash);\n    const ipfsHash = yield ipfsEntry\n      .edit(data.content, data.tags, data.entryType, ipfsHashPublished);\n    const decodedHash = (getService(COMMON_MODULE.ipfsHelpers)).decodeHash(ipfsHash);\n    delete data.content;\n    delete data.tags;\n    ipfsEntry = null;\n    const txData = contracts.instance.Entries.edit.request(data.entryId, ...decodedHash);\n    const receipt = yield contracts.send(txData, data.token, cb);\n\n    return { receipt };\n  });\n\n  const editEntry = { execute, name: 'editEntry', hasStream: true };\n  const service = function () {\n    return editEntry;\n  };\n  sp().service(ENTRY_MODULE.editEntry, service);\n  return editEntry;\n}\n"]}