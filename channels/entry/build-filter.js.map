{"version":3,"file":"build-filter.js","sourceRoot":"","sources":["build-filter.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA4F;AAE5F,MAAM,YAAY,GAAG;IACnB,EAAE,EAAE,cAAc;IAClB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzB,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC5B;IACD,QAAQ,EAAE,CAAC,SAAS,CAAC;CACtB,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAC/B,QAAQ,CAAC,EAAE,IAOV;QACC,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAErD,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QACnC,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,UAAU,CAAC,0BAAc,CAAC,iBAAiB,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,SAAS,CACvC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAClC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;QAEpF,KAAK,MAAM,KAAK,IAAI,OAAO,CAAC,OAAO,EAAE;YACnC,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;gBAChD,OAAO,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YACxE,UAAU,CAAC,IAAI,CAAC;gBACd,IAAI;gBACJ,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;gBAC1C,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO;gBAC3B,MAAM;aACP,CAAC,CAAC;YACH,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;gBACpC,MAAM;aACP;SACF;QACD,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC;IACtD,CAAC,CAAC,CAAC;IAEL,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;IACrD,MAAM,OAAO,GAAG;QACd,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAChD,OAAO,WAAW,CAAC;AACrB,CAAC;AA9CD,uBA8CC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nconst buildFilterS = {\n  id: '/buildFilter',\n  type: 'object',\n  properties: {\n    limit: { type: 'number' },\n    toBlock: { type: 'number' },\n  },\n  required: ['toBlock'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(\n    function* (data: {\n      toBlock: number, limit?: number, author?: string, entryType?: number,\n      multi: {\n        authors: string[],\n        entryTypes: number[],\n        tags: string[],\n      },\n    }) {\n      const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n      v.validate(data, buildFilterS, { throwError: true });\n\n      const collection = [];\n      const maxResults = data.limit || 5;\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const web3Api = getService(CORE_MODULE.WEB3_API);\n      const resolve = getService(PROFILE_MODULE.resolveEthAddress);\n      const fetched = yield contracts.fromEvent(\n        contracts.instance.Entries.Publish,\n        { author: data.author, entryType: data.entryType }, data.toBlock, maxResults, {});\n\n      for (const event of fetched.results) {\n        const tags = event.args.tagsPublished.map((tag) => {\n          return web3Api.instance.toUtf8(tag);\n        });\n        const author = yield resolve.execute({ ethAddress: event.args.author });\n        collection.push({\n          tags,\n          entryType: event.args.entryType.toNumber(),\n          entryId: event.args.entryId,\n          author,\n        });\n        if (collection.length === maxResults) {\n          break;\n        }\n      }\n      return { collection, lastBlock: fetched.fromBlock };\n    });\n\n  const buildFilter = { execute, name: 'buildFilter' };\n  const service = function () {\n    return buildFilter;\n  };\n  sp().service(ENTRY_MODULE.buildFilter, service);\n  return buildFilter;\n}\n"]}