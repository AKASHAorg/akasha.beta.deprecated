{"version":3,"file":"resolve-entries-ipfs-hash.js","sourceRoot":"","sources":["resolve-entries-ipfs-hash.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AAE9F,MAAM,CAAC,MAAM,uBAAuB,GAAG;IACrC,EAAE,EAAE,yBAAyB;IAC7B,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,QAAQ,EAAE;YACR,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;YACzB,WAAW,EAAE,IAAI;YACjB,QAAQ,EAAE,CAAC;SACZ;QACD,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,UAAU,CAAC;CACvB,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO;SACtB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAA2C,EAAE,EAAO;QACxE,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,uBAAuB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAChE,MAAM,eAAe,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;QAC9F,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC1E,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,eAAe,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjC,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC;iBACzB,OAAO,CAAC,eAAe,CAAC;iBACxB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;gBACd,EAAE,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;YAChC,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACb,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC,CAAC;IAEH,MAAM,sBAAsB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,wBAAwB,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC5F,MAAM,OAAO,GAAG;QACd,OAAO,sBAAsB,CAAC;IAChC,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;IAC3D,OAAO,sBAAsB,CAAC;AAChC,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE, GENERAL_SETTINGS } from '@akashaproject/common/constants';\n\nexport const resolveEntriesIpfsHashS = {\n  id: '/resolveEntriesIpfsHash',\n  type: 'object',\n  properties: {\n    ipfsHash: {\n      type: 'array',\n      items: { type: 'string' },\n      uniqueItems: true,\n      minItems: 1,\n    },\n    full: { type: 'boolean' },\n  },\n  required: ['ipfsHash'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise\n  .coroutine(function* (data: { ipfsHash: string[], full?: string }, cb: any) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, resolveEntriesIpfsHashS, { throwError: true });\n    const SHORT_WAIT_TIME = (getService(CORE_MODULE.SETTINGS)).get(GENERAL_SETTINGS.OP_WAIT_TIME);\n    const { getFullContent, getShortContent } = getService(ENTRY_MODULE.ipfs);\n    const fetchData = (data.full) ? getFullContent : getShortContent;\n    data.ipfsHash.forEach((ipfsHash) => {\n      fetchData(ipfsHash, false)\n      .timeout(SHORT_WAIT_TIME)\n      .then((entry) => {\n        cb(null, { entry, ipfsHash });\n      })\n      .catch((err) => {\n        cb({ ipfsHash, message: err.message });\n      });\n    });\n    return {};\n  });\n\n  const resolveEntriesIpfsHash = { execute, name: 'resolveEntriesIpfsHash', hasStream: true };\n  const service = function () {\n    return resolveEntriesIpfsHash;\n  };\n  sp().service(ENTRY_MODULE.resolveEntriesIpfsHash, service);\n  return resolveEntriesIpfsHash;\n}\n"]}