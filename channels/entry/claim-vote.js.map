{"version":3,"file":"claim-vote.js","sourceRoot":"","sources":["claim-vote.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA4E;AAE5E,MAAM,UAAU,GAAG;IACjB,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC;CAC/B,CAAC;AAEF,cAA6B,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACnD,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEnD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAC9F,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjE,OAAO,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAClE,MAAM,OAAO,GAAG;QACd,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9C,OAAO,SAAS,CAAC;AACnB,CAAC;AAjBD,uBAiBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst claimVoteS = {\n  id: '/claimVote',\n  type: 'object',\n  properties: {\n    entryId: { type: 'string' },\n    token: { type: 'string' },\n  },\n  required: ['entryId', 'token'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, claimVoteS, { throwError: true });\n\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const txData = contracts.instance.Votes.claimKarmaVote.request(data.entryId, { gas: 200000 });\n    const transaction = yield contracts.send(txData, data.token, cb);\n    return { tx: transaction.tx, receipt: transaction.receipt };\n  });\n\n  const claimVote = { execute, name: 'claimVote', hasStream: true };\n  const service = function () {\n    return claimVote;\n  };\n  sp().service(ENTRY_MODULE.claimVote, service);\n  return claimVote;\n}\n"]}