{"version":3,"file":"entry-tag-iterator.js","sourceRoot":"","sources":["entry-tag-iterator.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA4E;AAE5E,MAAM,iBAAiB,GAAG;IACxB,EAAE,EAAE,mBAAmB;IACvB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzB,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE;QACxD,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;QAC7B,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAChC;IACD,QAAQ,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;CACjC,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,iBAAiB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE1D,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;aAC3D,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE1C,IAAI,UAAU,GAAG,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QACnE,IAAI,UAAU,GAAG,UAAU,CAAC,QAAQ,EAAE,EAAE;YACtC,UAAU,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;SACpC;QACD,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE;YACnD,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;SACzC;QACD,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAChD,IAAI,SAAS,GAAG,UAAU,EAAE;gBAC1B,UAAU,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;aAC5C;SACF;QACD,OAAO,UAAU,CAAC,wBAAY,CAAC,OAAO,CAAC;aACtC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE;YACzC,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,KAAK;SACjC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,MAAM,gBAAgB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC;IAC/D,MAAM,OAAO,GAAG;QACd,OAAO,gBAAgB,CAAC;IAC1B,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACrD,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAnCD,uBAmCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst entryTagIteratorS = {\n  id: '/entryTagIterator',\n  type: 'object',\n  properties: {\n    limit: { type: 'number' },\n    toBlock: { type: 'number' },\n    tagName: { type: 'string', minLength: 1, maxLength: 32 },\n    reversed: { type: 'boolean' },\n    totalLoaded: { type: 'number' },\n  },\n  required: ['toBlock', 'tagName'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, entryTagIteratorS, { throwError: true });\n\n    const entryCount = yield (getService(CORE_MODULE.CONTRACTS))\n    .instance.Tags.totalEntries(data.tagName);\n\n    let maxResults = entryCount.toNumber() === 0 ? 0 : data.limit || 5;\n    if (maxResults > entryCount.toNumber()) {\n      maxResults = entryCount.toNumber();\n    }\n    if (!data.tagName || entryCount <= data.totalLoaded) {\n      return { collection: [], lastBlock: 0 };\n    }\n    if (data.totalLoaded) {\n      const nextTotal = data.totalLoaded + maxResults;\n      if (nextTotal > entryCount) {\n        maxResults = entryCount - data.totalLoaded;\n      }\n    }\n    return getService(ENTRY_MODULE.helpers)\n    .fetchFromTagIndex(Object.assign({}, data, {\n      limit: maxResults,\n      args: { tagName: data.tagName },\n      reversed: data.reversed || false,\n    }));\n  });\n\n  const entryTagIterator = { execute, name: 'entryTagIterator' };\n  const service = function () {\n    return entryTagIterator;\n  };\n  sp().service(ENTRY_MODULE.entryTagIterator, service);\n  return entryTagIterator;\n}\n"]}