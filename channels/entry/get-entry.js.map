{"version":3,"file":"get-entry.js","sourceRoot":"","sources":["get-entry.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { unpad } from 'ethereumjs-util';\nimport {\n  COMMENTS_MODULE,\n  COMMON_MODULE,\n  CORE_MODULE,\n  ENTRY_MODULE,\n  GENERAL_SETTINGS,\n} from '@akashaproject/common/constants';\n\nexport const getEntry = {\n  id: '/getEntry',\n  type: 'object',\n  properties: {\n    entryId: { type: 'string' },\n    ethAddress: { type: 'string', format: 'address' },\n    akashaId: { type: 'string' },\n    full: { type: 'boolean' },\n  },\n  required: ['entryId'],\n};\n\nexport const findAuthor = function init(sp, getService) {\n  const registered = Promise.coroutine(function* (entryId: string) {\n\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const ev = yield contracts\n    .fromEvent(\n      contracts.instance.Entries.Publish, { entryId },\n      0, 1, { reversed: true, lastIndex: 0 });\n\n    if (!ev.results.length) {\n      throw new Error('EntryId ' + entryId + ' could not be found.');\n    }\n\n    return ev.results[0].args.author;\n  });\n  sp().service(ENTRY_MODULE.findAuthor, { execute: registered });\n};\n\nexport default function init(sp, getService) {\n\n  findAuthor(sp, getService);\n\n  const execute = Promise.coroutine(function* (data) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, getEntry, { throwError: true });\n\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n\n    let entry;\n    let ethAddress = yield getService(COMMON_MODULE.profileHelpers).profileAddress(data);\n    const { getFullContent, getShortContent } = getService(ENTRY_MODULE.ipfs);\n    const votingPeriod = yield contracts.instance.Entries.voting_period();\n    if (!ethAddress) {\n      ethAddress = yield getService(ENTRY_MODULE.findAuthor).execute(data.entryId);\n    }\n\n    const [fn, digestSize, hash] = yield contracts.instance\n    .Entries.getEntry(ethAddress, data.entryId);\n\n    let ipfsHash;\n    const st = getService(CORE_MODULE.SETTINGS).get(GENERAL_SETTINGS.OP_WAIT_TIME);\n    const dbs = getService(CORE_MODULE.DB_INDEX);\n    if (!!unpad(hash)) {\n      ipfsHash = getService(COMMON_MODULE.ipfsHelpers).encodeHash(fn, digestSize, hash);\n      entry = (data.full || data.version) ?\n        yield getFullContent(ipfsHash, data.version)\n        .timeout(st).catch(() => null) :\n        yield getShortContent(ipfsHash).timeout(st);\n\n      if (entry) {\n        dbs.entry.searchIndex.concurrentAdd(\n          {}, [{\n            id: data.entryId,\n            ethAddress,\n            title: entry.title,\n            excerpt: entry.excerpt,\n            version: data.version,\n          }], (err) => {\n            if (err) {\n              console.warn('error storing entry index', err);\n            }\n          });\n      }\n\n    }\n\n    const [totalVotes, score, endPeriod, totalKarma, claimed] = yield contracts.instance\n    .Votes.getRecord(data.entryId);\n\n    const cCount = yield getService(COMMENTS_MODULE.commentsCount).execute([data.entryId]);\n    return {\n      [GENERAL_SETTINGS.BASE_URL]: getService(CORE_MODULE.SETTINGS)\n      .get(GENERAL_SETTINGS.BASE_URL),\n\n      ethAddress,\n      totalVotes: totalVotes.toString(10),\n      score: score.toString(10),\n      publishDate: (endPeriod.minus(votingPeriod)).toNumber(),\n      endPeriod: endPeriod.toNumber(),\n      totalKarma: (web3Api.instance.fromWei(totalKarma, 'ether')).toString(10),\n      content: entry,\n      claimed,\n      commentsCount: cCount.collection.length ? cCount.collection[0].count : 0,\n      ipfsHash,\n    };\n  });\n\n  const registered = { execute, name: 'getEntry' };\n  const service = function () {\n    return registered;\n  };\n  sp().service(ENTRY_MODULE.getEntry, service);\n  return registered;\n}\n"]}