{"version":3,"file":"get-entry-balance.js","sourceRoot":"","sources":["get-entry-balance.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAE5E,MAAM,CAAC,MAAM,gBAAgB,GAAG;IAC9B,EAAE,EAAE,kBAAkB;IACtB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,IAAI,EAAE,OAAO;YACb,KAAK,EAAE;gBACL,IAAI,EAAE,QAAQ;aACf;YACD,WAAW,EAAE,IAAI;YACjB,QAAQ,EAAE,CAAC;SACZ;KACF;IACD,QAAQ,EAAE,CAAC,MAAM,CAAC;CAEnB,CAAC;AACF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAC/B,QAAQ,CAAC,EAAE,IAAwB;QACjC,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAgB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEzD,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;YACpC,OAAO,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC5D,MAAM,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,CAAC,GAAG,MAAM,CAAC;gBACnE,UAAU,CAAC,IAAI,CAAC;oBACd,OAAO;oBACP,OAAO,EAAE,EAAE;oBACX,UAAU,EAAE,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACnC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACzB,SAAS,EAAE,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE;oBAChE,UAAU,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;iBAC/E,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5B,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEL,MAAM,eAAe,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC;IAC7D,MAAM,OAAO,GAAG;QACd,OAAO,eAAe,CAAC;IACzB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;IACpD,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nexport const getEntryBalanceS = {\n  id: '/getEntryBalance',\n  type: 'object',\n  properties: {\n    list: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n      uniqueItems: true,\n      minItems: 1,\n    },\n  },\n  required: ['list'],\n\n};\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(\n    function* (data: { list: string[] }) {\n      const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n      v.validate(data, getEntryBalanceS, { throwError: true });\n\n      const collection = [];\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const web3Api = getService(CORE_MODULE.WEB3_API);\n      const requests = data.list.map((id) => {\n        return contracts.instance.Votes.getRecord(id).then((result) => {\n          const [totalVotes, score, endPeriod, totalKarma, claimed] = result;\n          collection.push({\n            claimed,\n            entryId: id,\n            totalVotes: totalVotes.toString(10),\n            score: score.toString(10),\n            endPeriod: (new Date(endPeriod.toNumber() * 1000)).toISOString(),\n            totalKarma: (web3Api.instance.utils.fromWei(totalKarma, 'ether')).toString(10),\n          });\n        });\n      });\n      yield Promise.all(requests);\n      return { collection };\n    });\n\n  const getEntryBalance = { execute, name: 'getEntryBalance' };\n  const service = function () {\n    return getEntryBalance;\n  };\n  sp().service(ENTRY_MODULE.getEntryBalance, service);\n  return getEntryBalance;\n}\n"]}