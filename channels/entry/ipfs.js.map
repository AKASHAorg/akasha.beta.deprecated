{"version":3,"file":"ipfs.js","sourceRoot":"","sources":["ipfs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { is, isEmpty, values } from 'ramda';\nimport { Buffer } from 'safe-buffer';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nexport const DRAFT_BLOCKS = 'blocks';\nexport const ATOMIC_TYPE = 'atomic';\nexport const IMAGE_TYPE = 'image';\nexport const MAX_SIZE = 200 * 1000;\nexport const EXCERPT = 'excerpt';\nexport const FEATURED_IMAGE = 'featuredImage';\nexport const CARD_INFO = 'cardInfo';\nexport const DRAFT_PART = 'draft-part';\nexport const PREVIOUS_VERSION = 'previous-version';\n\nexport default function init(sp, getService) {\n\n  class IpfsEntry {\n\n    id: string;\n    draft: any;\n    title: string;\n    licence: string;\n    tags: any[];\n    wordCount: number;\n    entryLinks: any[];\n\n    create(content: any, tags: any[], entryType: number,\n           previous?: { hash: string, version: number }) {\n\n      const ipfsApiRequests = [];\n      this.entryLinks = [];\n      this.draft = Object.assign({}, content.draft);\n      content.draft = null;\n      this.title = content.title;\n      this.licence = content.licence;\n      this.tags = tags;\n      this.wordCount = content.wordCount;\n      if (content.featuredImage && is(Object, content.featuredImage)) {\n        const req = (Object.keys(content.featuredImage).sort()).map((imSize) => {\n          if (!content.featuredImage[imSize].src) {\n            return Promise.resolve({});\n          }\n          const mediaData = this._normalizeImage(content.featuredImage[imSize].src);\n          return getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api\n            .add(content.featuredImage[imSize].src, true, is(String, mediaData))\n            .then((obj) => {\n              return {\n                [imSize]: Object.assign(\n                  {},\n                  content.featuredImage[imSize],\n                  { src: obj.hash },\n                ),\n              };\n            });\n        });\n        ipfsApiRequests.push(\n          Promise.all(req).then((sizes) => {\n            const LINK = {};\n            sizes.forEach((record) => {\n              Object.assign(LINK, record);\n            });\n            return getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api.add(LINK);\n          }).then((obj) => {\n            this.entryLinks.push(Object.assign({}, obj, { name: FEATURED_IMAGE }));\n          }),\n        );\n      }\n      if (content.cardInfo && is(Object, content.cardInfo)) {\n        ipfsApiRequests.push(\n          getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api\n            .add(content.cardInfo)\n            .then((obj) => this.entryLinks.push(\n              Object.assign({}, obj, { name: CARD_INFO }))));\n      }\n\n      ipfsApiRequests.push(\n        getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api\n          .add(content.excerpt)\n          .then((obj) => this.entryLinks.push(Object.assign({}, obj, { name: EXCERPT }))));\n\n      if (previous && previous.hash) {\n        getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api\n          .getStats(previous.hash)\n          .then((stats) => {\n            this.entryLinks.push(\n              { hash: stats.Hash, size: stats.CumulativeSize, name: PREVIOUS_VERSION });\n          });\n      }\n\n      return Promise.all(ipfsApiRequests)\n        .then(() => this._uploadMediaDraft())\n        .then((parts) => {\n          return getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api\n            .createNode(\n              {\n                draftParts: parts,\n                licence: this.licence,\n                tags: this.tags,\n                title: this.title,\n                wordCount: this.wordCount,\n                entryType,\n                version:\n                  (previous && previous.hasOwnProperty('version')) ?\n                    ++previous.version : 0,\n              },\n              this.entryLinks).then((node) => node.hash);\n        });\n    }\n\n    edit(content: any, tags: any[], entryType: number, previousHash) {\n      return getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api\n        .get(previousHash)\n        .then((data) => {\n          if (content.hasOwnProperty('version')) {\n            delete content.version;\n          }\n\n          return this.create(\n            content,\n            tags,\n            entryType,\n            {\n              hash: previousHash,\n              version: (data.version) ? data.version : 0,\n            },\n          );\n        });\n    }\n\n    private _filterForImages() {\n      const blockIndex = [];\n      const imageEntities = this.draft[DRAFT_BLOCKS].filter((element, index) => {\n        if (element.type !== ATOMIC_TYPE || isEmpty(element.data.type)) {\n          return false;\n        }\n        if (element.data.type === IMAGE_TYPE) {\n          blockIndex.push(index);\n          return true;\n        }\n        return false;\n      });\n\n      return { blockIndex, imageEntities };\n    }\n\n    private _normalizeImage(data) {\n      if (is(String, data) || Buffer.isBuffer(data)) {\n        return data;\n      }\n      return Buffer.from(values(data));\n    }\n\n    private _uploadMediaDraft() {\n      /**\n       * filter draft object for images and upload them to ipfs\n       */\n      const uploads = [];\n      const { imageEntities, blockIndex } = this._filterForImages();\n\n      imageEntities.forEach((element, index) => {\n        const keys = Object.keys(element.data.files).sort();\n        keys.forEach((imSize) => {\n          if (!element.data.files[imSize].src) {\n            return;\n          }\n          const mediaData = this._normalizeImage(element.data.files[imSize].src);\n          uploads.push(\n            getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api\n              .add(mediaData, true, is(String, mediaData))\n              .then(\n                (obj) => {\n                  this.entryLinks.push(\n                    Object.assign({}, obj, { name: (imSize + index) }));\n\n                  this.draft[DRAFT_BLOCKS][blockIndex[index]]\n                    .data.files[imSize].src = obj.hash;\n                },\n              ),\n          );\n        });\n      });\n      return Promise.all(uploads).then(() => {\n        let start;\n        let end;\n        const slices = [];\n        const entryDraft = Buffer.from(JSON.stringify(this.draft));\n        const parts = Math.ceil(entryDraft.length / MAX_SIZE);\n        for (let q = 0; q <= parts; q++) {\n          start = q * MAX_SIZE;\n          end = start + MAX_SIZE;\n\n          if (start > entryDraft.length) {\n            break;\n          }\n\n          if (end > entryDraft.length) {\n            end = entryDraft.length;\n          }\n          const sliceDraft = entryDraft.slice(start, end);\n          slices.push(\n            getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api\n              .add(sliceDraft)\n              .then(\n                (obj) => {\n                  this.entryLinks.push(\n                    Object.assign({}, obj, { name: (DRAFT_PART + q) }),\n                  );\n                },\n              ),\n          );\n        }\n        return Promise.all(slices).then(() => parts);\n      });\n    }\n  }\n\n  /**\n   *\n   * @param hash\n   * @returns {any}\n   */\n  const getShortContent = Promise.coroutine(function* (hash) {\n    const entries = getService(CORE_MODULE.STASH).entries;\n    if (entries.hasShort(hash)) {\n      return Promise.resolve(entries.getShort(hash));\n    }\n    const response: any = {\n      [EXCERPT]: '',\n      [FEATURED_IMAGE]: '',\n      [CARD_INFO]: '',\n    };\n    const root = yield getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api.get(hash);\n\n    const extraData = yield getService(CORE_MODULE.IPFS_CONNECTOR)\n      .getInstance().api.findLinks(hash, [EXCERPT, FEATURED_IMAGE, CARD_INFO]);\n    for (let i = 0; i < extraData.length; i++) {\n      response[extraData[i].name] = yield getService(CORE_MODULE.IPFS_CONNECTOR)\n        .getInstance().api.get(extraData[i].multihash);\n    }\n\n    if ((response[CARD_INFO] && !is(Object, response[CARD_INFO])) ||\n      Buffer.isBuffer(response[CARD_INFO])) {\n      response[CARD_INFO] = '';\n    }\n\n    if ((response[EXCERPT] && !is(String, response[EXCERPT])) ||\n      Buffer.isBuffer(response[EXCERPT])) {\n      response[EXCERPT] = '';\n    }\n\n    if ((response[FEATURED_IMAGE] && !is(Object, response[FEATURED_IMAGE])) ||\n      Buffer.isBuffer(response[FEATURED_IMAGE])) {\n      response[FEATURED_IMAGE] = '';\n    }\n\n    const data = Object.assign({}, root, response);\n    entries.setShort(hash, data);\n    return data;\n  });\n\n  /**\n   *\n   * @type {Function}\n   */\n  const findVersion = Promise.coroutine(\n    function* (hash: string, version: number) {\n      const root = yield getService(CORE_MODULE.IPFS_CONNECTOR).getInstance().api.get(hash);\n      if (!root.hasOwnProperty('version')) {\n        throw new Error('Cannot find version ' + version);\n      }\n\n      if (root.version === version) {\n        return hash;\n      }\n      const depth = root.version - version;\n      if (depth < 0) {\n        throw new Error('This version doesn\\'t exist ' + version);\n      }\n      const linkPath = [];\n      for (let i = 0; i < depth; i++) {\n        linkPath.push(PREVIOUS_VERSION);\n      }\n      const seek = yield getService(CORE_MODULE.IPFS_CONNECTOR)\n        .getInstance().api.findLinkPath(hash, linkPath);\n\n      return seek[0].multihash;\n    });\n\n  /**\n   *\n   * @param hash\n   * @returns {any}\n   */\n  const getFullContent = Promise.coroutine(\n    function* (hash: string, version: any) {\n      const indexedVersion = (is(Number, version)) ? `${hash}/v/${version}` : hash;\n      const entries = getService(CORE_MODULE.STASH).entries;\n      if (entries.hasFull(indexedVersion)) {\n        return Promise.resolve(entries.getFull(indexedVersion));\n      }\n      let tmp;\n      let draft;\n      let rootHash = hash;\n      if (is(Number, version)) {\n        rootHash = yield findVersion(hash, version);\n      }\n\n      const root = yield getService(CORE_MODULE.IPFS_CONNECTOR)\n        .getInstance().api.get(rootHash);\n\n      const parts = [];\n      const draftParts = [];\n      for (let i = 0; i < root.draftParts; i++) {\n        parts.push(DRAFT_PART + i);\n      }\n      const extraData = yield getService(CORE_MODULE.IPFS_CONNECTOR).getInstance()\n        .api.findLinks(rootHash, parts);\n      for (let y = 0; y < extraData.length; y++) {\n        tmp = yield getService(CORE_MODULE.IPFS_CONNECTOR).getInstance()\n          .api.getObject(extraData[y].multihash, true);\n        draftParts.push(tmp);\n      }\n      const draftObj = draftParts.map((el) => {\n        let currentData = (el.toJSON()).data;\n        if (!Buffer.isBuffer(currentData)) {\n          currentData = Buffer.from(currentData);\n        }\n        return currentData;\n      });\n      const content = (Buffer.concat(draftObj)).toString();\n      try {\n        draft = JSON.parse(content);\n      } catch (err) {\n        draft = null;\n      }\n      const shortContent = yield getShortContent(rootHash);\n      const data = Object.assign({}, root, shortContent, { draft });\n      entries.setFull(indexedVersion, data);\n      tmp = null;\n      draft = null;\n      return data;\n    });\n\n  const services = { IpfsEntry, getShortContent, getFullContent, findVersion };\n  const service = function () {\n    return services;\n  };\n  sp().service(ENTRY_MODULE.ipfs, service);\n}\n"]}