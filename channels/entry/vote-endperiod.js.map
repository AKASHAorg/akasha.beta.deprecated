{"version":3,"file":"vote-endperiod.js","sourceRoot":"","sources":["vote-endperiod.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAE5E,MAAM,aAAa,GAAG;IACpB,EAAE,EAAE,gBAAgB;IACpB,IAAI,EAAE,OAAO;IACb,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;IACzB,QAAQ,EAAE,CAAC;CACZ,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAc;QACzD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE,UAAU,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;SACxE;QACD,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,MAAM,gBAAgB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC;IAC/D,MAAM,OAAO,GAAG;QACd,OAAO,gBAAgB,CAAC;IAC1B,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACrD,OAAO,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst voteEndPeriod = {\n  id: '/voteEndPeriod',\n  type: 'array',\n  items: { type: 'string' },\n  minItems: 1,\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data: string[]) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, voteEndPeriod, { throwError: true });\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const collection = [];\n    for (let i = 0; i < data.length; i++) {\n      const record = yield contracts.instance.Votes.getRecord(data[i]);\n      collection.push({ entryId: data[i], endDate: (record[2]).toNumber() });\n    }\n    return { collection };\n  });\n\n  const getVoteEndPeriod = { execute, name: 'getVoteEndPeriod' };\n  const service = function () {\n    return getVoteEndPeriod;\n  };\n  sp().service(ENTRY_MODULE.getVoteEndPeriod, service);\n  return getVoteEndPeriod;\n}\n"]}