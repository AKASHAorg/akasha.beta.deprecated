{"version":3,"file":"sync-entries.js","sourceRoot":"","sources":["sync-entries.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { unpad } from 'ethereumjs-util';\nimport { COMMON_MODULE, CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nexport const syncEntriesS = {\n  id: '/syncEntries',\n  type: 'object',\n  properties: {\n    fromBlock: { type: 'number' },\n    following: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n      uniqueItems: true,\n      minItems: 1,\n    },\n  },\n  required: ['fromBlock', 'following'],\n};\n\nexport default function init(sp, getService) {\n  const filterFromPublish = Promise.coroutine(\n    function* (data: { fromBlock: number, following: string[] }) {\n      const following = Array.from(data.following);\n      const additionalFilter = (event) => {\n        return following.indexOf(event.args.author) !== -1;\n      };\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const fetched = yield contracts.fromEventFilter(\n        contracts.instance.Entries.Publish, {}, data.fromBlock,\n        10000, { lastIndex: 0, reversed: true }, additionalFilter);\n\n      const entries = fetched.results.map((event) => {\n        return { author: event.args.author, entryId: event.args.entryId };\n      });\n      delete fetched.results;\n      following.length = 0;\n\n      return { entries, lastBlock: fetched.fromBlock };\n    });\n\n  const indexDbEntry = Promise.coroutine(\n    function* (data: { author: string, entryId: string }) {\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const dbs = getService(CORE_MODULE.DB_INDEX);\n      const [fn, digestSize, hash] = yield contracts.instance\n      .Entries.getEntry(data.author, data.entryId);\n      if (!!unpad(hash)) {\n        const ipfsHash = getService(COMMON_MODULE.ipfsHelpers).encodeHash(fn, digestSize, hash);\n        const entry = yield getService(ENTRY_MODULE.ipfs)\n        .getShortContent(ipfsHash).timeout(40000);\n\n        dbs.entry.searchIndex.concurrentAdd(\n          {}, [{\n            id: data.entryId,\n            ethAddress: data.author,\n            title: entry.title,\n            excerpt: entry.excerpt,\n            version: entry.version,\n          }], (err) => {\n            if (err) {\n              console.warn('entry:error syncing index', err);\n            }\n          });\n      }\n\n      return {};\n    });\n\n  const execute = Promise\n  .coroutine(function* (data: { fromBlock: number, following: string[] }, cb) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, syncEntriesS, { throwError: true });\n\n    if (!data.following || !data.following.length) {\n      return {};\n    }\n\n    const entryList = yield filterFromPublish(\n      { fromBlock: data.fromBlock, following: data.following },\n    );\n\n    delete data.following;\n    const indexEntry = (i) => {\n      if (i === entryList.entries.length) {\n        return cb('', { done: true, lastBlock: entryList.lastBlock });\n      }\n      const nextId = i + 1;\n      return indexDbEntry(entryList.entries[i])\n      .then(() => indexEntry(nextId))\n      .catch(() => indexEntry(nextId));\n    };\n    indexEntry(0);\n\n    return { done: false };\n  });\n\n  const serviceFilterFromPublish = function () {\n    return filterFromPublish;\n  };\n  const serviceIndexDbEntry = function () {\n    return indexDbEntry;\n  };\n\n  sp().service(ENTRY_MODULE.filterFromPublish, serviceFilterFromPublish);\n  sp().service(ENTRY_MODULE.indexDbEntry, serviceIndexDbEntry);\n\n  const syncEntries = { execute, name: 'syncEntries', hasStream: true };\n  const serviceSyncEntries = function () {\n    return syncEntries;\n  };\n  sp().service(ENTRY_MODULE.syncEntries, serviceSyncEntries);\n  return syncEntries;\n}\n"]}