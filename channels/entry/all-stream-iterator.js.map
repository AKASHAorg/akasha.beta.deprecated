{"version":3,"file":"all-stream-iterator.js","sourceRoot":"","sources":["all-stream-iterator.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA4E;AAE5E,MAAM,kBAAkB,GAAG;IACzB,EAAE,EAAE,oBAAoB;IACxB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzB,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC7B,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;KAC9B;IACD,QAAQ,EAAE,CAAC,SAAS,CAAC;CACtB,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,kBAAkB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE3D,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QACnC,OAAO,CAAC,UAAU,CAAC,wBAAY,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE;YACjF,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,EAAE;YACR,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,KAAK;SACjC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACH,MAAM,iBAAiB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC;IACjE,MAAM,OAAO,GAAG;QACd,OAAO,iBAAiB,CAAC;IAC3B,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IACtD,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAlBD,uBAkBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst allStreamIteratorS = {\n  id: '/allStreamIterator',\n  type: 'object',\n  properties: {\n    limit: { type: 'number' },\n    toBlock: { type: 'number' },\n    lastIndex: { type: 'number' },\n    reversed: { type: 'boolean' },\n  },\n  required: ['toBlock'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, allStreamIteratorS, { throwError: true });\n\n    const maxResults = data.limit || 5;\n    return (getService(ENTRY_MODULE.helpers)).fetchFromPublish(Object.assign({}, data, {\n      limit: maxResults,\n      args: {},\n      reversed: data.reversed || false,\n    }));\n  });\n  const allStreamIterator = { execute, name: 'allStreamIterator' };\n  const service = function () {\n    return allStreamIterator;\n  };\n  sp().service(ENTRY_MODULE.allStreamIterator, service);\n  return allStreamIterator;\n}\n"]}