{"version":3,"file":"publish-entry.js","sourceRoot":"","sources":["publish-entry.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, ENTRY_MODULE, NOTIFICATIONS_MODULE } from '@akashaproject/common/constants';\n\nconst publishS = {\n  id: '/publish',\n  type: 'object',\n  properties: {\n    content: {\n      type: 'object',\n    },\n    tags: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n      uniqueItems: true,\n      minItems: 1,\n    },\n    entryType: {\n      type: 'number',\n    },\n    token: {\n      type: 'string',\n    },\n  },\n  required: ['content', 'tags', 'entryType', 'token'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, publishS, { throwError: true });\n\n    let ipfsEntry = new getService(ENTRY_MODULE.ipfs).IpfsEntry();\n    const ipfsHash = yield ipfsEntry.create(data.content, data.tags, data.entryType);\n    const decodedHash = getService(COMMON_MODULE.ipfsHelpers).decodeHash(ipfsHash);\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const tags = data.tags.map(tag => web3Api.instance.fromUtf8(tag));\n    let publishMethod;\n    switch (data.entryType) {\n      case 0:\n        publishMethod = contracts.instance.Entries.publishArticle;\n        break;\n      case 1:\n        publishMethod = contracts.instance.Entries.publishLink;\n        break;\n      case 2:\n        publishMethod = contracts.instance.Entries.publishMedia;\n        break;\n      default:\n        publishMethod = contracts.instance.Entries.publishOther;\n    }\n    const txData = publishMethod.request(...decodedHash, tags, { gas: 600000 });\n    ipfsEntry = null;\n    delete data.content;\n    delete data.tags;\n    const transaction = yield contracts.send(txData, data.token, cb);\n    let entryId = null;\n    const receipt = transaction.receipt;\n    // in the future extract this should be dynamic @TODO\n    if (receipt.logs && receipt.logs.length > 2) {\n      const log = receipt.logs[receipt.logs.length - 1];\n      entryId = log.topics.length > 2 ? log.topics[2] : null;\n    }\n\n    yield getService(NOTIFICATIONS_MODULE.entriesCache).push(entryId);\n    return { tx: transaction.tx, receipt: transaction.receipt, entryId };\n  });\n\n  const publish = { execute, name: 'publish', hasStream: true };\n  const service = function () {\n    return publish;\n  };\n  sp().service(ENTRY_MODULE.publish, service);\n  return publish;\n}\n"]}