{"version":3,"file":"get-entry-ipfs-hash.js","sourceRoot":"","sources":["get-entry-ipfs-hash.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,qDAAwC;AACxC,+DAA2F;AAE3F,MAAM,iBAAiB,GAAG;IACxB,EAAE,EAAE,mBAAmB;IACvB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC7B;IACD,QAAQ,EAAE,CAAC,SAAS,CAAC;CACtB,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,iBAAiB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE1D,IAAI,QAAQ,CAAC;QACb,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,yBAAa,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACzF,MAAM,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,MAAM,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC;aACrE,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACrD,IAAI,CAAC,CAAC,uBAAK,CAAC,IAAI,CAAC,EAAE;YACjB,QAAQ,GAAG,UAAU,CAAC,yBAAa,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;SACnF;QACD,OAAO,EAAE,QAAQ,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,MAAM,gBAAgB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC;IAC/D,MAAM,OAAO,GAAG;QACd,OAAO,gBAAgB,CAAC;IAC1B,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,wBAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACrD,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AArBD,uBAqBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { unpad } from 'ethereumjs-util';\nimport { COMMON_MODULE, CORE_MODULE, ENTRY_MODULE } from '@akashaproject/common/constants';\n\nconst getEntryIpfsHashS = {\n  id: '/getEntryIpfsHash',\n  type: 'object',\n  properties: {\n    entryId: { type: 'string' },\n    ethAddress: { type: 'string', format: 'address' },\n    akashaId: { type: 'string' },\n  },\n  required: ['entryId'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, getEntryIpfsHashS, { throwError: true });\n\n    let ipfsHash;\n    const ethAddress = yield (getService(COMMON_MODULE.profileHelpers)).profileAddress(data);\n    const [fn, digestSize, hash] = yield getService(CORE_MODULE.CONTRACTS)\n    .instance.Entries.getEntry(ethAddress, data.entryId);\n    if (!!unpad(hash)) {\n      ipfsHash = getService(COMMON_MODULE.ipfsHelpers).encodeHash(fn, digestSize, hash);\n    }\n    return { ipfsHash };\n  });\n\n  const getEntryIpfsHash = { execute, name: 'getEntryIpfsHash' };\n  const service = function () {\n    return getEntryIpfsHash;\n  };\n  sp().service(ENTRY_MODULE.getEntryIpfsHash, service);\n  return getEntryIpfsHash;\n}\n"]}