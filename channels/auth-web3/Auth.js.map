{"version":3,"file":"Auth.js","sourceRoot":"","sources":["Auth.ts"],"names":[],"mappings":"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","sourcesContent":["import { addHexPrefix } from 'ethereumjs-util';\nimport * as Promise from 'bluebird';\nimport { AUTH_MODULE, CORE_MODULE } from '@akashaproject/common/constants';\n\nexport const randomBytesAsync = Promise.promisify(window.crypto.getRandomValues);\n\nexport default function init(sp, getService) {\n  class Auth {\n\n    public regenSession(token: string) {\n      return true;\n    }\n\n    public login(acc: string, timer: number = 30, registering = false) {\n      const arr = new Uint32Array(32);\n      return randomBytesAsync(arr)\n        .then((buff: Buffer) => {\n          const token = addHexPrefix(buff.toString('hex'));\n          const expiration = new Date();\n          (getService(CORE_MODULE.RESPONSES)).gethStatus.akashaKey = acc;\n          expiration.setMinutes(expiration.getMinutes() + timer);\n          (getService(CORE_MODULE.WEB3_API)).instance.eth.defaultAccount = acc;\n\n          return { token, expiration, ethAddress: acc };\n          // });\n        });\n    }\n\n    public logout() {\n      this._flushSession();\n    }\n\n    /**\n     *\n     * @param token\n     * @returns {boolean}\n     */\n    public isLogged(token: any) {\n      return Promise.resolve(true);\n    }\n\n    /**\n     *\n     * @param data\n     * @param token\n     * @returns {any}\n     */\n    public signData(data: {}, token: string) {\n      return this.isLogged(token)\n        .then(function (logged) {\n          if (!logged) {\n            throw new Error('Token is not valid!');\n          }\n          return (getService(CORE_MODULE.WEB3_API)).instance.eth.sendTransaction(data);\n        });\n    }\n\n    public signMessage(data: {}, token: string) {\n      const web3Api = getService(CORE_MODULE.WEB3_API);\n      return this.isLogged(token)\n        .then(function (logged) {\n          if (!logged) {\n            throw new Error('Token is not valid!');\n          }\n          return web3Api.instance\n            .personal\n            .sign(data, web3Api.instance.eth.defaultAccount);\n        });\n    }\n\n    /**\n     *\n     * @private\n     */\n    private _flushSession() {\n      (getService(CORE_MODULE.RESPONSES)).gethStatus.akashaKey = '';\n      (getService(CORE_MODULE.RESPONSES)).gethStatus.shouldLogout = false;\n      console.log('flushed session');\n    }\n  }\n\n  const auth = new Auth();\n  const service = function () {\n    return auth;\n  };\n  sp().service(AUTH_MODULE.auth, service);\n}\n"]}