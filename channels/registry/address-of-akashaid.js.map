{"version":3,"file":"address-of-akashaid.js","sourceRoot":"","sources":["address-of-akashaid.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,iCAAiC,CAAC;AAC/E,OAAO,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAC;AACxC,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE,OAAO;IACb,KAAK,EAAE;QACL,IAAI,EAAE,gBAAgB;KACvB;IACD,WAAW,EAAE,IAAI;IACjB,QAAQ,EAAE,CAAC;CACZ,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE,EAAE,UAAU;IAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,SAAS,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;QACnD,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAExD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CACpB,CAAC,OAAO,EAAE,EAAE;YACV,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ;iBAChD,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;gBACvD,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC;YACjE,CAAC,CAAC,CAAC;QACP,CAAC,CACF,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC5C,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;IACjD,MAAM,OAAO,GAAG;QACd,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAEjD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, REGISTRY_MODULE } from '@akashaproject/common/constants';\nimport { unpad } from 'ethereumjs-util';\nimport { checkIdFormatSchema } from './check-id-format';\n\nexport const addressOfSchema = {\n  id: '/addressOf',\n  type: 'array',\n  items: {\n    $ref: '/checkIdFormat',\n  },\n  uniqueItems: true,\n  minItems: 1,\n};\n\nexport default function init (sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.addSchema(checkIdFormatSchema, '/checkIdFormat');\n    v.validate(data, addressOfSchema, { throwError: true });\n\n    const batch = data.map(\n      (profile) => {\n        return (getService(CORE_MODULE.CONTRACTS)).instance\n          .ProfileResolver.addr(profile.akashaId).then((address) => {\n            return { address: unpad(address), akashaId: profile.akashaId };\n          });\n      },\n    );\n    const collection = yield Promise.all(batch);\n    return { collection };\n  });\n\n  const addressOf = { execute, name: 'addressOf' };\n  const service = function () {\n    return addressOf;\n  };\n  sp().service(REGISTRY_MODULE.addressOf, service);\n\n  return addressOf;\n}\n"]}