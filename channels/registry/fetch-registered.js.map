{"version":3,"file":"fetch-registered.js","sourceRoot":"","sources":["fetch-registered.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,iCAAiC,CAAC;AAE/E,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACnC,EAAE,EAAE,kBAAkB;IACtB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,SAAS,CAAC;CACtB,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,qBAAqB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE9D,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QACnC,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,SAAS,CACvC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAC5C,EAAE,EACF,IAAI,CAAC,OAAO,EACZ,UAAU,EACV,EAAE,CAAC,CAAC;QAEN,KAAK,MAAM,KAAK,IAAI,OAAO,CAAC,OAAO,EAAE;YACnC,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SAC1E;QACD,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,MAAM,eAAe,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC;IAC7D,MAAM,OAAO,GAAG;QACd,OAAO,eAAe,CAAC;IACzB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;IAEvD,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, REGISTRY_MODULE } from '@akashaproject/common/constants';\n\nexport const fetchRegisteredSchema = {\n  id: '/fetchRegistered',\n  type: 'object',\n  properties: {\n    toBlock: { type: 'number' },\n    limit: { type: 'number' },\n  },\n  required: ['toBlock'],\n};\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, fetchRegisteredSchema, { throwError: true });\n\n    const collection = [];\n    const maxResults = data.limit || 5;\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n    const fetched = yield contracts.fromEvent(\n      contracts.instance.ProfileRegistrar.Register,\n      {},\n      data.toBlock,\n      maxResults,\n      {});\n\n    for (const event of fetched.results) {\n      collection.push({ akashaId: web3Api.instance.toUtf8(event.args.label) });\n    }\n    return { collection, lastBlock: fetched.fromBlock };\n  });\n\n  const fetchRegistered = { execute, name: 'fetchRegistered' };\n  const service = function () {\n    return fetchRegistered;\n  };\n  sp().service(REGISTRY_MODULE.fetchRegistered, service);\n\n  return fetchRegistered;\n}\n"]}