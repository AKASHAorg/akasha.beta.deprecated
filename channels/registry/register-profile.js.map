{"version":3,"file":"register-profile.js","sourceRoot":"","sources":["register-profile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport {\n  COMMON_MODULE,\n  CORE_MODULE,\n  IMG_SIZE_SCHEMA,\n  PROFILE_SCHEMA,\n  REGISTRY_MODULE,\n} from '@akashaproject/common/constants';\n\nexport const registerProfileSchema = {\n  id: '/registerProfile',\n  type: 'object',\n  properties: {\n    akashaId: { type: 'string', minLength: 2 },\n    ethAddress: { type: 'string', format: 'address' },\n    donationsEnabled: { type: 'boolean' },\n    ipfs: { $ref: '/profileSchema' },\n    token: { type: 'string' },\n\n  },\n  required: ['akashaId', 'ethAddress', 'donationsEnabled', 'ipfs', 'token'],\n};\n\nexport default function init(sp, getService) {\n\n  //\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.addSchema(IMG_SIZE_SCHEMA, '/imgSize');\n    v.addSchema(PROFILE_SCHEMA, '/profileSchema');\n    v.validate(data, registerProfileSchema, { throwError: true });\n    const normalisedId = getService(COMMON_MODULE.profileHelpers).normaliseId(data.akashaId);\n    const check = yield getService(REGISTRY_MODULE.checkIdFormat)\n      .execute({ akashaId: normalisedId });\n\n    if (!check.idValid) {\n      throw new Error('Invalid akashaId');\n    }\n\n    const ipfsHash = yield getService(COMMON_MODULE.profileHelpers)\n      .ipfsCreateProfile(data.ipfs);\n\n    const [hash, fn, digest] = getService(COMMON_MODULE.ipfsHelpers).decodeHash(ipfsHash);\n\n    const txData = getService(CORE_MODULE.CONTRACTS).instance\n      .ProfileRegistrar\n      .register.request(normalisedId, data.donationsEnabled, hash, fn, digest, {\n        gas: 400000,\n        from: data.ethAddress,\n      });\n\n    const transaction = yield getService(CORE_MODULE.CONTRACTS)\n      .send(txData, data.token, cb);\n\n    return { tx: transaction.tx, receipt: transaction.receipt };\n  });\n\n  const registerProfile = { execute, name: 'registerProfile', hasStream: true };\n  const service = function () {\n    return registerProfile;\n  };\n  sp().service(REGISTRY_MODULE.registerProfile, service);\n\n  return registerProfile;\n}\n"]}