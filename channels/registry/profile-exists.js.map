{"version":3,"file":"profile-exists.js","sourceRoot":"","sources":["profile-exists.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA8F;AAC9F,qDAAwC;AACxC,uDAAwD;AAExD,cAA6B,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,qCAAmB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE5D,IAAI,YAAY,CAAC;QACjB,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,CAAC;QACZ,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,IAAI;YACF,YAAY,GAAG,UAAU,CAAC,yBAAa,CAAC,cAAc,CAAC;iBACtD,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE5B,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC5E,MAAM,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/D,OAAO,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;SAChF;QAAC,OAAO,GAAG,EAAE;YACZ,YAAY,GAAG,EAAE,CAAC;YAClB,MAAM,GAAG,KAAK,CAAC;YACf,OAAO,GAAG,KAAK,CAAC;SACjB;QAED,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,uBAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,YAAY,EAAE,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;IACzD,MAAM,OAAO,GAAG;QACd,OAAO,aAAa,CAAC;IACvB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,2BAAe,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IAErD,OAAO,aAAa,CAAC;AACvB,CAAC;AAhCD,uBAgCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, REGISTRY_MODULE } from '@akashaproject/common/constants';\nimport { unpad } from 'ethereumjs-util';\nimport { checkIdFormatSchema } from './check-id-format';\n\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, checkIdFormatSchema, { throwError: true });\n\n    let normalisedId;\n    let exists;\n    let idValid;\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    try {\n      normalisedId = getService(COMMON_MODULE.profileHelpers)\n      .normaliseId(data.akashaId);\n\n      const idHash = yield contracts.instance.ProfileRegistrar.hash(normalisedId);\n      exists = yield contracts.instance.ProfileResolver.addr(idHash);\n      idValid = yield contracts.instance.ProfileRegistrar.check_format(normalisedId);\n    } catch (err) {\n      normalisedId = '';\n      exists = '0x0';\n      idValid = false;\n    }\n\n    return { exists: !!unpad(exists), idValid, akashaId: data.akashaId, normalisedId };\n  });\n\n  const profileExists = { execute, name: 'profileExists' };\n  const service = function () {\n    return profileExists;\n  };\n  sp().service(REGISTRY_MODULE.profileExists, service);\n\n  return profileExists;\n}\n"]}