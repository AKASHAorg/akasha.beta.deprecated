{"version":3,"file":"ipfs-helpers.js","sourceRoot":"","sources":["ipfs-helpers.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAC/D,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAE5C,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE;IAG9B,MAAM,UAAU,GAAG,UAAU,QAAgB;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtC,MAAM,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/B,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,OAAO;YACL,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACzC,CAAC;IACJ,CAAC,CAAC;IAIF,MAAM,UAAU,GAAG,UAAU,EAAO,EAAE,UAAe,EAAE,IAAY;QACjE,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QACnD,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAC1D,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAC5E,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAC,EAAE,WAAW,CAAC,CAAC;QAE/E,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF,MAAM,OAAO,GAAG;QACd,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;IACpC,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import * as bs58 from 'bs58';\nimport { addHexPrefix, stripHexPrefix } from 'ethereumjs-util';\nimport { Buffer } from 'safe-buffer';\nimport { COMMON_MODULE } from './constants';\n\nexport default function init (sp) {\n  // takes an ipfs hash like QmVSzbxYSvztu2YRfEDGjeGR7J7coTQhBR83DYRBXSoWyn\n  // transforms it into [0x12, 0x20, 0x69a1c99d0af1da500ff363069c4e8c819c518bde34b3d6f8063cd6361eb4fdf1]\n  const decodeHash = function (ipfsHash: string): string[] {\n    const decoded = bs58.decode(ipfsHash);\n    const fn = decoded.slice(0, 1);\n    const digestSize = decoded.slice(1, 2);\n    const hash = decoded.slice(2);\n    return [\n      addHexPrefix(hash.toString('hex')),\n      addHexPrefix(fn.toString('hex')),\n      addHexPrefix(digestSize.toString('hex')),\n    ];\n  };\n\n  // reverse operation of decode\n  // used for data from web3 contracts, hex encoded\n  const encodeHash = function (fn: any, digestSize: any, hash: string): string {\n    const fnBuff = Buffer.from(fn.toString(16), 'hex');\n    const digestSizeBuff = Buffer.from(digestSize.toString(16), 'hex');\n    const hashBuff = Buffer.from(stripHexPrefix(hash), 'hex');\n    const totalLength = fnBuff.length + digestSizeBuff.length + hashBuff.length;\n    const decoded = Buffer.concat([fnBuff, digestSizeBuff, hashBuff], totalLength);\n\n    return bs58.encode(decoded);\n  };\n\n  const service = function () {\n    return { decodeHash, encodeHash };\n  };\n  sp().service(COMMON_MODULE.ipfsHelpers, service);\n}\n"]}