{"version":3,"file":"profile-helpers.js","sourceRoot":"","sources":["profile-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as blPromise from 'bluebird';\nimport * as uts46 from 'idna-uts46';\nimport { unpad } from 'ethereumjs-util';\nimport { COMMON_MODULE, CORE_MODULE, PROFILE_CONSTANTS } from './constants';\nimport { is, isEmpty } from 'ramda';\n\nexport default function init(sp, getService) {\n\n  const contracts = getService(CORE_MODULE.CONTRACTS);\n  const web3Api = getService(CORE_MODULE.WEB3_API);\n  const ipfsConnector = getService(CORE_MODULE.IPFS_CONNECTOR);\n  const normaliseId = function (name: string) {\n    return uts46.toAscii(name, { useStd3ASCII: true, transitional: false });\n  };\n\n  const profileAddress = blPromise.coroutine(function* (data) {\n    let profileAddress;\n    if (data.akashaId) {\n      const nameHash = yield contracts\n      .instance.ProfileRegistrar\n      .hash(normaliseId(data.akashaId));\n\n      profileAddress = yield contracts.instance.ProfileResolver.addr(nameHash);\n    } else if (data.ethAddress) {\n      profileAddress = data.ethAddress;\n    }\n\n    if (profileAddress && !!unpad(profileAddress)) {\n      return blPromise.resolve(profileAddress);\n    }\n    return blPromise.resolve(null);\n  });\n\n  const resolveEthAddress = blPromise.coroutine(function* (ethAddress: string) {\n    const nameHash = yield contracts.instance.ProfileResolver.reverse(ethAddress);\n    if (!!unpad(nameHash)) {\n      const [akashaId, , ] = yield contracts.instance.ProfileResolver.resolve(nameHash);\n      return { akashaId: normaliseId(web3Api.instance.toUtf8(akashaId)), ethAddress };\n    }\n    return { ethAddress };\n  });\n\n  const ipfsCreateProfile = blPromise.coroutine(function* (data) {\n    let saved;\n    let tmp;\n    let targetHash;\n    let keys;\n    let pool;\n    let i = 0;\n\n    const simpleLinks = [\n      PROFILE_CONSTANTS.AVATAR,\n      PROFILE_CONSTANTS.ABOUT,\n      PROFILE_CONSTANTS.LINKS,\n    ];\n    const root = yield ipfsConnector.getInstance()\n    .api.add({ firstName: data.firstName, lastName: data.lastName });\n\n    targetHash = root.hash;\n    while (i < simpleLinks.length) {\n      if (!isEmpty(data[simpleLinks[i]]) && data[simpleLinks[i]]) {\n        tmp = yield ipfsConnector.getInstance()\n        .api\n        .add(\n          data[simpleLinks[i]],\n          simpleLinks[i] === PROFILE_CONSTANTS.AVATAR,\n          (simpleLinks[i] === PROFILE_CONSTANTS.AVATAR) &&\n          is(String, data[simpleLinks[i]]));\n        saved = yield ipfsConnector.getInstance()\n        .api\n        .addLink({ name: simpleLinks[i], size: tmp.size, hash: tmp.hash }, targetHash);\n        targetHash = saved.multihash;\n      }\n      i++;\n    }\n\n    if (data.backgroundImage) {\n      keys = Object.keys(data.backgroundImage).sort();\n      pool = keys.map((media: string) => {\n        return ipfsConnector\n        .getInstance()\n        .api\n        .add(\n          data.backgroundImage[media].src,\n          true, is(String, data.backgroundImage[media].src));\n      });\n\n      tmp = yield Promise.all(pool).then(\n        (returned) => {\n          const constructed = {};\n          returned.forEach((v: any, i: number) => {\n            const dim = keys[i];\n            constructed[dim] = {};\n            constructed[dim]['width'] = data.backgroundImage[dim].width;\n            constructed[dim]['height'] = data.backgroundImage[dim].height;\n            constructed[dim]['src'] = v.hash;\n          });\n          return ipfsConnector.getInstance().api.add(constructed);\n        });\n      saved = yield ipfsConnector.getInstance().api.addLink(\n        {\n          name: 'backgroundImage',\n          size: tmp.size,\n          hash: tmp.hash,\n        },\n        targetHash);\n\n      targetHash = saved.multihash;\n    }\n\n    saved = null;\n    tmp = null;\n    keys = null;\n    pool = null;\n\n    return targetHash;\n  });\n\n  const service = function () {\n    return { normaliseId, profileAddress, resolveEthAddress, ipfsCreateProfile };\n  };\n\n  sp().service(COMMON_MODULE.profileHelpers, service);\n}\n"]}