{"version":3,"file":"get-transaction.js","sourceRoot":"","sources":["get-transaction.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAAyE;AAE5D,QAAA,oBAAoB,GAAG;IAClC,EAAE,EAAE,iBAAiB;IACrB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,eAAe,EAAE;YACf,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;SAC1B;KACF;IACD,QAAQ,EAAE,CAAC,iBAAiB,CAAC;CAE9B,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,4BAAoB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACnD,OAAO,OAAO;iBACb,QAAQ,CAAC,GAAG;iBACZ,0BAA0B,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;gBACnD,IAAI,OAAO,EAAE;oBACX,OAAO,MAAM,CAAC,MAAM,CAClB,EAAE,EACF,OAAO,EACP,EAAE,OAAO,EAAE,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE,CAAC,CAAC;iBAC1C;gBACD,OAAO,OAAO,CAAC,QAAQ,CAAC,GAAG;qBAC1B,mBAAmB,CAAC,MAAM,CAAC;qBAC3B,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;oBACnB,IAAI,UAAU,EAAE;wBACd,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;qBACvD;oBACD,OAAO,IAAI,CAAC;gBACd,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;IAC3D,MAAM,OAAO,GAAG;QACd,OAAO,cAAc,CAAC;IACxB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,qBAAS,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAEhD,OAAO,cAAc,CAAC;AACxB,CAAC;AApCD,uBAoCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, TX_MODULE } from '@akashaproject/common/constants';\n\nexport const getTransactionSchema = {\n  id: '/getTransaction',\n  type: 'object',\n  properties: {\n    transactionHash: {\n      type: 'array',\n      items: { type: 'string' },\n    },\n  },\n  required: ['transactionHash'],\n\n};\n\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, getTransactionSchema, { throwError: true });\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n    const requests = data.transactionHash.map((txHash) => {\n      return web3Api\n      .instance.eth\n      .getTransactionReceiptAsync(txHash).then((receipt) => {\n        if (receipt) {\n          return Object.assign(\n            {},\n            receipt,\n            { success: receipt.status === '0x1' });\n        }\n        return web3Api.instance.eth\n        .getTransactionAsync(txHash)\n        .then((txHashData) => {\n          if (txHashData) {\n            return { transactionHash: txHash, blockNumber: null };\n          }\n          return null;\n        });\n      });\n    });\n    return Promise.all(requests);\n  });\n\n  const getTransaction = { execute, name: 'getTransaction' };\n  const service = function () {\n    return getTransaction;\n  };\n  sp().service(TX_MODULE.getTransaction, service);\n\n  return getTransaction;\n}\n"]}