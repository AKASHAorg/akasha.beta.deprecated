{"version":3,"file":"runner.js","sourceRoot":"","sources":["runner.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, PINNER_MODULE } from '@akashaproject/common/constants';\nimport { unpad } from 'ethereumjs-util';\n\nexport enum objectType {PROFILE = 1, ENTRY = 2, COMMENT = 3}\n\nexport enum operationType {ADD = 1, REMOVE = 2}\n\nexport default function init(sp, getService) {\n  const execute = Promise\n  .coroutine(function* (data: { type: objectType, id: any, operation: operationType }) {\n    let hashRoot;\n    switch (data.type) {\n      case objectType.PROFILE:\n        // here id is ethAddress\n        const profileHex = yield (getService(CORE_MODULE.CONTRACTS))\n        .instance.ProfileResolver.reverse(data.id);\n\n        if (!!unpad(profileHex)) {\n          const [, , , fn, digestSize, hash] = yield (getService(CORE_MODULE.CONTRACTS))\n          .instance.ProfileResolver.resolve(profileHex);\n          hashRoot = getService(COMMON_MODULE.ipfsHelpers)\n          .encodeHash(fn, digestSize, hash);\n        }\n        break;\n      case objectType.ENTRY:\n        const [fnE, digestSizeE, hashE] = yield (getService(CORE_MODULE.CONTRACTS))\n        .instance.Entries.getEntry(data.id.ethAddress, data.id.entryId);\n\n        hashRoot = (getService(COMMON_MODULE.ipfsHelpers))\n        .encodeHash(fnE, digestSizeE, hashE);\n        break;\n      case objectType.COMMENT:\n        const [, , , , fnC, digestSizeC, hashC] = yield (getService(CORE_MODULE.CONTRACTS))\n        .instance.Comments.getComment(data.id.entryId, data.id.commentId);\n\n        hashRoot = (getService(COMMON_MODULE.ipfsHelpers))\n        .encodeHash(fnC, digestSizeC, hashC);\n        break;\n      default:\n        throw new Error('No known type specified');\n    }\n    const pin = yield Promise.fromCallback((cb) => {\n      if (data.operation === operationType.REMOVE) {\n        return (getService(CORE_MODULE.IPFS_CONNECTOR))\n        .getInstance().api.apiClient.pin.rm(hashRoot, { recursive: true }, cb);\n      }\n\n      if (data.operation === operationType.ADD) {\n        return (getService(CORE_MODULE.IPFS_CONNECTOR))\n        .getInstance().api.apiClient.pin.add(hashRoot, { recursive: true }, cb);\n      }\n      throw new Error('Operation for pinning not specified');\n    });\n\n    return { pin, id: data.id };\n  });\n\n  const pin = { execute, name: 'pin' };\n  const service = function () {\n    return pin;\n  };\n  sp().service(PINNER_MODULE.pin, service);\n  return pin;\n}\n"]}