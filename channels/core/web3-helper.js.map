{"version":3,"file":"web3-helper.js","sourceRoot":"","sources":["web3-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE } from '@akashaproject/common/constants';\n\nexport default function init(sp, getService) {\n  class Web3Helper {\n    public watcher: any;\n    public txQueue = new Map();\n    public syncing: boolean = true;\n    public watching = false;\n    private channel: any;\n\n    // ex: rx.js channel with send method\n    public setChannel(channel: any) {\n      this.channel = channel;\n    }\n\n    // check if current used node is synchronized\n    public inSync() {\n      const rules = [\n        getService(CORE_MODULE.WEB3_API).instance.eth.getSyncingAsync(),\n        getService(CORE_MODULE.WEB3_API).instance.net.getPeerCountAsync(),\n      ];\n\n      return Promise.all(rules).then((data) => {\n        const timeStamp = Math.floor(new Date().getTime() / 1000);\n        if (data[0]) {\n          return [data[1], data[0]];\n        }\n\n        if (!data[0] && data[1] > 0) {\n          return getService(CORE_MODULE.WEB3_API).instance\n            .eth\n            .getBlockAsync('latest')\n            .then((latestBlock: any): any => {\n              if ((latestBlock.timestamp + 60 * 2) > timeStamp) {\n                this.syncing = false;\n                return [];\n              }\n              return [data[1]];\n            });\n        }\n\n        return [data[1]];\n      });\n    }\n\n    // watch every block until all tx queue is mined\n    public startTxWatch(): any {\n      if (this.syncing) {\n        return this.inSync().then(() => {\n          if (this.syncing) {\n            throw new Error('Geth node is syncing, try calling #inSync() before this');\n          }\n          return this.startTxWatch();\n        });\n      }\n      if (this.txQueue.size === 0) {\n        return;\n      }\n\n      const currentQueue: string[] = [];\n      this.watching = true;\n      if (this.watcher) {\n        return Promise.resolve(this.watching);\n      }\n\n      this.watcher = getService(CORE_MODULE.WEB3_API).instance.eth.filter('latest');\n      this.watcher.watch((err: any, block: any) => {\n        if (err) {\n          return;\n        }\n        for (const hash of this.getCurrentTxQueue()) {\n          currentQueue.push(\n            getService(CORE_MODULE.WEB3_API).instance\n              .eth.getTransactionReceiptAsync(hash),\n          );\n        }\n        Promise.all(currentQueue).then((receipt: any[]) => {\n          receipt.forEach((tx: any) => {\n            if (tx) {\n              this.txQueue.delete(tx.transactionHash);\n              if (this.txQueue.size === 0) {\n                this.stopTxWatch();\n              }\n\n              this.channel.send({\n                data: {\n                  mined: tx.transactionHash,\n                  blockNumber: tx.blockNumber,\n                  cumulativeGasUsed: tx.cumulativeGasUsed,\n                  hasEvents: !!(tx.logs.length),\n                  watching: this.watching,\n                },\n              });\n            }\n          });\n        });\n      });\n      return Promise.resolve(this.watching);\n    }\n\n    // check if local node has access to provided address\n    public hasKey(address: string) {\n      return getService(CORE_MODULE.WEB3_API).instance\n        .eth\n        .getAccountsAsync()\n        .then((list: string[]) => {\n          return list.indexOf(address) !== -1;\n        });\n    }\n\n    public stopTxWatch() {\n      this.watching = false;\n      return (this.watcher) ? this.watcher.stopWatching(() => {\n        this.watcher = null;\n      }) : '';\n    }\n\n    // add tx to current queue\n    public addTxToWatch(tx: string, autoWatch = true) {\n      this.txQueue.set(tx, '');\n      if (!this.watching && autoWatch) {\n        this.startTxWatch();\n      }\n      return this;\n    }\n\n    // get current tx list\n    public getCurrentTxQueue() {\n      return this.txQueue.keys();\n    }\n  }\n\n  const web3Helper = new Web3Helper();\n  const service = function () {\n    return web3Helper;\n  };\n  sp().service(CORE_MODULE.WEB3_HELPER, service);\n}\n"]}