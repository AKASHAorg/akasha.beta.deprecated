{"version":3,"file":"ModuleEmitter.js","sourceRoot":"","sources":["ModuleEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import getChannels, { registerChannel } from './channels';\nimport { ApiListener, ApiRequest } from './ipcPreloader';\n\nexport default class ModuleEmitter {\n  protected MODULE_NAME: string;\n  protected DEFAULT_MANAGED: string[] = [];\n  protected logger: any = console;\n  protected formatMessage: any;\n\n  public addFormatter(formatMessage) {\n    this.formatMessage = formatMessage;\n  }\n\n  public generateStreamListener(method) {\n    return (data: any) => {\n      let response: any;\n      // console.time(method.name);\n      return method\n      .execute(data, (er, ev) => {\n        if (er) {\n          response = this.formatMessage({ error: { message: er } }, data);\n        } else {\n          response = this.formatMessage(ev, data);\n        }\n        getChannels().client[this.MODULE_NAME][method.name].send(response);\n      })\n      .then((result: any) => {\n        response = this.formatMessage(result, data);\n      })\n      .catch((err: Error) => {\n        response = this.formatMessage({ error: { message: err.message } }, data);\n      })\n      .finally(() => {\n        getChannels().client[this.MODULE_NAME][method.name].send(response);\n        // console.timeEnd(method.name);\n        response = null;\n      });\n    };\n  }\n\n  public generateListener(method) {\n    return (data: any) => {\n      let response: any;\n      return method\n      .execute(data)\n      .then((result: any) => {\n        response = this.formatMessage(result, data);\n      })\n      .catch((err: Error) => {\n        console.log(err);\n        response = this.formatMessage({ error: { message: err.message } }, data);\n      })\n      .finally(() => {\n        getChannels().client[this.MODULE_NAME][method.name].send(response);\n        response = null;\n      });\n    };\n  }\n\n  protected manager() {\n    this.DEFAULT_MANAGED.forEach(\n      (action: string) => {\n        getChannels().server[this.MODULE_NAME][action].enable();\n      },\n    );\n  }\n\n  protected initMethods(\n    implListener: ApiListener,\n    implRequest: ApiRequest,\n    methods,\n  ) {\n    methods.forEach((method) => {\n      registerChannel(implListener, implRequest, this.MODULE_NAME, method.name);\n      getChannels()\n        .server[this.MODULE_NAME][method.name]\n      .registerListener(\n        method.hasStream ?\n          this.generateStreamListener(method) : this.generateListener(method),\n      );\n    });\n  }\n}\n"]}