{"version":3,"file":"GeneralIPC.js","sourceRoot":"","sources":["GeneralIPC.ts"],"names":[],"mappings":";;AAAA,mDAA4C;AAmB5C,gBAAgC,SAAQ,uBAAa;IAEnD,YAAY,SAAS;QACnB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAGD,kBAAkB,CAAC,IAAY;QAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAGD,cAAc,CAAC,MAAW;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAGD,sBAAsB,CAAC,OAAiB;QACtC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;IACjC,CAAC;IAGD,eAAe,CACb,YAAyB,EACzB,WAAuB,EACvB,OAAO;QAEP,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YAErB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;SAC3E;QAGD,IAAI,CAAC,YAAY,CACf,YAAY,EACZ,WAAW,EACX,OAAO,CACR,CAAC;QAGF,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;CAEF;AA7CD,6BA6CC","sourcesContent":["import ModuleEmitter from './ModuleEmitter';\nimport { ApiListener, ApiRequest } from './ipcPreloader';\n\n/**\n * General class for Akasha channels architecture\n * @example:\n *      const IpfsIPC = new GeneralIPC(formatter: () => {});\n *      IpfsIPC.registerModuleName('ipfs');\n *\n *      IpfsIPC.registerMethods([\n *      {name: 'startService', execute: ()=> Promise.resolve(true)},\n *      {name: 'stopService', execute: ()=> Promise.resolve(false)},\n *      {name: 'status', execute: ()=> Promise.resolve(2)},\n *      ], ApiListener, ApiRequest);\n *\n *      IpfsIPC.registerDefaultManaged(['startService', 'stopService']);\n *\n */\n\nexport default class GeneralIPC extends ModuleEmitter {\n\n  constructor(formatter) {\n    super();\n    this.addFormatter(formatter);\n  }\n\n  // reserve a namespace for module\n  registerModuleName(name: string) {\n    this.MODULE_NAME = name;\n  }\n\n  // can add a custom logger\n  registerLogger(logger: any) {\n    this.logger = logger;\n  }\n\n  // register default enabled channels\n  registerDefaultManaged(methods: string[]) {\n    this.DEFAULT_MANAGED = methods;\n  }\n\n  // implement observable channels for 2-way communication\n  registerMethods(\n    implListener: ApiListener,\n    implRequest: ApiRequest,\n    methods,\n  ) {\n    if (!this.MODULE_NAME) {\n      // extra info for debugging\n      this.logger.debug(implListener, implRequest, methods);\n      throw new Error('Must register a module namespace before adding methods');\n    }\n\n    // register each method under @MODULE_NAME namespace\n    this._initMethods(\n      implListener,\n      implRequest,\n      methods,\n    );\n\n    // enable default methods for module\n    this._manager();\n  }\n\n}\n"]}