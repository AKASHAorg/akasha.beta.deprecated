{"version":3,"file":"ipfs.js","sourceRoot":"","sources":["ipfs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, GENERAL_SETTINGS, PROFILE_CONSTANTS, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport default function init(sp, getService) {\n\n  const getShortProfile = Promise\n  .coroutine(function* (hash: string, resolveAvatar: boolean) {\n    const stash = getService(CORE_MODULE.STASH);\n    const settings = getService(CORE_MODULE.SETTINGS);\n    const ipfsConnector = getService(CORE_MODULE.IPFS_CONNECTOR);\n    if (stash.profiles.hasShort(hash)) {\n      return Promise.resolve(stash.profiles.getShort(hash));\n    }\n    const avatarPath = { [PROFILE_CONSTANTS.AVATAR]: '' };\n    const aboutPath = { [PROFILE_CONSTANTS.ABOUT]: '' };\n    const waitTime = settings.get(GENERAL_SETTINGS.OP_WAIT_TIME) || 15000;\n    const profileBase = yield ipfsConnector.getInstance()\n    .api.get(hash)\n    .timeout(waitTime).catch(() => null);\n\n    const avatar = yield ipfsConnector.getInstance()\n    .api.findLinks(hash, [PROFILE_CONSTANTS.AVATAR]).timeout(waitTime).catch(() => '');\n\n    const about = yield ipfsConnector.getInstance()\n    .api.findLinks(hash, [PROFILE_CONSTANTS.ABOUT]).timeout(waitTime).catch(() => '');\n\n    if (avatar.length) {\n      if (!resolveAvatar) {\n        avatarPath[PROFILE_CONSTANTS.AVATAR] = avatar[0].multihash;\n      } else {\n        avatarPath[PROFILE_CONSTANTS.AVATAR] = yield ipfsConnector.getInstance()\n        .api.getFile(avatar[0].multihash).timeout(waitTime).catch(() => '');\n      }\n    }\n    if (about.length) {\n      aboutPath[PROFILE_CONSTANTS.ABOUT] = yield ipfsConnector.getInstance()\n      .api.get(about[0].multihash).timeout(waitTime).catch(() => '');\n    }\n    const fetched = Object.assign({}, profileBase, avatarPath, aboutPath);\n\n    stash.profiles.setShort(hash, fetched);\n    return fetched;\n  });\n\n  const resolveProfile = Promise\n  .coroutine(function* (hash: string, resolveImages: boolean) {\n    const stash = getService(CORE_MODULE.STASH);\n    const settings = getService(CORE_MODULE.SETTINGS);\n    const ipfsConnector = getService(CORE_MODULE.IPFS_CONNECTOR);\n    if (stash.profiles.hasFull(hash)) {\n      return Promise.resolve(stash.profiles.getFull(hash));\n    }\n    const constructed = {\n      [PROFILE_CONSTANTS.LINKS]: [],\n      [PROFILE_CONSTANTS.BACKGROUND_IMAGE]: '',\n    };\n    const waitTime = settings.get(GENERAL_SETTINGS.OP_WAIT_TIME) || 15000;\n    const shortProfile = yield getShortProfile(hash, resolveImages);\n    const pool = yield ipfsConnector.getInstance()\n    .api\n    .findLinks(hash, [PROFILE_CONSTANTS.LINKS, PROFILE_CONSTANTS.BACKGROUND_IMAGE])\n    .timeout(waitTime).catch(() => []);\n\n    for (let i = 0; i < pool.length; i++) {\n      constructed[pool[i].name] = yield ipfsConnector.getInstance()\n      .api.get(pool[i].multihash).timeout(waitTime).catch(() => '');\n    }\n    const returned = Object.assign({}, shortProfile, constructed);\n    stash.profiles.setFull(hash, returned);\n    return returned;\n  });\n  const resolveService = function () {\n    return resolveProfile;\n  };\n  const getShortProfileService = function () {\n    return getShortProfile;\n  };\n\n  sp().service(PROFILE_MODULE.resolveProfile, resolveService);\n  sp().service(PROFILE_MODULE.getShortProfile, getShortProfileService);\n}\n"]}