{"version":3,"file":"bond-aeth.js","sourceRoot":"","sources":["bond-aeth.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA8E;AAEjE,QAAA,cAAc,GAAG;IAC5B,EAAE,EAAE,WAAW;IACf,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC1B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;CAC9B,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACnD,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,sBAAc,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEvD,MAAM,QAAQ,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC;aAChD,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAEtC,MAAM,MAAM,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC;aAC/C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAE3D,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC;aAC1D,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAE9B,OAAO,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAChE,MAAM,OAAO,GAAG;QACd,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,0BAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC/C,OAAO,QAAQ,CAAC;AAClB,CAAC;AAvBD,uBAuBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const bondAethSchema = {\n  id: '/bondAeth',\n  type: 'object',\n  properties: {\n    amount: { type: 'string' },\n    token: { type: 'string' },\n  },\n  required: ['amount', 'token'],\n};\n\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, bondAethSchema, { throwError: true });\n\n    const bnAmount = getService(CORE_MODULE.WEB3_API)\n    .instance.toWei(data.amount, 'ether');\n\n    const txData = getService(CORE_MODULE.CONTRACTS)\n    .instance.AETH.bondAeth.request(bnAmount, { gas: 100000 });\n\n    const transaction = yield getService(CORE_MODULE.CONTRACTS)\n    .send(txData, data.token, cb);\n\n    return { tx: transaction.tx, receipt: transaction.receipt };\n  });\n  const bondAeth = { execute, name: 'bondAeth', hasStream: true };\n  const service = function () {\n    return bondAeth;\n  };\n  sp().service(PROFILE_MODULE.bondAeth, service);\n  return bondAeth;\n}\n"]}