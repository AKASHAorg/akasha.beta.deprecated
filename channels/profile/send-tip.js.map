{"version":3,"file":"send-tip.js","sourceRoot":"","sources":["send-tip.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA6F;AAEhF,QAAA,GAAG,GAAG;IACjB,EAAE,EAAE,MAAM;IACV,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC5B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzB,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzB,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC/B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC5B;IACD,QAAQ,EAAE,CAAC,OAAO,CAAC;CACpB,CAAC;AAEF,cAA6B,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAC/B,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACjB,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAG,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QAEpD,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;QAC3E,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;QACnE,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,yBAAa,CAAC,cAAc,CAAC;aAC3D,cAAc,CAAC,IAAI,CAAC,CAAC;QAExB,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI;aACnC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE;YACxD,KAAK,EAAE,SAAS;YAChB,GAAG,EAAE,MAAM;SACZ,CAAC,CAAC;QACL,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjE,OAAO;YACL,EAAE,EAAE,WAAW,CAAC,EAAE;YAClB,OAAO,EAAE,WAAW,CAAC,OAAO;YAC5B,QAAQ,EAAE,OAAO;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC;IACJ,CAAC,CAAC,CAAC;IACL,MAAM,OAAO,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC1D,MAAM,OAAO,GAAG;QACd,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,0BAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC9C,OAAO,OAAO,CAAC;AACjB,CAAC;AAjCD,uBAiCC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const tip = {\n  id: '/tip',\n  type: 'object',\n  properties: {\n    ethAddress: { type: 'string', format: 'address' },\n    akashaId: { type: 'string' },\n    token: { type: 'string' },\n    value: { type: 'string' },\n    tokenAmount: { type: 'string' },\n    message: { type: 'string' },\n  },\n  required: ['token'],\n};\n\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(\n    function* (data, cb) {\n      const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n      v.validate(data, tip, { throwError: true });\n      const web3Api = getService(CORE_MODULE.WEB3_API);\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n\n      const tokenAmount = web3Api.instance.toWei(data.tokenAmount || 0, 'ether');\n      const ethAmount = web3Api.instance.toWei(data.value || 0, 'ether');\n      const address = yield getService(COMMON_MODULE.profileHelpers)\n        .profileAddress(data);\n\n      const txData = contracts.instance.AETH\n        .donate.request(address, tokenAmount, data.message || '', {\n          value: ethAmount,\n          gas: 200000,\n        });\n      const transaction = yield contracts.send(txData, data.token, cb);\n      return {\n        tx: transaction.tx,\n        receipt: transaction.receipt,\n        receiver: address,\n        akashaId: data.akashaId,\n      };\n    });\n  const sendTip = { execute, name: 'tip', hasStream: true };\n  const service = function () {\n    return sendTip;\n  };\n  sp().service(PROFILE_MODULE.sendTip, service);\n  return sendTip;\n}\n"]}