{"version":3,"file":"update-profile.js","sourceRoot":"","sources":["update-profile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const updateProfileData = {\n  id: '/updateProfileData',\n  type: 'object',\n  properties: {\n    ipfs: {\n      type: 'object',\n      properties: {\n        firstName: { type: 'string' },\n        lastName: { type: 'string' },\n        avatar: { type: 'any' },\n        backgroundImage: { type: 'any' },\n        about: { type: 'string' },\n        links: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              title: { type: 'string' },\n              url: { type: 'string' },\n              type: { type: 'string' },\n              id: { type: 'number' },\n            },\n            required: ['title', 'url', 'type', 'id'],\n          },\n        },\n      },\n    },\n    token: { type: 'string' },\n\n  },\n  required: ['ipfs', 'token'],\n};\n\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, updateProfileData, { throwError: true });\n\n    const ipfsHash = yield (getService(COMMON_MODULE.profileHelpers))\n    .ipfsCreateProfile(data.ipfs);\n\n    console.log('mainipfsHash', ipfsHash);\n    const decodedHash = getService(COMMON_MODULE.ipfsHelpers).decodeHash(ipfsHash);\n    const currentProfile = yield getService(PROFILE_MODULE.getCurrentProfile).execute();\n    if (!currentProfile.raw) {\n      throw new Error('No profile found to update');\n    }\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const txData = contracts.instance.ProfileResolver\n    .setHash.request(\n      currentProfile.raw,\n      ...decodedHash,\n    );\n    const receipt = yield contracts.send(txData, data.token, cb);\n    return { receipt };\n  });\n\n  const updateProfileDatas = { execute, name: 'updateProfileData', hasStream: true };\n  const service = function () {\n    return updateProfileDatas;\n  };\n  sp().service(PROFILE_MODULE.updateProfileData, service);\n  return updateProfileDatas;\n}\n"]}