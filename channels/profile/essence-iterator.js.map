{"version":3,"file":"essence-iterator.js","sourceRoot":"","sources":["essence-iterator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\nimport { addHexPrefix, unpad } from 'ethereumjs-util';\n\nexport const essenceIteratorSchema = {\n  id: '/essenceIterator',\n  type: 'object',\n  properties: {\n    ethAddress: { type: 'string', format: 'address' },\n    akashaId: { type: 'string' },\n    lastBlock: { type: 'number' },\n    lastIndex: { type: 'number' },\n    limit: { type: 'number' },\n    reversed: { type: 'boolean' },\n  },\n  required: ['lastBlock'],\n};\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, essenceIteratorSchema, { throwError: true });\n\n    const collection = [];\n    const maxResults = data.limit || 5;\n    const address = yield (getService(COMMON_MODULE.profileHelpers)).profileAddress(data);\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const toBlock = (!data.lastBlock) ?\n      yield web3Api.instance.eth.getBlockNumber() : data.lastBlock;\n    const fetched = yield contracts.fromEvent(\n      contracts.instance.Essence.CollectEssence,\n      { receiver: address },\n      toBlock,\n      maxResults,\n      { lastIndex: data.lastIndex, reversed: data.reversed || false },\n    );\n\n    for (const event of fetched.results) {\n      collection.push({\n        amount: (web3Api.instance.utils.fromWei(event.args.amount, 'ether')).toFormat(5),\n        action: web3Api.instance.utils.toUtf8(addHexPrefix(unpad(event.args.action))),\n        sourceId: event.args.source,\n        blockNumber: event.blockNumber,\n      });\n    }\n    return {\n      collection,\n      lastBlock: fetched.fromBlock,\n      lastIndex: fetched.lastIndex,\n      akashaId: data.akashaId,\n      limit: maxResults,\n    };\n  });\n  const essenceIterator = { execute, name: 'essenceIterator' };\n  const service = function () {\n    return essenceIterator;\n  };\n  sp().service(PROFILE_MODULE.essenceIterator, service);\n  return essenceIterator;\n}\n"]}