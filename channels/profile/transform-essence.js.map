{"version":3,"file":"transform-essence.js","sourceRoot":"","sources":["transform-essence.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA8E;AAEjE,QAAA,gBAAgB,GAAG;IAC9B,EAAE,EAAE,mBAAmB;IACvB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC1B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;CAC9B,CAAC;AACF,cAA6B,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACnD,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,wBAAgB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEzD,MAAM,OAAO,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QAEpD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC9D,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB;aACzD,OAAO,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAEpC,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjE,OAAO,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC,CAAC,CAAC;IACH,MAAM,uBAAuB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IACvF,MAAM,OAAO,GAAG;QACd,OAAO,uBAAuB,CAAC;IACjC,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,0BAAc,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACvD,OAAO,uBAAuB,CAAC;AACjC,CAAC;AAtBD,uBAsBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const transformEssence = {\n  id: '/transformEssence',\n  type: 'object',\n  properties: {\n    amount: { type: 'string' },\n    token: { type: 'string' },\n  },\n  required: ['amount', 'token'],\n};\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, transformEssence, { throwError: true });\n\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n\n    const bnAmount = web3Api.instance.toWei(data.amount, 'ether');\n    const txData = contracts.instance.Essence.transformEssence\n    .request(bnAmount, { gas: 100000 });\n\n    const transaction = yield contracts.send(txData, data.token, cb);\n    return { tx: transaction.tx, receipt: transaction.receipt };\n  });\n  const transformEssenceService = { execute, name: 'transformEssence', hasStream: true };\n  const service = function () {\n    return transformEssenceService;\n  };\n  sp().service(PROFILE_MODULE.transformEssence, service);\n  return transformEssenceService;\n}\n"]}