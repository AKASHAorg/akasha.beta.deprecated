{"version":3,"file":"follow-profile.js","sourceRoot":"","sources":["follow-profile.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA6F;AAEhF,QAAA,mBAAmB,GAAG;IACjC,EAAE,EAAE,gBAAgB;IACpB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;QACjD,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC5B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,OAAO,CAAC;CACpB,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACnD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,2BAAmB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE5D,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,yBAAa,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACpF,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAChF,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjE,UAAU,CAAC,uBAAW,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAC5C,OAAO,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC,CAAC,CAAC;IACH,MAAM,aAAa,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC1E,MAAM,OAAO,GAAG;QACd,OAAO,aAAa,CAAC;IACvB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,0BAAc,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IACpD,OAAO,aAAa,CAAC;AACvB,CAAC;AAnBD,uBAmBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const followProfileSchema = {\n  id: '/followProfile',\n  type: 'object',\n  properties: {\n    ethAddress: { type: 'string', format: 'address' },\n    akashaId: { type: 'string' },\n    token: { type: 'string' },\n  },\n  required: ['token'],\n};\n\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, followProfileSchema, { throwError: true });\n\n    const address = yield getService(COMMON_MODULE.profileHelpers).profileAddress(data);\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    const txData = contracts.instance.Feed.follow.request(address, { gas: 400000 });\n    const transaction = yield contracts.send(txData, data.token, cb);\n    getService(CORE_MODULE.STASH).mixed.flush();\n    return { tx: transaction.tx, receipt: transaction.receipt };\n  });\n  const followProfile = { execute, name: 'followProfile', hasStream: true };\n  const service = function () {\n    return followProfile;\n  };\n  sp().service(PROFILE_MODULE.followProfile, service);\n  return followProfile;\n}\n"]}