{"version":3,"file":"toggle-donations.js","sourceRoot":"","sources":["toggle-donations.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAE9E,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,EAAE,EAAE,kBAAkB;IACtB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;QAC3B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;CAC9B,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE,EAAE,UAAU;IAE1C,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAC/B,QAAQ,CAAC,EAAE,IAAwC,EAAE,EAAE;QACrD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACxD,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAEpD,MAAM,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACtF,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;SACzE;QAED,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ;aAC9B,eAAe;aACf,eAAe;aACf,OAAO,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7D,OAAO;YACL,OAAO;SACR,CAAC;IACJ,CAAC,CAAC,CAAC;IAEL,MAAM,sBAAsB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,iBAAiB,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IACrF,MAAM,OAAO,GAAG;QACd,OAAO,sBAAsB,CAAC;IAChC,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;IAEtD,OAAO,sBAAsB,CAAC;AAChC,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const toggleDonations = {\n  id: '/toggleDonations',\n  type: 'object',\n  properties: {\n    status: { type: 'boolean' },\n    token: { type: 'string' },\n  },\n  required: ['token', 'status'],\n};\n\nexport default function init (sp, getService) {\n\n  const execute = Promise.coroutine(\n    function* (data: { status: boolean, token: string }, cb) {\n      const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n      v.validate(data, toggleDonations, { throwError: true });\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n\n      const currentProfile = yield (getService(PROFILE_MODULE.getCurrentProfile)).execute();\n      if (!currentProfile.raw) {\n        throw new Error('Need to register an akashaId to access this setting.');\n      }\n\n      const txData = contracts.instance\n        .ProfileResolver\n        .toggleDonations\n        .request(currentProfile.raw, data.status, { gas: 200000 });\n      const receipt = yield contracts.send(txData, data.token, cb);\n      return {\n        receipt,\n      };\n    });\n\n  const toggleDonationsService = { execute, name: 'toggleDonations', hasStream: true };\n  const service = function () {\n    return toggleDonationsService;\n  };\n  sp().service(PROFILE_MODULE.toggleDonations, service);\n\n  return toggleDonationsService;\n}\n"]}