{"version":3,"file":"aeth-cycle.js","sourceRoot":"","sources":["aeth-cycle.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA8E;AAEjE,QAAA,eAAe,GAAG;IAC7B,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC1B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;IACD,QAAQ,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;CAC9B,CAAC;AAEF,cAA6B,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO;SACpB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAuC,EAAE,EAAE;QAC/D,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,uBAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAExD,MAAM,QAAQ,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC;aAC9C,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAExC,MAAM,MAAM,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC;aAC7C,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAE9D,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC;aACxD,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAEhC,OAAO,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC,CAAC,CAAC;IACL,MAAM,SAAS,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAClE,MAAM,OAAO,GAAG;QACd,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,0BAAc,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChD,OAAO,SAAS,CAAC;AACnB,CAAC;AAxBD,uBAwBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const cycleAethSchema = {\n  id: '/cycleAeth',\n  type: 'object',\n  properties: {\n    amount: { type: 'string' },\n    token: { type: 'string' },\n  },\n  required: ['amount', 'token'],\n};\n\nexport default function init(sp, getService) {\n\n  const execute = Promise\n    .coroutine(function* (data: { amount: string, token: string }, cb) {\n      const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n      v.validate(data, cycleAethSchema, { throwError: true });\n\n      const bnAmount = getService(CORE_MODULE.WEB3_API)\n        .instance.toWei(data.amount, 'ether');\n\n      const txData = getService(CORE_MODULE.CONTRACTS)\n        .instance.AETH.cycleAeth.request(bnAmount, { gas: 160000 });\n\n      const transaction = yield getService(CORE_MODULE.CONTRACTS)\n        .send(txData, data.token, cb);\n\n      return { tx: transaction.tx, receipt: transaction.receipt };\n    });\n  const cycleAeth = { execute, name: 'cycleAeth', hasStream: true };\n  const service = function () {\n    return cycleAeth;\n  };\n  sp().service(PROFILE_MODULE.cycleAeth, service);\n  return cycleAeth;\n}\n"]}