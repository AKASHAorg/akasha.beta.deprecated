{"version":3,"file":"resolve-ethaddress.js","sourceRoot":"","sources":["resolve-ethaddress.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAA8E;AAC9E,qDAAwC;AAE3B,QAAA,kBAAkB,GAAG;IAChC,EAAE,EAAE,eAAe;IACnB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;KAClD;IACD,QAAQ,EAAE,CAAC,YAAY,CAAC;CACzB,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC;QACnE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,0BAAkB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3D,MAAM,OAAO,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC;QACpD,IAAI,QAAQ,CAAC;QACb,IAAI,UAAU,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnF,IAAI,CAAC,uBAAK,CAAC,UAAU,CAAC,EAAE;YACtB,UAAU,GAAG,IAAI,CAAC;SACnB;aAAM;YACL,QAAQ,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SACzE;QAED,MAAM,QAAQ,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1E,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC;IACvD,MAAM,OAAO,GAAG;QACd,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,0BAAc,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACnD,OAAO,YAAY,CAAC;AACtB,CAAC;AAzBD,uBAyBC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\nimport { unpad } from 'ethereumjs-util';\n\nexport const getByAddressSchema = {\n  id: '/getByAddress',\n  type: 'object',\n  properties: {\n    ethAddress: { type: 'string', format: 'address' },\n  },\n  required: ['ethAddress'],\n};\n\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data) {\n    const v = new getService(CORE_MODULE.VALIDATOR_SCHEMA).Validator();\n    v.validate(data, getByAddressSchema, { throwError: true });\n    const web3Api = getService(CORE_MODULE.WEB3_API);\n    const contracts = getService(CORE_MODULE.CONTRACTS);\n    let resolved;\n    let profileHex = yield contracts.instance.ProfileResolver.reverse(data.ethAddress);\n    if (!unpad(profileHex)) {\n      profileHex = null;\n    } else {\n      resolved = yield contracts.instance.ProfileResolver.resolve(profileHex);\n    }\n\n    const akashaId = (profileHex) ? web3Api.instance.toUtf8(resolved[0]) : '';\n    return { ethAddress: data.ethAddress, akashaId, raw: profileHex };\n  });\n\n  const getByAddress = { execute, name: 'getByAddress' };\n  const service = function () {\n    return getByAddress;\n  };\n  sp().service(PROFILE_MODULE.getByAddress, service);\n  return getByAddress;\n}\n"]}