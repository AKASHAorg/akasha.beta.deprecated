{"version":3,"file":"get-profile-list.js","sourceRoot":"","sources":["get-profile-list.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAC9E,OAAO,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AAEtD,MAAM,CAAC,MAAM,cAAc,GAAG;IAC5B,EAAE,EAAE,iBAAiB;IACrB,IAAI,EAAE,OAAO;IACb,KAAK,EAAE;QACL,IAAI,EAAE,iBAAiB;KACxB;IACD,WAAW,EAAE,IAAI;IACjB,QAAQ,EAAE,CAAC;CACZ,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAE,EAAE,EAAE,UAAU;IAE1C,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE;QACnD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,SAAS,CAAC,oBAAoB,EAAE,iBAAiB,CAAC,CAAC;QACrD,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAEvD,MAAM,WAAW,GAAG,UAAU,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAC3D,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YAChC,OAAO,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACxB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IACH,MAAM,eAAe,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC7E,MAAM,OAAO,GAAG;QACd,OAAO,eAAe,CAAC;IACzB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACrD,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\nimport { getProfileDataSchema } from './profile-data';\n\nexport const getProfileList = {\n  id: '/getProfileList',\n  type: 'array',\n  items: {\n    $ref: '/getProfileData',\n  },\n  uniqueItems: true,\n  minItems: 1,\n};\n\nexport default function init (sp, getService) {\n\n  const execute = Promise.coroutine(function* (data, cb) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.addSchema(getProfileDataSchema, '/getProfileData');\n    v.validate(data, getProfileList, { throwError: true });\n\n    const profileData = getService(PROFILE_MODULE.profileData);\n    const pool = data.map((profile) => {\n      return profileData.execute(profile, cb).then(profileData => cb(null, profileData));\n    });\n    yield Promise.all(pool);\n    return { done: true };\n  });\n  const getProfileLists = { execute, name: 'getProfileList', hasStream: true };\n  const service = function () {\n    return getProfileLists;\n  };\n  sp().service(PROFILE_MODULE.getProfileList, service);\n  return getProfileLists;\n}\n"]}