{"version":3,"file":"aeth-transfers-iterator.js","sourceRoot":"","sources":["aeth-transfers-iterator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird';\nimport { COMMON_MODULE, CORE_MODULE, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const transfersIteratorSchema = {\n  id: '/transfersIterator',\n  type: 'object',\n  properties: {\n    ethAddress: { type: 'string', format: 'address' },\n    limit: { type: 'number' },\n    toBlock: { type: 'number' },\n    lastIndex: { type: 'number' },\n    reversed: { type: 'boolean' },\n    token: { type: 'string' },\n  },\n  required: ['toBlock', 'ethAddress'],\n};\n\nexport default function init (sp, getService) {\n\n  const execute = Promise\n    .coroutine(function* (data) {\n\n      const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n      v.validate(data, transfersIteratorSchema, { throwError: true });\n\n      const maxResults = data.limit || 5;\n      const collection = [];\n      const contracts = getService(CORE_MODULE.CONTRACTS);\n      const profileHelpers = getService(COMMON_MODULE.profileHelpers);\n      const web3Api = getService(CORE_MODULE.WEB3_API);\n      const fetched = yield contracts\n        .fromEvent(\n          contracts.instance.AETH.Transfer, { to: data.ethAddress }, data.toBlock,\n          maxResults, { lastIndex: data.lastIndex, reversed: data.reversed || false });\n\n      for (const event of fetched.results) {\n        const from = yield profileHelpers.resolveEthAddress(event.args.from);\n\n        collection.push({\n          from,\n          amount: (web3Api.instance.utils.toBN(\n              web3Api.instance.utils.fromWei(web3Api.instance.utils.toBN(event.args.value), 'ether'))\n          ).toNumber(),\n          blockNumber: event.blockNumber,\n        });\n\n        if (collection.length === data.limit) {\n          break;\n        }\n      }\n\n      return { collection, lastBlock: fetched.fromBlock, lastIndex: fetched.lastIndex };\n    });\n  const transfersIterator = { execute, name: 'transfersIterator' };\n  const service = function () {\n    return transfersIterator;\n  };\n  sp().service(PROFILE_MODULE.transfersIterator, service);\n  return transfersIterator;\n}\n"]}