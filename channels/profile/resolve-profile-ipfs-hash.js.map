{"version":3,"file":"resolve-profile-ipfs-hash.js","sourceRoot":"","sources":["resolve-profile-ipfs-hash.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,+DAAgG;AAEnF,QAAA,sBAAsB,GAAG;IACpC,EAAE,EAAE,yBAAyB;IAC7B,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,QAAQ,EAAE;YACR,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE;YAC9C,WAAW,EAAE,IAAI;YACjB,QAAQ,EAAE,CAAC;SACZ;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,SAAS;SAChB;KACF;IACD,QAAQ,EAAE,CAAC,UAAU,CAAC;CACvB,CAAC;AAEF,SAAwB,IAAI,CAAC,EAAE,EAAE,UAAU;IAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAO;QACxD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,8BAAsB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/D,MAAM,cAAc,GAAG,UAAU,CAAC,0BAAc,CAAC,cAAc,CAAC,CAAC;QACjE,MAAM,eAAe,GAAG,UAAU,CAAC,0BAAc,CAAC,eAAe,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,UAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC;QAElD,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,eAAe,CAAC;QAC/D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;YACpC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC;iBAC1B,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,4BAAgB,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC;iBAC7D,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;gBAChB,EAAE,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC;YAC/C,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACb,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC,CAAC;IACH,MAAM,wBAAwB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,wBAAwB,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC9F,MAAM,OAAO,GAAG;QACd,OAAO,wBAAwB,CAAC;IAClC,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,0BAAc,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;IAC7D,OAAO,wBAAwB,CAAC;AAClC,CAAC;AA5BD,uBA4BC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, GENERAL_SETTINGS, PROFILE_MODULE } from '@akashaproject/common/constants';\n\nexport const resolveProfileIpfsHash = {\n  id: '/resolveProfileIpfsHash',\n  type: 'object',\n  properties: {\n    ipfsHash: {\n      type: 'array',\n      items: { type: 'string', format: 'multihash' },\n      uniqueItems: true,\n      minItems: 1,\n    },\n    full: {\n      type: 'boolean',\n    },\n  },\n  required: ['ipfsHash'],\n};\n\nexport default function init(sp, getService) {\n\n  const execute = Promise.coroutine(function* (data, cb: any) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, resolveProfileIpfsHash, { throwError: true });\n    const resolveProfile = getService(PROFILE_MODULE.resolveProfile);\n    const getShortProfile = getService(PROFILE_MODULE.getShortProfile);\n    const settings = getService(CORE_MODULE.SETTINGS);\n\n    const resolve = (data.full) ? resolveProfile : getShortProfile;\n    data.ipfsHash.forEach((profileHash) => {\n      resolve(profileHash, false)\n      .timeout(settings.get(GENERAL_SETTINGS.OP_WAIT_TIME) || 15000)\n      .then((profile) => {\n        cb(null, { profile, ipfsHash: profileHash });\n      })\n      .catch((err) => {\n        cb({ message: err.message, ipfsHash: profileHash });\n      });\n    });\n    return {};\n  });\n  const resolveProfileIpfsHashes = { execute, name: 'resolveProfileIpfsHash', hasStream: true };\n  const service = function () {\n    return resolveProfileIpfsHashes;\n  };\n  sp().service(PROFILE_MODULE.resolveProfileIpfsHash, service);\n  return resolveProfileIpfsHashes;\n}\n"]}