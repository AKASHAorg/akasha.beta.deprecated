{"version":3,"file":"start.js","sourceRoot":"","sources":["start.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE3E,MAAM,aAAa,GAAG;IACpB,EAAE,EAAE,eAAe;IACnB,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC3B,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC1B;CACF,CAAC;AACF,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,EAAE,EAAE,UAAU;IACzC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI;QAC/C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD,MAAM,aAAa,GAAG,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAC7D,IAAI,aAAa,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE;YACrD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QACD,aAAa,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC7C,aAAa,CAAC,WAAW,EAAE,CAAC,oBAAoB,EAAE,CAAC;QAEnD,MAAM,aAAa,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QAC1C,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC;IACvD,MAAM,OAAO,GAAG;QACd,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;IACF,EAAE,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAChD,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import * as Promise from 'bluebird';\nimport { CORE_MODULE, GETH_MODULE } from '@akashaproject/common/constants';\n\nconst startServiceS = {\n  id: '/startService',\n  type: 'object',\n  properties: {\n    datadir: { type: 'string' },\n    ipcpath: { type: 'string' },\n    cache: { type: 'number' },\n  },\n};\nexport default function init(sp, getService) {\n  const execute = Promise.coroutine(function* (data) {\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    v.validate(data, startServiceS, { throwError: true });\n    const gethConnector = getService(CORE_MODULE.GETH_CONNECTOR);\n    if (gethConnector.getInstance().serviceStatus.process) {\n      throw new Error('Geth is already running');\n    }\n    gethConnector.getInstance().setOptions(data);\n    gethConnector.getInstance().enableDownloadEvents();\n    // start daemon\n    yield gethConnector.getInstance().start();\n    return {};\n  });\n\n  const startService = { execute, name: 'startService' };\n  const service = function () {\n    return startService;\n  };\n  sp().service(GETH_MODULE.startService, service);\n  return startService;\n}\n"]}