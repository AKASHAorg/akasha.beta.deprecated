{
  "version": 3,
  "file": "channel.js",
  "sourceRoot": "",
  "sources": [
    "channel.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,mEAA+D;AAC/D,+BAAuD;AAEvD,MAAqB,aAAc,SAAQ,0BAAW;IAOpD,YAAY,OAAe,EAAE,IAAgD;QAC3E,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAChC,CAAC;IAEM,IAAI,CAAC,QAAuB;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IAChE,CAAC;IAEM,EAAE,CAAC,QAAkB;QAC1B,IAAI,CAAC,WAAW,CAAC,GAAG,CAClB,QAAQ,EACR,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CACtF,CAAC;IACJ,CAAC;IAEM,IAAI,CAAC,QAAkB;QAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAChC,CAAC,IAAI,EAAE,EAAE,GAAG,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EACtD,CAAC,KAAK,EAAE,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CACnD,CAAC;IACJ,CAAC;IAEM,cAAc,CAAC,QAAkB;QACtC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEM,kBAAkB;QACvB,KAAK,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE;YACzC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAEM,IAAI,CAAC,IAAQ;QAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;CACF;AApDD,gCAoDC",
  "sourcesContent": [
    "import { ApiListener } from '@akashaproject/core/ipcPreloader';\nimport { Observer, Subject, Subscription } from 'rxjs';\n\nexport default class DuplexChannel extends ApiListener {\n  public subscribers: Map<Function, Subscription>;\n  public subject: Subject<any>;\n  public observer: Observer<any>;\n  protected windowId;\n\n\n  constructor(channel: string, opts?: {channelName?: string, windowId?: string}) {\n    super(channel, opts.channelName);\n    this.subject = new Subject();\n    this.subscribers = new Map();\n    this.windowId = opts.windowId;\n  }\n\n  public bind(observer: Observer<any>) {\n    this.observer = observer;\n  }\n\n  get listenerCount() {\n    return this.subject.observers.length || this.subscribers.size;\n  }\n\n  public on(listener: Function) {\n    this.subscribers.set(\n      listener,\n      this.subject.subscribe((data: any) => listener(null, data), error => listener(error)),\n    );\n  }\n\n  public once(listener: Function) {\n    const sub = this.subject.subscribe(\n      (data) => { listener(null, data); sub.unsubscribe(); },\n      (error) => { listener(error); sub.unsubscribe(); },\n    );\n  }\n\n  public removeListener(listener: Function) {\n    this.subscribers.get(listener).unsubscribe();\n    this.subscribers.delete(listener);\n  }\n\n  public removeAllListeners() {\n    for (const [listener] of this.subscribers) {\n      this.removeListener(listener);\n    }\n    this.pipe.unsubscribe();\n    this.subscribers.clear();\n  }\n\n  public send(data: {}) {\n    this.observer.next(data);\n  }\n}\n"
  ]
}