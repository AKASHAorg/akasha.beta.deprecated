{"version":3,"file":"watcher.js","sourceRoot":"","sources":["watcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { CORE_MODULE } from '@akashaproject/common/constants';\nimport DuplexChannel from './channel';\n\nconst dataStream = {\n  id: '/dataStream',\n  type: 'object',\n  properties: {\n    module: { type: 'string' },\n    method: { type: 'string' },\n    payload: { type: 'object' },\n  },\n  required: ['module', 'method', 'payload'],\n};\n\nexport default function startDataStream (modules, windowId, getService, logger) {\n  // create listener on main Channel\n  const ipcChannelMain = new DuplexChannel(\n    CORE_MODULE.DATA,\n    {\n      windowId,\n      channelName: 'mainChannel',\n    });\n  const ipcChannelUI = new DuplexChannel(CORE_MODULE.DATA, { channelName: 'uiChannel' });\n  // double link\n  ipcChannelMain.bind(ipcChannelUI.subject);\n  ipcChannelUI.bind(ipcChannelMain.subject);\n\n  const ipcLogger = logger.child({ module: 'IPC' });\n\n  ipcChannelMain.on(function (error, args) {\n    if (error) {\n      return ipcChannelMain.send({ args, error });\n    }\n    const v = new (getService(CORE_MODULE.VALIDATOR_SCHEMA)).Validator();\n    const result = v.validate(args, dataStream);\n    if (!result.valid) {\n      ipcLogger.debug({ args, result });\n      return ipcChannelMain.send({ args, error: result.errors });\n    }\n    let call;\n    let response;\n    const method = modules[args.module][args.method];\n    if (!method) {\n      return ipcChannelMain.send({\n        args,\n        error: { message: `Method ${args.method} not found on ${args.module} module` },\n      });\n    }\n\n    if (method.hasStream) {\n      call = method.execute(args.payload, (err, data) => {\n        let resp;\n        if (err) {\n          resp = { args, error: err };\n        } else {\n          resp = { data, args };\n        }\n        ipcChannelMain.send(resp);\n        resp = null;\n      });\n    } else {\n      call = method.execute(args.payload);\n    }\n    call\n      .then(data => response = { data, args })\n      .catch((err: Error) => {\n        ipcLogger.debug({ args, err });\n        response = { args, error: err };\n      })\n      .finally(() => {\n        ipcChannelMain.send(response);\n        response = null;\n      });\n  });\n\n  return { ipcChannelMain, ipcChannelUI };\n}\n"]}