{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,EAAE,EAAE,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,WAAW,MAAM,gBAAgB,CAAC;AACzC,OAAO,oBAAoB,MAAM,0BAA0B,CAAC;AAC5D,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,eAAe,MAAM,WAAW,CAAC;AAExC,IAAI,SAAS,CAAC;AACd,IAAI,aAAa,CAAC;AAElB,MAAM,QAAQ,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;IAC/B,IAAI,CAAC,SAAS,IAAI,CAAC,aAAa,EAAE;QAChC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;KACzE;IACD,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAChC;IACD,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;IAEjD,IAAI,KAAK,CAAC,MAAM,EAAE;QAChB,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KACzE;IAID,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC3B,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,YAAY,EAAE,SAAS,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACjG,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG;;QACnB,SAAS,GAAG,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QAGlD,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE;YAChC,SAAS,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;SAChD;aAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE;YAG3B,SAAS,CAAC,KAAK,GAAG,OAAO,CAAC;SAC3B;QACD,MAAM,WAAW,CAAC,EAAE,EAAE,UAAU,EAAE,SAAS,CAAC;aACzC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACjC,aAAa,GAAG,eAAe,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAC5E,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEL,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;CAAA,CAAC;AACF,eAAe,YAAY,CAAC","sourcesContent":["import sp, { getService } from '@akashaproject/core/sp';\nimport { CORE_MODULE } from '@akashaproject/common/constants';\nimport { bootstrap } from '../app/index';\nimport initModules from './init-modules';\nimport registerWeb3Provider from './register-web3-provider';\nimport * as pino from 'pino';\nimport startDataStream from './watcher';\n\nlet appLogger;\nlet duplexChannel;\n\nconst startApp = (web3, vault) => {\n  if (!appLogger || !duplexChannel) {\n    throw new Error('Must set appLogger and duplexChannel before starting');\n  }\n  if (!web3) {\n    return bootstrap(false, false);\n  }\n  getService(CORE_MODULE.WEB3_API).instance = web3;\n  // web3 send default address\n  if (vault.length) {\n    getService(CORE_MODULE.WEB3_API).instance.eth.defaultAccount = vault[0];\n  }\n\n  // must refactor this\n  // web3Helper.setChannel(getChannels().client.tx.emitMined);\n  console.log(duplexChannel);\n  bootstrap(true, !!vault.length, duplexChannel.ipcChannelUI, appLogger.child({ module: 'UI' }));\n};\n\nconst bootstrapApp = async function () {\n  appLogger = pino({ browser: { asObject: true } });\n\n  // default logging lvl is info\n  if (process.env.AKASHA_LOG_LEVEL) {\n    appLogger.level = process.env.AKASHA_LOG_LEVEL;\n  } else if (!process.env.HOT) {\n\n    // production logs\n    appLogger.level = 'error';\n  }\n  await initModules(sp, getService, appLogger)\n    .then((modules) => {\n      appLogger.info('modules inited');\n      duplexChannel = startDataStream(modules, 'workerId', getService, appLogger);\n      appLogger.info('api listening');\n    });\n\n  registerWeb3Provider(startApp);\n};\nexport default bootstrapApp;\n"]}