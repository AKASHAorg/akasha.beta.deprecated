{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "",
  "sources": [
    "main.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,+CAAwD;AACxD,+DAA8D;AAC9D,wCAAyC;AACzC,iDAAyC;AACzC,qEAA4D;AAC5D,6BAA6B;AAC7B,uCAAwC;AAExC,IAAI,SAAS,CAAC;AACd,IAAI,aAAa,CAAC;AAElB,MAAM,QAAQ,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;IAC/B,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,iBAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAChC;IACD,eAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;IAEjD,IAAI,KAAK,CAAC,MAAM,EAAE;QAChB,eAAU,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KACzE;IAKD,iBAAS,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,YAAY,EAAE,SAAS,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACjG,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,KAAK;IACxB,SAAS,GAAG,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAGlD,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE;QAChC,SAAS,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;KAChD;SAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE;QAG3B,SAAS,CAAC,KAAK,GAAG,OAAO,CAAC;KAC3B;IACD,MAAM,sBAAW,CAAC,YAAE,EAAE,eAAU,EAAE,SAAS,CAAC;SACzC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;QAChB,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACjC,aAAa,GAAG,iBAAe,CAAC,OAAO,EAAE,UAAU,EAAE,eAAU,EAAE,SAAS,CAAC,CAAC;QAC5E,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEL,gCAAoB,CAAC,QAAQ,CAAC,CAAC;AACjC,CAAC,CAAC;AACF,kBAAe,YAAY,CAAC",
  "sourcesContent": [
    "import sp, { getService } from '@akashaproject/core/sp';\nimport { CORE_MODULE } from '@akashaproject/common/constants';\nimport { bootstrap } from '../app/index';\nimport initModules from './init-modules';\nimport registerWeb3Provider from './register-web3-provider';\nimport * as pino from 'pino';\nimport startDataStream from './watcher';\n\nlet appLogger;\nlet duplexChannel;\n\nconst startApp = (web3, vault) => {\n  if (!web3) {\n    return bootstrap(false, false);\n  }\n  getService(CORE_MODULE.WEB3_API).instance = web3;\n  // web3 send default address\n  if (vault.length) {\n    getService(CORE_MODULE.WEB3_API).instance.eth.defaultAccount = vault[0];\n  }\n\n  // must refactor this\n  // web3Helper.setChannel(getChannels().client.tx.emitMined);\n\n  bootstrap(true, !!vault.length, duplexChannel.ipcChannelUI, appLogger.child({ module: 'UI' }));\n};\n\nconst bootstrapApp = async function () {\n  appLogger = pino({ browser: { asObject: true } });\n\n  // default logging lvl is info\n  if (process.env.AKASHA_LOG_LEVEL) {\n    appLogger.level = process.env.AKASHA_LOG_LEVEL;\n  } else if (!process.env.HOT) {\n\n    // production logs\n    appLogger.level = 'error';\n  }\n  await initModules(sp, getService, appLogger)\n    .then((modules) => {\n      appLogger.info('modules inited');\n      duplexChannel = startDataStream(modules, 'workerId', getService, appLogger);\n      appLogger.info('api listening');\n    });\n\n  registerWeb3Provider(startApp);\n};\nexport default bootstrapApp;\n"
  ]
}